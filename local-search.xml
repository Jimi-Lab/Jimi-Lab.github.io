<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>某道逆向（翻译软件）</title>
    <link href="/2025/05/26/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91/"/>
    <url>/2025/05/26/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91/</url>
    
    <content type="html"><![CDATA[<p>:::info<br><a href="https://fanyi.youdao.com/#/TextTranslate">https://fanyi.youdao.com/#/TextTranslate</a></p><p>:::</p><h3 id="Pawto">开始分析</h3>抓取得三个包，可看出来是 aes 加密<p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/1.png"></p><p>sign 和时间戳是变化的</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/2.png"></p><h3 id="LTkUz">逆sign</h3><h4 id="QQ0to">1. 搜索 sign</h4>![](../img/某道逆向.md/3.png)<p>根据数据包中的 sign 周围的变量来定位 sign，若断点打不到本行就不是，接着往下找</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/4.png"></p><p>再次翻译，成功断到此处</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/5.png"></p><h4 id="BxQQJ">2.sign(a,e)</h4>a 为：a = (new Date).getTime();<p>e 不知道是什么</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/6.png"></p><p>运行后 e 出了新结果</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/7.png"></p><p>说明 sign(a,e)函数会运行两次</p><p>查看网络中的 sign</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/8.png"></p><p>看最终使用的是第一次的 sign 还是第二次的。</p><p>S 函数</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/9.png"></p><p>通过对 1 进行加密判断加密模式是不是 md5</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/10.png"></p><p>client、product、key 的值是固定的</p><h4 id="JOGSR">sign 解密代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">CryptoJs</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getsign</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">const</span> a = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>).<span class="hljs-title function_">getTime</span>();<br><br>    test = <span class="hljs-string">`client=fanyideskweb&amp;mysticTime=<span class="hljs-subst">$&#123;a&#125;</span>&amp;product=webfanyi&amp;key=Vy4EQ1uwPkUoqvcP1nIu6WiAjxFeA3Y3`</span><br>    sign = <span class="hljs-title class_">CryptoJs</span>.<span class="hljs-title class_">MD5</span>(test).<span class="hljs-title function_">toString</span>();<br>    <span class="hljs-keyword">return</span> [a,sign]<br><br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getsign</span>());<br><br><br><br><br></code></pre></td></tr></table></figure><h3 id="WPU0g">逆 webtranslate</h3>![](../img/某道逆向.md/11.png)<p>:::info<br>看到一大串数据无从下手，三种可能：</p><p>JSON.parse</p><p>decrypt</p><p>join</p><p>:::</p><p>定位：</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/12.png"></p><p>da.A.decodeData(o, ha.A.state.text.decodeKey, ha.A.state.text.decodeIv)的结果已经是 json 字符串了</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/13.png"></p><p>分析 json 解密的函数</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/14.png"></p><p>传入 e   t   a 三个参数</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/15.png"></p><p>const o 和 n 为固定值</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/16.png"></p><p>目前 js 状态：</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/17.png"></p><p>arg 为 O 函数传入的 e</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/18.png"></p><h3 id="uBPVj">Py 脚本</h3>![](../img/某道逆向.md/19.png)<p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/20.png"></p><h4 id="Lfn38">得到密文</h4>![](../img/某道逆向.md/21.png)<p>运行 py 脚本，得到值（这个值是服务器传给客户端的密文）</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/22.png"></p><h4 id="nUGim">解密</h4><p>调用 js 的解密函数</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/23.png"></p><p>运行 py</p><p>终端就可以进行翻译了~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">CryptoJs</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>);<br><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getsign</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> a = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>).<span class="hljs-title function_">getTime</span>();<br><br>    test = <span class="hljs-string">`client=fanyideskweb&amp;mysticTime=<span class="hljs-subst">$&#123;a&#125;</span>&amp;product=webfanyi&amp;key=Vy4EQ1uwPkUoqvcP1nIu6WiAjxFeA3Y3`</span><br>    sign = <span class="hljs-title class_">CryptoJs</span>.<span class="hljs-title class_">MD5</span>(test).<span class="hljs-title function_">toString</span>();<br>    <span class="hljs-keyword">return</span> [a, sign]<br><br>&#125;<br><span class="hljs-comment">//console.log(getsign());</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">translate_response</span>(<span class="hljs-params">text</span>) &#123;<br>    <span class="hljs-comment">// text 是 base64 字符串</span><br>    <span class="hljs-keyword">const</span> key = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>([<span class="hljs-number">8</span>, <span class="hljs-number">20</span>, <span class="hljs-number">157</span>, <span class="hljs-number">167</span>, <span class="hljs-number">60</span>, <span class="hljs-number">89</span>, <span class="hljs-number">206</span>, <span class="hljs-number">98</span>, <span class="hljs-number">85</span>, <span class="hljs-number">91</span>, <span class="hljs-number">1</span>, <span class="hljs-number">233</span>, <span class="hljs-number">47</span>, <span class="hljs-number">52</span>, <span class="hljs-number">232</span>, <span class="hljs-number">56</span>]);<br>    <span class="hljs-keyword">const</span> iv = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>([<span class="hljs-number">210</span>, <span class="hljs-number">187</span>, <span class="hljs-number">27</span>, <span class="hljs-number">253</span>, <span class="hljs-number">232</span>, <span class="hljs-number">59</span>, <span class="hljs-number">56</span>, <span class="hljs-number">195</span>, <span class="hljs-number">68</span>, <span class="hljs-number">54</span>, <span class="hljs-number">99</span>, <span class="hljs-number">87</span>, <span class="hljs-number">183</span>, <span class="hljs-number">156</span>, <span class="hljs-number">174</span>, <span class="hljs-number">28</span>]);<br>    <span class="hljs-keyword">const</span> decipher = crypto.<span class="hljs-title function_">createDecipheriv</span>(<span class="hljs-string">&#x27;aes-128-cbc&#x27;</span>, key, iv);<br>    <span class="hljs-keyword">let</span> decrypted = decipher.<span class="hljs-title function_">update</span>(text, <span class="hljs-string">&#x27;base64&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>);<br>    decrypted += decipher.<span class="hljs-title function_">final</span>(<span class="hljs-string">&#x27;utf8&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(decrypted);<br>&#125;<br><br><span class="hljs-comment">//arg = &#x27;Z21kD9ZK1ke6ugku2ccWu4n6eLnvoDT0YgGi0y3g-v0B9sYqg8L9D6UERNozYOHqnYdl2efZNyM6Trc_xS-zKtfTK4hb6JP8XwCzNh0avc8qItQUiIU_4wKKXJlIpvMvfKvJaaZzaX6VEtpkr2FdkfoT_Jgbm2GRSVj3r40autIdlImENG8hC0ZH4ww7utwuTt3Oo_ZpXg0BSq9wePSAB75-ChkiGKF9HTIPeCl2bl84SBD1XDfFCZpkKQhecYSs0JLoXOqP2ltavxRrg58Hp1q5uIgZZ_Oo2-Jmd-t1r4es40drcAq5bjmS62M2VJF8D6ojtOh9JTfNwgzD3CxYn-Pd7-TgHMyNEJEkFXTAyxzpjlFqtrCYDE3SZUYlENkqsL8Wrra1hM-1nTfiB-BLcWAdRBynNpP5_54aq_-GBsq8bB_9yEX5ovzDB4_Ry_spVVuUnb39iplMHCdCnjOD3ngiIDbl9SUz-9npjBX05ZYRdPmFPAl424qdoaxeVqnVoH8jQFPZVqaHMzu4mJg0SICDWFH7GP1zqGRbXd3ESjT_iBInl3gICt2XVuhh_nubcELkTEC6xbqEDRQkPUNMpzXJHjcvsLHtcmSW0S9F0445ho9kT2qZYdMBC3Fs0OaHpUtFu77gZpQn7sGiqh8VliXIcUtfvvop-1c-Vu5QjfUbLn2-s5POR9fGYG6rt6ioe_PGmwWj-Cc00zUM7FybfarKTr4D3Rk57R72qpXN4Ja86ZsCAMmDG-m5z31RQh_V7echJ8Kna3Go3yWKCK4vtSwOWrFhiS5RTz6EkrGc3SkFKbb5vp8Wop_84myBtgnBmj4CczhTq2HcOxrJf4def6yDt2uBxyv4bTVGx9Yx3uB4Gx0iK5kYvfma6B_LnkRWk331wjuXKQtBGYIuWkR8J5QtvBmIRVaa7AA19Z4xMIEAqbcuQ5p4I9FCElthBrJdtEr4l29PhwKfsA7pYeU2EJLRrRK42WQpEy0Xwx_2Lz2e3Rlf-L467aRO7RmuvBXD-J_H0IwaArTP7K3_ZeSUzEvCicixstp94kzkLHCsyJHZXiR3YTq3t7lmNgpfDbb-&#x27;</span><br><span class="hljs-comment">//console.log(translate_response(&#x27;Z21kD9ZK1ke6ugku2ccWu4n6eLnvoDT0YgGi0y3g-v0B9sYqg8L9D6UERNozYOHqnYdl2efZNyM6Trc_xS-zKtfTK4hb6JP8XwCzNh0avc8qItQUiIU_4wKKXJlIpvMvfKvJaaZzaX6VEtpkr2FdkfoT_Jgbm2GRSVj3r40autIdlImENG8hC0ZH4ww7utwuTt3Oo_ZpXg0BSq9wePSAB75-ChkiGKF9HTIPeCl2bl84SBD1XDfFCZpkKQhecYSs0JLoXOqP2ltavxRrg58Hp1q5uIgZZ_Oo2-Jmd-t1r4es40drcAq5bjmS62M2VJF8D6ojtOh9JTfNwgzD3CxYn-Pd7-TgHMyNEJEkFXTAyxzpjlFqtrCYDE3SZUYlENkqsL8Wrra1hM-1nTfiB-BLcWAdRBynNpP5_54aq_-GBsq8bB_9yEX5ovzDB4_Ry_spVVuUnb39iplMHCdCnjOD3ngiIDbl9SUz-9npjBX05ZYRdPmFPAl424qdoaxeVqnVoH8jQFPZVqaHMzu4mJg0SICDWFH7GP1zqGRbXd3ESjT_iBInl3gICt2XVuhh_nubcELkTEC6xbqEDRQkPUNMpzXJHjcvsLHtcmSW0S9F0445ho9kT2qZYdMBC3Fs0OaHpUtFu77gZpQn7sGiqh8VliXIcUtfvvop-1c-Vu5QjfUbLn2-s5POR9fGYG6rt6ioe_PGmwWj-Cc00zUM7FybfarKTr4D3Rk57R72qpXN4Ja86ZsCAMmDG-m5z31RQh_V7echJ8Kna3Go3yWKCK4vtSwOWrFhiS5RTz6EkrGc3SkFKbb5vp8Wop_84myBtgnBmj4CczhTq2HcOxrJf4def6yDt2uBxyv4bTVGx9Yx3uB4Gx0iK5kYvfma6B_LnkRWk331wjuXKQtBGYIuWkR8J5QtvBmIRVaa7AA19Z4xMIEAqbcuQ5p4I9FCElthBrJdtEr4l29PhwKfsA7pYeU2EJLRrRK42WQpEy0Xwx_2Lz2e3Rlf-L467aRO7RmuvBXD-J_H0IwaArTP7K3_ZeSUzEvCicixstp94kzkLHCsyJHZXiR3YTq3t7lmNgpfDbb-&#x27;));</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> execjs<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><br><br><br>cookies = &#123;<br>    <span class="hljs-string">&#x27;OUTFOX_SEARCH_USER_ID&#x27;</span>: <span class="hljs-string">&#x27;-39140274@218.106.117.234&#x27;</span>,<br>    <span class="hljs-string">&#x27;OUTFOX_SEARCH_USER_ID_NCOO&#x27;</span>: <span class="hljs-string">&#x27;1017813054.5103312&#x27;</span>,<br>    <span class="hljs-string">&#x27;DICT_DOCTRANS_SESSION_ID&#x27;</span>: <span class="hljs-string">&#x27;NGI5MmMzZTktYmY5ZS00Njg1LTkwODMtODZlZjI2OTA5YzZh&#x27;</span>,<br>    <span class="hljs-string">&#x27;_uetsid&#x27;</span>: <span class="hljs-string">&#x27;b1a3a4202e6211f09ed8910f851b0f84&#x27;</span>,<br>    <span class="hljs-string">&#x27;_uetvid&#x27;</span>: <span class="hljs-string">&#x27;0a3206b0b5e211ef97071f44ad9eeb40&#x27;</span>,<br>&#125;<br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/json, text/plain, */*&#x27;</span>,<br>    <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6,ar;q=0.5&#x27;</span>,<br>    <span class="hljs-string">&#x27;Cache-Control&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span>,<br>    <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;keep-alive&#x27;</span>,<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>,<br>    <span class="hljs-string">&#x27;DNT&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>    <span class="hljs-string">&#x27;Origin&#x27;</span>: <span class="hljs-string">&#x27;https://fanyi.youdao.com&#x27;</span>,<br>    <span class="hljs-string">&#x27;Pragma&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span>,<br>    <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;https://fanyi.youdao.com/&#x27;</span>,<br>    <span class="hljs-string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="hljs-string">&#x27;empty&#x27;</span>,<br>    <span class="hljs-string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="hljs-string">&#x27;cors&#x27;</span>,<br>    <span class="hljs-string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="hljs-string">&#x27;same-site&#x27;</span>,<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36 Edg/136.0.0.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;sec-ch-ua&#x27;</span>: <span class="hljs-string">&#x27;&quot;Chromium&quot;;v=&quot;136&quot;, &quot;Microsoft Edge&quot;;v=&quot;136&quot;, &quot;Not.A/Brand&quot;;v=&quot;99&quot;&#x27;</span>,<br>    <span class="hljs-string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="hljs-string">&#x27;?0&#x27;</span>,<br>    <span class="hljs-string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="hljs-string">&#x27;&quot;Windows&quot;&#x27;</span>,<br>    <span class="hljs-comment"># &#x27;Cookie&#x27;: &#x27;OUTFOX_SEARCH_USER_ID=-39140274@218.106.117.234; OUTFOX_SEARCH_USER_ID_NCOO=1017813054.5103312; DICT_DOCTRANS_SESSION_ID=NGI5MmMzZTktYmY5ZS00Njg1LTkwODMtODZlZjI2OTA5YzZh; _uetsid=b1a3a4202e6211f09ed8910f851b0f84; _uetvid=0a3206b0b5e211ef97071f44ad9eeb40&#x27;,</span><br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">youdao</span>(<span class="hljs-params">txt</span>):<br>    jscode = execjs.<span class="hljs-built_in">compile</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;translate.js&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read())  <span class="hljs-comment">#导入刚才写的js文件</span><br>    time_now,sign = jscode.call(<span class="hljs-string">&quot;getsign&quot;</span>)                                  <span class="hljs-comment">#调用js文件中的方法,得到time_now和sign</span><br>    data = &#123;<br>        <span class="hljs-string">&#x27;i&#x27;</span>: txt,<br>        <span class="hljs-string">&#x27;from&#x27;</span>: <span class="hljs-string">&#x27;zh-CHS&#x27;</span>,<br>        <span class="hljs-string">&#x27;to&#x27;</span>: <span class="hljs-string">&#x27;en&#x27;</span>,<br>        <span class="hljs-string">&#x27;useTerm&#x27;</span>: <span class="hljs-string">&#x27;false&#x27;</span>,<br>        <span class="hljs-string">&#x27;domain&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,<br>        <span class="hljs-string">&#x27;dictResult&#x27;</span>: <span class="hljs-string">&#x27;true&#x27;</span>,<br>        <span class="hljs-string">&#x27;keyid&#x27;</span>: <span class="hljs-string">&#x27;webfanyi&#x27;</span>,<br>        <span class="hljs-string">&#x27;sign&#x27;</span>: sign,<br>        <span class="hljs-string">&#x27;client&#x27;</span>: <span class="hljs-string">&#x27;fanyideskweb&#x27;</span>,<br>        <span class="hljs-string">&#x27;product&#x27;</span>: <span class="hljs-string">&#x27;webfanyi&#x27;</span>,<br>        <span class="hljs-string">&#x27;appVersion&#x27;</span>: <span class="hljs-string">&#x27;1.0.0&#x27;</span>,<br>        <span class="hljs-string">&#x27;vendor&#x27;</span>: <span class="hljs-string">&#x27;web&#x27;</span>,<br>        <span class="hljs-string">&#x27;pointParam&#x27;</span>: <span class="hljs-string">&#x27;client,mysticTime,product&#x27;</span>,<br>        <span class="hljs-string">&#x27;mysticTime&#x27;</span>: time_now,<br>        <span class="hljs-string">&#x27;keyfrom&#x27;</span>: <span class="hljs-string">&#x27;fanyi.web&#x27;</span>,<br>        <span class="hljs-string">&#x27;mid&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>        <span class="hljs-string">&#x27;screen&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>        <span class="hljs-string">&#x27;model&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>        <span class="hljs-string">&#x27;network&#x27;</span>: <span class="hljs-string">&#x27;wifi&#x27;</span>,<br>        <span class="hljs-string">&#x27;abtest&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,<br>        <span class="hljs-string">&#x27;yduuid&#x27;</span>: <span class="hljs-string">&#x27;abcdefg&#x27;</span>,<br>    &#125;<br>    response = requests.post(<span class="hljs-string">&#x27;https://dict.youdao.com/webtranslate&#x27;</span>, <br>                             cookies=cookies, <br>                             headers=headers, <br>                             data=data.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).text<br>    <span class="hljs-comment">#print(response)</span><br><br>    result = jscode.call(<span class="hljs-string">&#x27;translate_response&#x27;</span>,response)<br>    <span class="hljs-comment">#print(result)</span><br>    translate = result[<span class="hljs-string">&#x27;translateResult&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;tgt&#x27;</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;翻译结果为：<span class="hljs-subst">&#123;translate&#125;</span>&#x27;</span>)<br><br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    txt = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入要翻译的内容：&#x27;</span>)<br>    youdao(txt)<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建个人博客</title>
    <link href="/2025/05/18/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/05/18/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="工具：Cloudflare-GitHub-Hexo-Fluid"><a href="#工具：Cloudflare-GitHub-Hexo-Fluid" class="headerlink" title="工具：Cloudflare+GitHub+Hexo Fluid"></a>工具：Cloudflare+GitHub+Hexo Fluid</h1><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>hexo 是一个快速、简洁，而且功能强大的静态博客框架。我们可以使用 Markdown 编写博客文章，然后 hexo 帮我们把 Markdown 文件渲染成静态 HTML 页面。因此 hexo 非常适合用来搭建技术类博客，以及项目文档和个人网站。</p><p>需要安装node.js依赖</p><h2 id="github托管"><a href="#github托管" class="headerlink" title="github托管"></a>github托管</h2><p>将博客项目托管到github仓库，并使用Github pages来部署博客，可以让其他人也访问该博客。</p><h2 id="Cloudflare"><a href="#Cloudflare" class="headerlink" title="Cloudflare"></a>Cloudflare</h2><p>使用cloudflare加速国内用户访问速度。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>dash.cloudflare.com<span class="hljs-regexp">/062413ad293e022e2f66f461b1a256f6/</span>pages<span class="hljs-regexp">/view/</span>jimi-lab-github-io<br></code></pre></td></tr></table></figure><h2 id="修改Hexo主题"><a href="#修改Hexo主题" class="headerlink" title="修改Hexo主题"></a>修改Hexo主题</h2><p>我选择Fluid主题，再加一些个性化的设计，大家可以自行选择。</p><h2 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h2><p>使用github utterances插件</p><h2 id="md中添加截图"><a href="#md中添加截图" class="headerlink" title="md中添加截图"></a>md中添加截图</h2><p>cursor中使用了Paste Image插件。<br>F1截图之后，Ctrl+Alt+V,直接粘贴到特定目录，并在当前md文档中引用该图片。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="发布新文章"><a href="#发布新文章" class="headerlink" title="发布新文章"></a>发布新文章</h2><p>1.在Hexo项目根目录下使用命令：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;Hello World&quot;</span><br></code></pre></td></tr></table></figure><p>使用该命令会在文件中自动生成文件头。<br>2.这样会在 source&#x2F;_posts&#x2F; 目录下自动生成一个 Hello-World.md 的新文章文件。你只需要编辑这个 Markdown 文件，写入你的内容即可。</p><h4 id="将语雀文档同步到个人博客："><a href="#将语雀文档同步到个人博客：" class="headerlink" title="将语雀文档同步到个人博客："></a>将语雀文档同步到个人博客：</h4><p>1.将语雀文章以md格式导出。<br>2.将导出的文件复制粘贴进Hello-World.md文件（直接将导出的文件拖入source&#x2F;_posts&#x2F; 目录也可以）<br>3.运行：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">R:\MyProject\MyBlog\my-blog&gt;<span class="hljs-keyword">python</span> yuque.<span class="hljs-keyword">py</span> Hello-World.md<br></code></pre></td></tr></table></figure><p>（这条命令会将Hello-World.md中的cdn链接转储到本地source&#x2F;img&#x2F;Hello-World目录下并在Hello-World.md更改引用本地图片）</p><p>运行以下命令可在本地查看编辑效果。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>3.完成内容创作之后，运行：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean &amp;&amp; hexo <span class="hljs-keyword">generate</span> &amp;&amp; hexo deploy<br></code></pre></td></tr></table></figure><p>该命令会将本地的仓库的内容同步到GitHub。</p><hr><p>最终URL：<br>github：<a href="https://jimi-lab.github.io/">https://jimi-lab.github.io/</a><br>cloudflare：<a href="https://jimi-lab-github-io.pages.dev/">https://jimi-lab-github-io.pages.dev/</a></p><p>最终效果图如下：<br><img src = "/img/搭建个人博客/background.png"></p><p><strong>报错信息汇总</strong>：</p><p>1.如果遇到以下错误：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs subunit">Please make sure you have the correct access rights<br>and the repository exists.<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br><span class="hljs-keyword">Error: </span>Spawn failed<br>    at ChildProcess.&lt;anonymous&gt; (R:\MyProject\MyBlog\my-blog\node_modules\hexo-deployer-git\node_modules\hexo-util\lib\spawn.js:51:21)<br>    at ChildProcess.emit (node:events:524:28)<br>    at cp.emit (R:\MyProject\MyBlog\my-blog\node_modules\cross-spawn\lib\enoent.js:34:29)<br>    at ChildProcess._handle.onexit (node:internal/child_process:293:12)<br></code></pre></td></tr></table></figure><p>可能是因为ssh连接github时候连接不上报错，可以尝试打开代理&#x2F;电脑使用自己手机热点&#x2F;等方法解决。</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
